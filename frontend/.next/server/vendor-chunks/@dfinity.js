"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@dfinity";
exports.ids = ["vendor-chunks/@dfinity"];
exports.modules = {

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/actor.js":
/*!*******************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/actor.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTOR_METHOD_WITH_CERTIFICATE: () => (/* binding */ ACTOR_METHOD_WITH_CERTIFICATE),\n/* harmony export */   ACTOR_METHOD_WITH_HTTP_DETAILS: () => (/* binding */ ACTOR_METHOD_WITH_HTTP_DETAILS),\n/* harmony export */   Actor: () => (/* binding */ Actor),\n/* harmony export */   ActorCallError: () => (/* binding */ ActorCallError),\n/* harmony export */   AdvancedActor: () => (/* binding */ AdvancedActor),\n/* harmony export */   QueryCallRejectedError: () => (/* binding */ QueryCallRejectedError),\n/* harmony export */   UpdateCallRejectedError: () => (/* binding */ UpdateCallRejectedError),\n/* harmony export */   getManagementCanister: () => (/* binding */ getManagementCanister)\n/* harmony export */ });\n/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer/ */ \"(ssr)/../../../../../node_modules/buffer/index.js\");\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/index.js\");\n/* harmony import */ var _polling__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polling */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/index.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./certificate */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _canisters_management_idl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./canisters/management_idl */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js\");\n\n\n\n\n\n\n\n\n\nclass ActorCallError extends _errors__WEBPACK_IMPORTED_MODULE_2__.AgentError {\n    constructor(canisterId, methodName, type, props) {\n        super([\n            `Call failed:`,\n            `  Canister: ${canisterId.toText()}`,\n            `  Method: ${methodName} (${type})`,\n            ...Object.getOwnPropertyNames(props).map(n => `  \"${n}\": ${JSON.stringify(props[n])}`),\n        ].join('\\n'));\n        this.canisterId = canisterId;\n        this.methodName = methodName;\n        this.type = type;\n        this.props = props;\n    }\n}\nclass QueryCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, result) {\n        var _a;\n        super(canisterId, methodName, 'query', {\n            Status: result.status,\n            Code: (_a = _agent__WEBPACK_IMPORTED_MODULE_1__.ReplicaRejectCode[result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code \"${result.reject_code}\"`,\n            Message: result.reject_message,\n        });\n        this.result = result;\n    }\n}\nclass UpdateCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, requestId, response, reject_code, reject_message, error_code) {\n        super(canisterId, methodName, 'update', Object.assign({ 'Request ID': (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_6__.toHex)(requestId) }, (response.body\n            ? Object.assign(Object.assign({}, (error_code\n                ? {\n                    'Error code': error_code,\n                }\n                : {})), { 'Reject code': String(reject_code), 'Reject message': reject_message }) : {\n            'HTTP status code': response.status.toString(),\n            'HTTP status text': response.statusText,\n        })));\n        this.requestId = requestId;\n        this.response = response;\n        this.reject_code = reject_code;\n        this.reject_message = reject_message;\n        this.error_code = error_code;\n    }\n}\nconst metadataSymbol = Symbol.for('ic-agent-metadata');\n/**\n * An actor base class. An actor is an object containing only functions that will\n * return a promise. These functions are derived from the IDL definition.\n */\nclass Actor {\n    constructor(metadata) {\n        this[metadataSymbol] = Object.freeze(metadata);\n    }\n    /**\n     * Get the Agent class this Actor would call, or undefined if the Actor would use\n     * the default agent (global.ic.agent).\n     * @param actor The actor to get the agent of.\n     */\n    static agentOf(actor) {\n        return actor[metadataSymbol].config.agent;\n    }\n    /**\n     * Get the interface of an actor, in the form of an instance of a Service.\n     * @param actor The actor to get the interface of.\n     */\n    static interfaceOf(actor) {\n        return actor[metadataSymbol].service;\n    }\n    static canisterIdOf(actor) {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(actor[metadataSymbol].config.canisterId);\n    }\n    static async install(fields, config) {\n        const mode = fields.mode === undefined ? { install: null } : fields.mode;\n        // Need to transform the arg into a number array.\n        const arg = fields.arg ? [...new Uint8Array(fields.arg)] : [];\n        // Same for module.\n        const wasmModule = [...new Uint8Array(fields.module)];\n        const canisterId = typeof config.canisterId === 'string'\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromText(config.canisterId)\n            : config.canisterId;\n        await getManagementCanister(config).install_code({\n            mode,\n            arg,\n            wasm_module: wasmModule,\n            canister_id: canisterId,\n            sender_canister_version: [],\n        });\n    }\n    static async createCanister(config, settings) {\n        function settingsToCanisterSettings(settings) {\n            return [\n                {\n                    controllers: settings.controllers ? [settings.controllers] : [],\n                    compute_allocation: settings.compute_allocation ? [settings.compute_allocation] : [],\n                    freezing_threshold: settings.freezing_threshold ? [settings.freezing_threshold] : [],\n                    memory_allocation: settings.memory_allocation ? [settings.memory_allocation] : [],\n                    reserved_cycles_limit: [],\n                    log_visibility: [],\n                    wasm_memory_limit: [],\n                },\n            ];\n        }\n        const { canister_id: canisterId } = await getManagementCanister(config || {}).provisional_create_canister_with_cycles({\n            amount: [],\n            settings: settingsToCanisterSettings(settings || {}),\n            specified_id: [],\n            sender_canister_version: [],\n        });\n        return canisterId;\n    }\n    static async createAndInstallCanister(interfaceFactory, fields, config) {\n        const canisterId = await this.createCanister(config);\n        await this.install(Object.assign({}, fields), Object.assign(Object.assign({}, config), { canisterId }));\n        return this.createActor(interfaceFactory, Object.assign(Object.assign({}, config), { canisterId }));\n    }\n    static createActorClass(interfaceFactory, options) {\n        const service = interfaceFactory({ IDL: _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL });\n        class CanisterActor extends Actor {\n            constructor(config) {\n                if (!config.canisterId)\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AgentError(`Canister ID is required, but received ${typeof config.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);\n                const canisterId = typeof config.canisterId === 'string'\n                    ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromText(config.canisterId)\n                    : config.canisterId;\n                super({\n                    config: Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), config), { canisterId }),\n                    service,\n                });\n                for (const [methodName, func] of service._fields) {\n                    if (options === null || options === void 0 ? void 0 : options.httpDetails) {\n                        func.annotations.push(ACTOR_METHOD_WITH_HTTP_DETAILS);\n                    }\n                    if (options === null || options === void 0 ? void 0 : options.certificate) {\n                        func.annotations.push(ACTOR_METHOD_WITH_CERTIFICATE);\n                    }\n                    this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);\n                }\n            }\n        }\n        return CanisterActor;\n    }\n    static createActor(interfaceFactory, configuration) {\n        if (!configuration.canisterId) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AgentError(`Canister ID is required, but received ${typeof configuration.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`);\n        }\n        return new (this.createActorClass(interfaceFactory))(configuration);\n    }\n    /**\n     * Returns an actor with methods that return the http response details along with the result\n     * @param interfaceFactory - the interface factory for the actor\n     * @param configuration - the configuration for the actor\n     * @deprecated - use createActor with actorClassOptions instead\n     */\n    static createActorWithHttpDetails(interfaceFactory, configuration) {\n        return new (this.createActorClass(interfaceFactory, { httpDetails: true }))(configuration);\n    }\n    /**\n     * Returns an actor with methods that return the http response details along with the result\n     * @param interfaceFactory - the interface factory for the actor\n     * @param configuration - the configuration for the actor\n     * @param actorClassOptions - options for the actor class extended details to return with the result\n     */\n    static createActorWithExtendedDetails(interfaceFactory, configuration, actorClassOptions = {\n        httpDetails: true,\n        certificate: true,\n    }) {\n        return new (this.createActorClass(interfaceFactory, actorClassOptions))(configuration);\n    }\n}\n// IDL functions can have multiple return values, so decoding always\n// produces an array. Ensure that functions with single or zero return\n// values behave as expected.\nfunction decodeReturnValue(types, msg) {\n    const returnValues = _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL.decode(types, buffer___WEBPACK_IMPORTED_MODULE_0__.Buffer.from(msg));\n    switch (returnValues.length) {\n        case 0:\n            return undefined;\n        case 1:\n            return returnValues[0];\n        default:\n            return returnValues;\n    }\n}\nconst DEFAULT_ACTOR_CONFIG = {\n    pollingStrategyFactory: _polling__WEBPACK_IMPORTED_MODULE_4__.strategy.defaultStrategy,\n};\nconst ACTOR_METHOD_WITH_HTTP_DETAILS = 'http-details';\nconst ACTOR_METHOD_WITH_CERTIFICATE = 'certificate';\nfunction _createActorMethod(actor, methodName, func, blsVerify) {\n    let caller;\n    if (func.annotations.includes('query') || func.annotations.includes('composite_query')) {\n        caller = async (options, ...args) => {\n            var _a, _b;\n            // First, if there's a config transformation, call it.\n            options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).queryTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));\n            const agent = options.agent || actor[metadataSymbol].config.agent || (0,_agent__WEBPACK_IMPORTED_MODULE_1__.getDefaultAgent)();\n            const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(options.canisterId || actor[metadataSymbol].config.canisterId);\n            const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL.encode(func.argTypes, args);\n            const result = await agent.query(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: options.effectiveCanisterId,\n            });\n            const httpDetails = Object.assign(Object.assign({}, result.httpDetails), { requestDetails: result.requestDetails });\n            switch (result.status) {\n                case \"rejected\" /* QueryResponseStatus.Rejected */:\n                    throw new QueryCallRejectedError(cid, methodName, result);\n                case \"replied\" /* QueryResponseStatus.Replied */:\n                    return func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS)\n                        ? {\n                            httpDetails,\n                            result: decodeReturnValue(func.retTypes, result.reply.arg),\n                        }\n                        : decodeReturnValue(func.retTypes, result.reply.arg);\n            }\n        };\n    }\n    else {\n        caller = async (options, ...args) => {\n            var _a, _b;\n            // First, if there's a config transformation, call it.\n            options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).callTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));\n            const agent = options.agent || actor[metadataSymbol].config.agent || (0,_agent__WEBPACK_IMPORTED_MODULE_1__.getDefaultAgent)();\n            const { canisterId, effectiveCanisterId, pollingStrategyFactory } = Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), actor[metadataSymbol].config), options);\n            const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId);\n            const ecid = effectiveCanisterId !== undefined ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(effectiveCanisterId) : cid;\n            const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.IDL.encode(func.argTypes, args);\n            if (agent.rootKey == null)\n                throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AgentError('Agent root key not initialized before making call');\n            const { requestId, response, requestDetails } = await agent.call(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: ecid,\n            });\n            let reply;\n            let certificate;\n            if (response.body && response.body.certificate) {\n                const cert = response.body.certificate;\n                certificate = await _certificate__WEBPACK_IMPORTED_MODULE_7__.Certificate.create({\n                    certificate: (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__.bufFromBufLike)(cert),\n                    rootKey: agent.rootKey,\n                    canisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId),\n                    blsVerify,\n                });\n                const path = [new TextEncoder().encode('request_status'), requestId];\n                const status = new TextDecoder().decode((0,_certificate__WEBPACK_IMPORTED_MODULE_7__.lookupResultToBuffer)(certificate.lookup([...path, 'status'])));\n                switch (status) {\n                    case 'replied':\n                        reply = (0,_certificate__WEBPACK_IMPORTED_MODULE_7__.lookupResultToBuffer)(certificate.lookup([...path, 'reply']));\n                        break;\n                    case 'rejected': {\n                        // Find rejection details in the certificate\n                        const rejectCode = new Uint8Array((0,_certificate__WEBPACK_IMPORTED_MODULE_7__.lookupResultToBuffer)(certificate.lookup([...path, 'reject_code'])))[0];\n                        const rejectMessage = new TextDecoder().decode((0,_certificate__WEBPACK_IMPORTED_MODULE_7__.lookupResultToBuffer)(certificate.lookup([...path, 'reject_message'])));\n                        const error_code_buf = (0,_certificate__WEBPACK_IMPORTED_MODULE_7__.lookupResultToBuffer)(certificate.lookup([...path, 'error_code']));\n                        const error_code = error_code_buf\n                            ? new TextDecoder().decode(error_code_buf)\n                            : undefined;\n                        throw new UpdateCallRejectedError(cid, methodName, requestId, response, rejectCode, rejectMessage, error_code);\n                    }\n                }\n            }\n            else if (response.body && 'reject_message' in response.body) {\n                // handle v2 response errors by throwing an UpdateCallRejectedError object\n                const { reject_code, reject_message, error_code } = response.body;\n                throw new UpdateCallRejectedError(cid, methodName, requestId, response, reject_code, reject_message, error_code);\n            }\n            // Fall back to polling if we receive an Accepted response code\n            if (response.status === 202) {\n                const pollStrategy = pollingStrategyFactory();\n                // Contains the certificate and the reply from the boundary node\n                const response = await (0,_polling__WEBPACK_IMPORTED_MODULE_4__.pollForResponse)(agent, ecid, requestId, pollStrategy, blsVerify);\n                certificate = response.certificate;\n                reply = response.reply;\n            }\n            const shouldIncludeHttpDetails = func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS);\n            const shouldIncludeCertificate = func.annotations.includes(ACTOR_METHOD_WITH_CERTIFICATE);\n            const httpDetails = Object.assign(Object.assign({}, response), { requestDetails });\n            if (reply !== undefined) {\n                if (shouldIncludeHttpDetails && shouldIncludeCertificate) {\n                    return {\n                        httpDetails,\n                        certificate,\n                        result: decodeReturnValue(func.retTypes, reply),\n                    };\n                }\n                else if (shouldIncludeCertificate) {\n                    return {\n                        certificate,\n                        result: decodeReturnValue(func.retTypes, reply),\n                    };\n                }\n                else if (shouldIncludeHttpDetails) {\n                    return {\n                        httpDetails,\n                        result: decodeReturnValue(func.retTypes, reply),\n                    };\n                }\n                return decodeReturnValue(func.retTypes, reply);\n            }\n            else if (func.retTypes.length === 0) {\n                return shouldIncludeHttpDetails\n                    ? {\n                        httpDetails: response,\n                        result: undefined,\n                    }\n                    : undefined;\n            }\n            else {\n                throw new Error(`Call was returned undefined, but type [${func.retTypes.join(',')}].`);\n            }\n        };\n    }\n    const handler = (...args) => caller({}, ...args);\n    handler.withOptions =\n        (options) => (...args) => caller(options, ...args);\n    return handler;\n}\n/**\n * Create a management canister actor\n * @param config - a CallConfig\n */\nfunction getManagementCanister(config) {\n    function transform(_methodName, args) {\n        if (config.effectiveCanisterId) {\n            return { effectiveCanisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(config.effectiveCanisterId) };\n        }\n        const first = args[0];\n        let effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromHex('');\n        if (first && typeof first === 'object' && first.canister_id) {\n            effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(first.canister_id);\n        }\n        return { effectiveCanisterId };\n    }\n    return Actor.createActor(_canisters_management_idl__WEBPACK_IMPORTED_MODULE_8__[\"default\"], Object.assign(Object.assign(Object.assign({}, config), { canisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromHex('') }), {\n        callTransform: transform,\n        queryTransform: transform,\n    }));\n}\nclass AdvancedActor extends Actor {\n    constructor(metadata) {\n        super(metadata);\n    }\n}\n//# sourceMappingURL=actor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/actor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/api.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/agent/api.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReplicaRejectCode: () => (/* binding */ ReplicaRejectCode)\n/* harmony export */ });\n/**\n * Codes used by the replica for rejecting a message.\n * See {@link https://sdk.dfinity.org/docs/interface-spec/#reject-codes | the interface spec}.\n */\nvar ReplicaRejectCode;\n(function (ReplicaRejectCode) {\n    ReplicaRejectCode[ReplicaRejectCode[\"SysFatal\"] = 1] = \"SysFatal\";\n    ReplicaRejectCode[ReplicaRejectCode[\"SysTransient\"] = 2] = \"SysTransient\";\n    ReplicaRejectCode[ReplicaRejectCode[\"DestinationInvalid\"] = 3] = \"DestinationInvalid\";\n    ReplicaRejectCode[ReplicaRejectCode[\"CanisterReject\"] = 4] = \"CanisterReject\";\n    ReplicaRejectCode[ReplicaRejectCode[\"CanisterError\"] = 5] = \"CanisterError\";\n})(ReplicaRejectCode || (ReplicaRejectCode = {}));\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvYXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsUUFBUSxxRkFBcUY7QUFDN0Y7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9hZ2VudC9hcGkuanM/N2ZkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGVzIHVzZWQgYnkgdGhlIHJlcGxpY2EgZm9yIHJlamVjdGluZyBhIG1lc3NhZ2UuXG4gKiBTZWUge0BsaW5rIGh0dHBzOi8vc2RrLmRmaW5pdHkub3JnL2RvY3MvaW50ZXJmYWNlLXNwZWMvI3JlamVjdC1jb2RlcyB8IHRoZSBpbnRlcmZhY2Ugc3BlY30uXG4gKi9cbmV4cG9ydCB2YXIgUmVwbGljYVJlamVjdENvZGU7XG4oZnVuY3Rpb24gKFJlcGxpY2FSZWplY3RDb2RlKSB7XG4gICAgUmVwbGljYVJlamVjdENvZGVbUmVwbGljYVJlamVjdENvZGVbXCJTeXNGYXRhbFwiXSA9IDFdID0gXCJTeXNGYXRhbFwiO1xuICAgIFJlcGxpY2FSZWplY3RDb2RlW1JlcGxpY2FSZWplY3RDb2RlW1wiU3lzVHJhbnNpZW50XCJdID0gMl0gPSBcIlN5c1RyYW5zaWVudFwiO1xuICAgIFJlcGxpY2FSZWplY3RDb2RlW1JlcGxpY2FSZWplY3RDb2RlW1wiRGVzdGluYXRpb25JbnZhbGlkXCJdID0gM10gPSBcIkRlc3RpbmF0aW9uSW52YWxpZFwiO1xuICAgIFJlcGxpY2FSZWplY3RDb2RlW1JlcGxpY2FSZWplY3RDb2RlW1wiQ2FuaXN0ZXJSZWplY3RcIl0gPSA0XSA9IFwiQ2FuaXN0ZXJSZWplY3RcIjtcbiAgICBSZXBsaWNhUmVqZWN0Q29kZVtSZXBsaWNhUmVqZWN0Q29kZVtcIkNhbmlzdGVyRXJyb3JcIl0gPSA1XSA9IFwiQ2FuaXN0ZXJFcnJvclwiO1xufSkoUmVwbGljYVJlamVjdENvZGUgfHwgKFJlcGxpY2FSZWplY3RDb2RlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/api.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/errors.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/errors.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentHTTPResponseError: () => (/* binding */ AgentHTTPResponseError)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/errors.js\");\n\nclass AgentHTTPResponseError extends _errors__WEBPACK_IMPORTED_MODULE_0__.AgentError {\n    constructor(message, response) {\n        super(message);\n        this.response = response;\n        this.name = this.constructor.name;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvaHR0cC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEM7QUFDbkMscUNBQXFDLCtDQUFVO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2FnZW50L2h0dHAvZXJyb3JzLmpzP2VjNTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdlbnRFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5leHBvcnQgY2xhc3MgQWdlbnRIVFRQUmVzcG9uc2VFcnJvciBleHRlbmRzIEFnZW50RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHJlc3BvbnNlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/errors.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/index.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expiry: () => (/* reexport safe */ _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry),\n/* harmony export */   HttpAgent: () => (/* binding */ HttpAgent),\n/* harmony export */   IC_ROOT_KEY: () => (/* binding */ IC_ROOT_KEY),\n/* harmony export */   IdentityInvalidError: () => (/* binding */ IdentityInvalidError),\n/* harmony export */   MANAGEMENT_CANISTER_ID: () => (/* binding */ MANAGEMENT_CANISTER_ID),\n/* harmony export */   RequestStatusResponseStatus: () => (/* binding */ RequestStatusResponseStatus),\n/* harmony export */   httpHeadersTransform: () => (/* reexport safe */ _transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform),\n/* harmony export */   makeExpiryTransform: () => (/* reexport safe */ _transforms__WEBPACK_IMPORTED_MODULE_6__.makeExpiryTransform),\n/* harmony export */   makeNonce: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_7__.makeNonce),\n/* harmony export */   makeNonceTransform: () => (/* reexport safe */ _transforms__WEBPACK_IMPORTED_MODULE_6__.makeNonceTransform)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../auth */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/auth.js\");\n/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../cbor */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../request_id */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _transforms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transforms */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./errors */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/errors.js\");\n/* harmony import */ var _canisterStatus__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../canisterStatus */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\");\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../certificate */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/../../../../../node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var _utils_expirableMap__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/expirableMap */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js\");\n/* harmony import */ var _public_key__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../public_key */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/public_key.js\");\n/* harmony import */ var _utils_leb__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utils/leb */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../observable */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/observable.js\");\n/* harmony import */ var _polling_backoff__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../polling/backoff */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/backoff.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../constants */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/constants.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HttpAgent_instances, _HttpAgent_identity, _HttpAgent_fetch, _HttpAgent_fetchOptions, _HttpAgent_callOptions, _HttpAgent_timeDiffMsecs, _HttpAgent_credentials, _HttpAgent_rootKeyFetched, _HttpAgent_retryTimes, _HttpAgent_backoffStrategy, _HttpAgent_maxIngressExpiryInMinutes, _HttpAgent_waterMark, _HttpAgent_queryPipeline, _HttpAgent_updatePipeline, _HttpAgent_subnetKeys, _HttpAgent_verifyQuerySignatures, _HttpAgent_requestAndRetryQuery, _HttpAgent_requestAndRetry, _HttpAgent_verifyQueryResponse;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RequestStatusResponseStatus;\n(function (RequestStatusResponseStatus) {\n    RequestStatusResponseStatus[\"Received\"] = \"received\";\n    RequestStatusResponseStatus[\"Processing\"] = \"processing\";\n    RequestStatusResponseStatus[\"Replied\"] = \"replied\";\n    RequestStatusResponseStatus[\"Rejected\"] = \"rejected\";\n    RequestStatusResponseStatus[\"Unknown\"] = \"unknown\";\n    RequestStatusResponseStatus[\"Done\"] = \"done\";\n})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));\nconst MINUTE_TO_MSECS = 60 * 1000;\n// Root public key for the IC, encoded as hex\nconst IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n    'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n    '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n    'b01291091c5f87b98883463f98091a0baaae';\nconst MANAGEMENT_CANISTER_ID = 'aaaaa-aa';\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\nclass HttpDefaultFetchError extends _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError {\n    constructor(message) {\n        super(message);\n        this.message = message;\n    }\n}\nclass IdentityInvalidError extends _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError {\n    constructor(message) {\n        super(message);\n        this.message = message;\n    }\n}\nfunction getDefaultFetch() {\n    let defaultFetch;\n    if (typeof window !== 'undefined') {\n        // Browser context\n        if (window.fetch) {\n            defaultFetch = window.fetch.bind(window);\n        }\n        else {\n            throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.');\n        }\n    }\n    else if (typeof global !== 'undefined') {\n        // Node context\n        if (global.fetch) {\n            defaultFetch = global.fetch.bind(global);\n        }\n        else {\n            throw new HttpDefaultFetchError('Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.');\n        }\n    }\n    else if (typeof self !== 'undefined') {\n        if (self.fetch) {\n            defaultFetch = self.fetch.bind(self);\n        }\n    }\n    if (defaultFetch) {\n        return defaultFetch;\n    }\n    throw new HttpDefaultFetchError('Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.');\n}\nfunction determineHost(configuredHost) {\n    let host;\n    if (configuredHost !== undefined) {\n        if (!configuredHost.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n            host = new URL(window.location.protocol + '//' + configuredHost);\n        }\n        else {\n            host = new URL(configuredHost);\n        }\n    }\n    else {\n        // Mainnet, local, and remote environments will have the api route available\n        const knownHosts = ['ic0.app', 'icp0.io', '127.0.0.1', 'localhost'];\n        const remoteHosts = ['.github.dev', '.gitpod.io'];\n        const location = typeof window !== 'undefined' ? window.location : undefined;\n        const hostname = location === null || location === void 0 ? void 0 : location.hostname;\n        let knownHost;\n        if (hostname && typeof hostname === 'string') {\n            if (remoteHosts.some(host => hostname.endsWith(host))) {\n                knownHost = hostname;\n            }\n            else {\n                knownHost = knownHosts.find(host => hostname.endsWith(host));\n            }\n        }\n        if (location && knownHost) {\n            // If the user is on a boundary-node provided host, we can use the same host for the agent\n            host = new URL(`${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`);\n        }\n        else {\n            host = new URL('https://icp-api.io');\n        }\n    }\n    return host.toString();\n}\n/**\n * A HTTP agent allows users to interact with a client of the internet computer\nusing the available methods. It exposes an API that closely follows the\npublic view of the internet computer, and is not intended to be exposed\ndirectly to the majority of users due to its low-level interface.\n * There is a pipeline to apply transformations to the request before sending\nit to the client. This is to decouple signature, nonce generation and\nother computations so that this class can stay as simple as possible while\nallowing extensions.\n */\nclass HttpAgent {\n    /**\n     * @param options - Options for the HttpAgent\n     * @deprecated Use `HttpAgent.create` or `HttpAgent.createSync` instead\n     */\n    constructor(options = {}) {\n        var _a;\n        _HttpAgent_instances.add(this);\n        _HttpAgent_identity.set(this, void 0);\n        _HttpAgent_fetch.set(this, void 0);\n        _HttpAgent_fetchOptions.set(this, void 0);\n        _HttpAgent_callOptions.set(this, void 0);\n        _HttpAgent_timeDiffMsecs.set(this, 0);\n        _HttpAgent_credentials.set(this, void 0);\n        _HttpAgent_rootKeyFetched.set(this, false);\n        _HttpAgent_retryTimes.set(this, void 0); // Retry requests N times before erroring by default\n        _HttpAgent_backoffStrategy.set(this, void 0);\n        _HttpAgent_maxIngressExpiryInMinutes.set(this, void 0);\n        // Public signature to help with type checking.\n        this._isAgent = true;\n        this.config = {};\n        // The UTC time in milliseconds when the latest request was made\n        _HttpAgent_waterMark.set(this, 0);\n        this.log = new _observable__WEBPACK_IMPORTED_MODULE_14__.ObservableLog();\n        _HttpAgent_queryPipeline.set(this, []);\n        _HttpAgent_updatePipeline.set(this, []);\n        _HttpAgent_subnetKeys.set(this, new _utils_expirableMap__WEBPACK_IMPORTED_MODULE_11__.ExpirableMap({\n            expirationTime: 5 * 60 * 1000, // 5 minutes\n        }));\n        _HttpAgent_verifyQuerySignatures.set(this, true);\n        /**\n         * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n         * @param queryResponse - The response from the query\n         * @param subnetStatus - The subnet status, including all node keys\n         * @returns ApiQueryResponse\n         */\n        _HttpAgent_verifyQueryResponse.set(this, (queryResponse, subnetStatus) => {\n            if (__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\") === false) {\n                // This should not be called if the user has disabled verification\n                return queryResponse;\n            }\n            if (!subnetStatus) {\n                throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n            }\n            const { status, signatures = [], requestId } = queryResponse;\n            const domainSeparator = new TextEncoder().encode('\\x0Bic-response');\n            for (const sig of signatures) {\n                const { timestamp, identity } = sig;\n                const nodeId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(identity).toText();\n                let hash;\n                // Hash is constructed differently depending on the status\n                if (status === 'replied') {\n                    const { reply } = queryResponse;\n                    hash = (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.hashOfMap)({\n                        status: status,\n                        reply: reply,\n                        timestamp: BigInt(timestamp),\n                        request_id: requestId,\n                    });\n                }\n                else if (status === 'rejected') {\n                    const { reject_code, reject_message, error_code } = queryResponse;\n                    hash = (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.hashOfMap)({\n                        status: status,\n                        reject_code: reject_code,\n                        reject_message: reject_message,\n                        error_code: error_code,\n                        timestamp: BigInt(timestamp),\n                        request_id: requestId,\n                    });\n                }\n                else {\n                    throw new Error(`Unknown status: ${status}`);\n                }\n                const separatorWithHash = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_5__.concat)(domainSeparator, new Uint8Array(hash));\n                // FIX: check for match without verifying N times\n                const pubKey = subnetStatus === null || subnetStatus === void 0 ? void 0 : subnetStatus.nodeKeys.get(nodeId);\n                if (!pubKey) {\n                    throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n                }\n                const rawKey = _public_key__WEBPACK_IMPORTED_MODULE_12__.Ed25519PublicKey.fromDer(pubKey).rawKey;\n                const valid = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_17__.ed25519.verify(sig.signature, new Uint8Array(separatorWithHash), new Uint8Array(rawKey));\n                if (valid)\n                    return queryResponse;\n                throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError(`Invalid signature from replica ${nodeId} signed query.`);\n            }\n            return queryResponse;\n        });\n        this.config = options;\n        __classPrivateFieldSet(this, _HttpAgent_fetch, options.fetch || getDefaultFetch() || fetch.bind(global), \"f\");\n        __classPrivateFieldSet(this, _HttpAgent_fetchOptions, options.fetchOptions, \"f\");\n        __classPrivateFieldSet(this, _HttpAgent_callOptions, options.callOptions, \"f\");\n        this.rootKey = options.rootKey ? options.rootKey : (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_5__.fromHex)(IC_ROOT_KEY);\n        const host = determineHost(options.host);\n        this.host = new URL(host);\n        if (options.verifyQuerySignatures !== undefined) {\n            __classPrivateFieldSet(this, _HttpAgent_verifyQuerySignatures, options.verifyQuerySignatures, \"f\");\n        }\n        // Default is 3\n        __classPrivateFieldSet(this, _HttpAgent_retryTimes, (_a = options.retryTimes) !== null && _a !== void 0 ? _a : 3, \"f\");\n        // Delay strategy for retries. Default is exponential backoff\n        const defaultBackoffFactory = () => new _polling_backoff__WEBPACK_IMPORTED_MODULE_15__.ExponentialBackoff({\n            maxIterations: __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\"),\n        });\n        __classPrivateFieldSet(this, _HttpAgent_backoffStrategy, options.backoffStrategy || defaultBackoffFactory, \"f\");\n        // Rewrite to avoid redirects\n        if (this.host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n            this.host.hostname = IC0_DOMAIN;\n        }\n        else if (this.host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n            this.host.hostname = ICP0_DOMAIN;\n        }\n        else if (this.host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n            this.host.hostname = ICP_API_DOMAIN;\n        }\n        if (options.credentials) {\n            const { name, password } = options.credentials;\n            __classPrivateFieldSet(this, _HttpAgent_credentials, `${name}${password ? ':' + password : ''}`, \"f\");\n        }\n        __classPrivateFieldSet(this, _HttpAgent_identity, Promise.resolve(options.identity || new _auth__WEBPACK_IMPORTED_MODULE_2__.AnonymousIdentity()), \"f\");\n        if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes > 5) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`The maximum ingress expiry time is 5 minutes. Provided ingress expiry time is ${options.ingressExpiryInMinutes} minutes.`);\n        }\n        if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes <= 0) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`Ingress expiry time must be greater than 0. Provided ingress expiry time is ${options.ingressExpiryInMinutes} minutes.`);\n        }\n        __classPrivateFieldSet(this, _HttpAgent_maxIngressExpiryInMinutes, options.ingressExpiryInMinutes || 5, \"f\");\n        // Add a nonce transform to ensure calls are unique\n        this.addTransform('update', (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.makeNonceTransform)(_types__WEBPACK_IMPORTED_MODULE_7__.makeNonce));\n        if (options.useQueryNonces) {\n            this.addTransform('query', (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.makeNonceTransform)(_types__WEBPACK_IMPORTED_MODULE_7__.makeNonce));\n        }\n        if (options.logToConsole) {\n            this.log.subscribe(log => {\n                if (log.level === 'error') {\n                    console.error(log.message);\n                }\n                else if (log.level === 'warn') {\n                    console.warn(log.message);\n                }\n                else {\n                    console.log(log.message);\n                }\n            });\n        }\n    }\n    get waterMark() {\n        return __classPrivateFieldGet(this, _HttpAgent_waterMark, \"f\");\n    }\n    static createSync(options = {}) {\n        return new this(Object.assign({}, options));\n    }\n    static async create(options = {\n        shouldFetchRootKey: false,\n    }) {\n        const agent = HttpAgent.createSync(options);\n        const initPromises = [agent.syncTime()];\n        if (agent.host.toString() !== 'https://icp-api.io' && options.shouldFetchRootKey) {\n            initPromises.push(agent.fetchRootKey());\n        }\n        await Promise.all(initPromises);\n        return agent;\n    }\n    static async from(agent) {\n        var _a;\n        try {\n            if ('config' in agent) {\n                return await HttpAgent.create(agent.config);\n            }\n            return await HttpAgent.create({\n                fetch: agent._fetch,\n                fetchOptions: agent._fetchOptions,\n                callOptions: agent._callOptions,\n                host: agent._host.toString(),\n                identity: (_a = agent._identity) !== null && _a !== void 0 ? _a : undefined,\n            });\n        }\n        catch (_b) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError('Failed to create agent from provided agent');\n        }\n    }\n    isLocal() {\n        const hostname = this.host.hostname;\n        return hostname === '127.0.0.1' || hostname.endsWith('127.0.0.1');\n    }\n    addTransform(type, fn, priority = fn.priority || 0) {\n        if (type === 'update') {\n            // Keep the pipeline sorted at all time, by priority.\n            const i = __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").findIndex(x => (x.priority || 0) < priority);\n            __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").splice(i >= 0 ? i : __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\").length, 0, Object.assign(fn, { priority }));\n        }\n        else if (type === 'query') {\n            // Keep the pipeline sorted at all time, by priority.\n            const i = __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").findIndex(x => (x.priority || 0) < priority);\n            __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").splice(i >= 0 ? i : __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\").length, 0, Object.assign(fn, { priority }));\n        }\n    }\n    async getPrincipal() {\n        if (!__classPrivateFieldGet(this, _HttpAgent_identity, \"f\")) {\n            throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n        }\n        return (await __classPrivateFieldGet(this, _HttpAgent_identity, \"f\")).getPrincipal();\n    }\n    async call(canisterId, options, identity) {\n        var _a;\n        // TODO - restore this value\n        const callSync = (_a = options.callSync) !== null && _a !== void 0 ? _a : true;\n        const id = await (identity !== undefined ? await identity : await __classPrivateFieldGet(this, _HttpAgent_identity, \"f\"));\n        if (!id) {\n            throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n        }\n        const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        const ecid = options.effectiveCanisterId\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(options.effectiveCanisterId)\n            : canister;\n        const sender = id.getPrincipal() || _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n        let ingress_expiry = new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS);\n        // If the value is off by more than 30 seconds, reconcile system time with the network\n        if (Math.abs(__classPrivateFieldGet(this, _HttpAgent_timeDiffMsecs, \"f\")) > 1000 * 30) {\n            ingress_expiry = new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS + __classPrivateFieldGet(this, _HttpAgent_timeDiffMsecs, \"f\"));\n        }\n        const submit = {\n            request_type: _types__WEBPACK_IMPORTED_MODULE_7__.SubmitRequestType.Call,\n            canister_id: canister,\n            method_name: options.methodName,\n            arg: options.arg,\n            sender,\n            ingress_expiry,\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let transformedRequest = (await this._transform({\n            request: {\n                body: null,\n                method: 'POST',\n                headers: Object.assign({ 'Content-Type': 'application/cbor' }, (__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\") ? { Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\")) } : {})),\n            },\n            endpoint: \"call\" /* Endpoint.Call */,\n            body: submit,\n        }));\n        const nonce = transformedRequest.body.nonce\n            ? toNonce(transformedRequest.body.nonce)\n            : undefined;\n        submit.nonce = nonce;\n        function toNonce(buf) {\n            return new Uint8Array(buf);\n        }\n        // Apply transform for identity.\n        transformedRequest = await id.transformRequest(transformedRequest);\n        const body = _cbor__WEBPACK_IMPORTED_MODULE_3__.encode(transformedRequest.body);\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        try {\n            // Attempt v3 sync call\n            const requestSync = () => {\n                this.log.print(`fetching \"/api/v3/canister/${ecid.toText()}/call\" with request:`, transformedRequest);\n                return __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v3/canister/${ecid.toText()}/call`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_callOptions, \"f\")), transformedRequest.request), { body }));\n            };\n            const requestAsync = () => {\n                this.log.print(`fetching \"/api/v2/canister/${ecid.toText()}/call\" with request:`, transformedRequest);\n                return __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_callOptions, \"f\")), transformedRequest.request), { body }));\n            };\n            const request = __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n                request: callSync ? requestSync : requestAsync,\n                backoff,\n                tries: 0,\n            });\n            const [response, requestId] = await Promise.all([request, (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.requestIdOf)(submit)]);\n            const responseBuffer = await response.arrayBuffer();\n            const responseBody = (response.status === 200 && responseBuffer.byteLength > 0\n                ? _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(responseBuffer)\n                : null);\n            // Update the watermark with the latest time from consensus\n            if (responseBody && 'certificate' in responseBody) {\n                const time = await this.parseTimeFromResponse({\n                    certificate: responseBody.certificate,\n                });\n                __classPrivateFieldSet(this, _HttpAgent_waterMark, time, \"f\");\n            }\n            return {\n                requestId,\n                response: {\n                    ok: response.ok,\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseBody,\n                    headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(response.headers),\n                },\n                requestDetails: submit,\n            };\n        }\n        catch (error) {\n            // If the error is due to the v3 api not being supported, fall back to v2\n            if (error.message.includes('v3 api not supported.')) {\n                this.log.warn('v3 api not supported. Fall back to v2');\n                return this.call(canisterId, Object.assign(Object.assign({}, options), { \n                    // disable v3 api\n                    callSync: false }), identity);\n            }\n            this.log.error('Error while making call:', error);\n            throw error;\n        }\n    }\n    async query(canisterId, fields, identity) {\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        const ecid = fields.effectiveCanisterId\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(fields.effectiveCanisterId)\n            : _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        this.log.print(`ecid ${ecid.toString()}`);\n        this.log.print(`canisterId ${canisterId.toString()}`);\n        const makeQuery = async () => {\n            const id = await (identity !== undefined ? identity : __classPrivateFieldGet(this, _HttpAgent_identity, \"f\"));\n            if (!id) {\n                throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n            }\n            const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n            const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n            const request = {\n                request_type: \"query\" /* ReadRequestType.Query */,\n                canister_id: canister,\n                method_name: fields.methodName,\n                arg: fields.arg,\n                sender,\n                ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS),\n            };\n            const requestId = await (0,_request_id__WEBPACK_IMPORTED_MODULE_4__.requestIdOf)(request);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let transformedRequest = await this._transform({\n                request: {\n                    method: 'POST',\n                    headers: Object.assign({ 'Content-Type': 'application/cbor' }, (__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\") ? { Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\")) } : {})),\n                },\n                endpoint: \"read\" /* Endpoint.Query */,\n                body: request,\n            });\n            // Apply transform for identity.\n            transformedRequest = (await (id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest)));\n            const body = _cbor__WEBPACK_IMPORTED_MODULE_3__.encode(transformedRequest.body);\n            const args = {\n                canister: canister.toText(),\n                ecid,\n                transformedRequest,\n                body,\n                requestId,\n                backoff,\n                tries: 0,\n            };\n            return {\n                requestDetails: request,\n                query: await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, args),\n            };\n        };\n        const getSubnetStatus = async () => {\n            if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n                return undefined;\n            }\n            const subnetStatus = __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(ecid.toString());\n            if (subnetStatus) {\n                return subnetStatus;\n            }\n            await this.fetchSubnetKeys(ecid.toString());\n            return __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(ecid.toString());\n        };\n        // Attempt to make the query i=retryTimes times\n        // Make query and fetch subnet keys in parallel\n        const [queryResult, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);\n        const { requestDetails, query } = queryResult;\n        const queryWithDetails = Object.assign(Object.assign({}, query), { requestDetails });\n        this.log.print('Query response:', queryWithDetails);\n        // Skip verification if the user has disabled it\n        if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n            return queryWithDetails;\n        }\n        try {\n            return __classPrivateFieldGet(this, _HttpAgent_verifyQueryResponse, \"f\").call(this, queryWithDetails, subnetStatus);\n        }\n        catch (_a) {\n            // In case the node signatures have changed, refresh the subnet keys and try again\n            this.log.warn('Query response verification failed. Retrying with fresh subnet keys.');\n            __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").delete(canisterId.toString());\n            await this.fetchSubnetKeys(ecid.toString());\n            const updatedSubnetStatus = __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").get(canisterId.toString());\n            if (!updatedSubnetStatus) {\n                throw new _certificate__WEBPACK_IMPORTED_MODULE_10__.CertificateVerificationError('Invalid signature from replica signed query: no matching node key found.');\n            }\n            return __classPrivateFieldGet(this, _HttpAgent_verifyQueryResponse, \"f\").call(this, queryWithDetails, updatedSubnetStatus);\n        }\n    }\n    async createReadStateRequest(fields, identity) {\n        const id = await (identity !== undefined ? await identity : await __classPrivateFieldGet(this, _HttpAgent_identity, \"f\"));\n        if (!id) {\n            throw new IdentityInvalidError(\"This identity has expired due this application's security policy. Please refresh your authentication.\");\n        }\n        const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const transformedRequest = await this._transform({\n            request: {\n                method: 'POST',\n                headers: Object.assign({ 'Content-Type': 'application/cbor' }, (__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\") ? { Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\")) } : {})),\n            },\n            endpoint: \"read_state\" /* Endpoint.ReadState */,\n            body: {\n                request_type: \"read_state\" /* ReadRequestType.ReadState */,\n                paths: fields.paths,\n                sender,\n                ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(__classPrivateFieldGet(this, _HttpAgent_maxIngressExpiryInMinutes, \"f\") * MINUTE_TO_MSECS),\n            },\n        });\n        // Apply transform for identity.\n        return id === null || id === void 0 ? void 0 : id.transformRequest(transformedRequest);\n    }\n    async readState(canisterId, fields, identity, \n    // eslint-disable-next-line\n    request) {\n        const canister = typeof canisterId === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText(canisterId) : canisterId;\n        const transformedRequest = request !== null && request !== void 0 ? request : (await this.createReadStateRequest(fields, identity));\n        // With read_state, we should always use a fresh expiry, even beyond the point where the initial request would have expired\n        const bodyWithAdjustedExpiry = Object.assign(Object.assign({}, transformedRequest.body), { ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__.Expiry(_constants__WEBPACK_IMPORTED_MODULE_16__.DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS) });\n        const body = _cbor__WEBPACK_IMPORTED_MODULE_3__.encode(bodyWithAdjustedExpiry);\n        this.log.print(`fetching \"/api/v2/canister/${canister}/read_state\" with request:`, transformedRequest);\n        // TODO - https://dfinity.atlassian.net/browse/SDK-1092\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        try {\n            const response = await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n                request: () => __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/canister/${canister.toString()}/read_state`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_fetchOptions, \"f\")), transformedRequest.request), { body })),\n                backoff,\n                tries: 0,\n            });\n            if (!response.ok) {\n                throw new Error(`Server returned an error:\\n` +\n                    `  Code: ${response.status} (${response.statusText})\\n` +\n                    `  Body: ${await response.text()}\\n`);\n            }\n            const decodedResponse = _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(await response.arrayBuffer());\n            this.log.print('Read state response:', decodedResponse);\n            const parsedTime = await this.parseTimeFromResponse(decodedResponse);\n            if (parsedTime > 0) {\n                this.log.print('Read state response time:', parsedTime);\n                __classPrivateFieldSet(this, _HttpAgent_waterMark, parsedTime, \"f\");\n            }\n            return decodedResponse;\n        }\n        catch (error) {\n            this.log.error('Caught exception while attempting to read state', error);\n            throw error;\n        }\n    }\n    async parseTimeFromResponse(response) {\n        let tree;\n        if (response.certificate) {\n            const decoded = _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(response.certificate);\n            if (decoded && 'tree' in decoded) {\n                tree = decoded.tree;\n            }\n            else {\n                throw new Error('Could not decode time from response');\n            }\n            const timeLookup = (0,_certificate__WEBPACK_IMPORTED_MODULE_10__.lookup_path)(['time'], tree);\n            if (timeLookup.status !== _certificate__WEBPACK_IMPORTED_MODULE_10__.LookupStatus.Found) {\n                throw new Error('Time was not found in the response or was not in its expected format.');\n            }\n            if (!(timeLookup.value instanceof ArrayBuffer) && !ArrayBuffer.isView(timeLookup)) {\n                throw new Error('Time was not found in the response or was not in its expected format.');\n            }\n            const date = (0,_utils_leb__WEBPACK_IMPORTED_MODULE_13__.decodeTime)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_5__.bufFromBufLike)(timeLookup.value));\n            this.log.print('Time from response:', date);\n            this.log.print('Time from response in milliseconds:', Number(date));\n            return Number(date);\n        }\n        else {\n            this.log.warn('No certificate found in response');\n        }\n        return 0;\n    }\n    /**\n     * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n     * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n     */\n    async syncTime(canisterId) {\n        const CanisterStatus = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../canisterStatus */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\"));\n        const callTime = Date.now();\n        try {\n            if (!canisterId) {\n                this.log.print('Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai');\n            }\n            const status = await CanisterStatus.request({\n                // Fall back with canisterId of the ICP Ledger\n                canisterId: canisterId !== null && canisterId !== void 0 ? canisterId : _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n                agent: this,\n                paths: ['time'],\n            });\n            const replicaTime = status.get('time');\n            if (replicaTime) {\n                __classPrivateFieldSet(this, _HttpAgent_timeDiffMsecs, Number(replicaTime) - Number(callTime), \"f\");\n            }\n        }\n        catch (error) {\n            this.log.error('Caught exception while attempting to sync time', error);\n        }\n    }\n    async status() {\n        const headers = __classPrivateFieldGet(this, _HttpAgent_credentials, \"f\")\n            ? {\n                Authorization: 'Basic ' + btoa(__classPrivateFieldGet(this, _HttpAgent_credentials, \"f\")),\n            }\n            : {};\n        this.log.print(`fetching \"/api/v2/status\"`);\n        const backoff = __classPrivateFieldGet(this, _HttpAgent_backoffStrategy, \"f\").call(this);\n        const response = await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, {\n            backoff,\n            request: () => __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/status`, this.host), Object.assign({ headers }, __classPrivateFieldGet(this, _HttpAgent_fetchOptions, \"f\"))),\n            tries: 0,\n        });\n        return _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(await response.arrayBuffer());\n    }\n    async fetchRootKey() {\n        if (!__classPrivateFieldGet(this, _HttpAgent_rootKeyFetched, \"f\")) {\n            const status = await this.status();\n            // Hex-encoded version of the replica root key\n            this.rootKey = status.root_key;\n            __classPrivateFieldSet(this, _HttpAgent_rootKeyFetched, true, \"f\");\n        }\n        return this.rootKey;\n    }\n    invalidateIdentity() {\n        __classPrivateFieldSet(this, _HttpAgent_identity, null, \"f\");\n    }\n    replaceIdentity(identity) {\n        __classPrivateFieldSet(this, _HttpAgent_identity, Promise.resolve(identity), \"f\");\n    }\n    async fetchSubnetKeys(canisterId) {\n        const effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        const response = await (0,_canisterStatus__WEBPACK_IMPORTED_MODULE_9__.request)({\n            canisterId: effectiveCanisterId,\n            paths: ['subnet'],\n            agent: this,\n        });\n        const subnetResponse = response.get('subnet');\n        if (subnetResponse && typeof subnetResponse === 'object' && 'nodeKeys' in subnetResponse) {\n            __classPrivateFieldGet(this, _HttpAgent_subnetKeys, \"f\").set(effectiveCanisterId.toText(), subnetResponse);\n            return subnetResponse;\n        }\n        // If the subnet status is not returned, return undefined\n        return undefined;\n    }\n    _transform(request) {\n        let p = Promise.resolve(request);\n        if (request.endpoint === \"call\" /* Endpoint.Call */) {\n            for (const fn of __classPrivateFieldGet(this, _HttpAgent_updatePipeline, \"f\")) {\n                p = p.then(r => fn(r).then(r2 => r2 || r));\n            }\n        }\n        else {\n            for (const fn of __classPrivateFieldGet(this, _HttpAgent_queryPipeline, \"f\")) {\n                p = p.then(r => fn(r).then(r2 => r2 || r));\n            }\n        }\n        return p;\n    }\n}\n_HttpAgent_identity = new WeakMap(), _HttpAgent_fetch = new WeakMap(), _HttpAgent_fetchOptions = new WeakMap(), _HttpAgent_callOptions = new WeakMap(), _HttpAgent_timeDiffMsecs = new WeakMap(), _HttpAgent_credentials = new WeakMap(), _HttpAgent_rootKeyFetched = new WeakMap(), _HttpAgent_retryTimes = new WeakMap(), _HttpAgent_backoffStrategy = new WeakMap(), _HttpAgent_maxIngressExpiryInMinutes = new WeakMap(), _HttpAgent_waterMark = new WeakMap(), _HttpAgent_queryPipeline = new WeakMap(), _HttpAgent_updatePipeline = new WeakMap(), _HttpAgent_subnetKeys = new WeakMap(), _HttpAgent_verifyQuerySignatures = new WeakMap(), _HttpAgent_verifyQueryResponse = new WeakMap(), _HttpAgent_instances = new WeakSet(), _HttpAgent_requestAndRetryQuery = async function _HttpAgent_requestAndRetryQuery(args) {\n    var _a, _b;\n    const { ecid, transformedRequest, body, requestId, backoff, tries } = args;\n    const delay = tries === 0 ? 0 : backoff.next();\n    this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with tries:`, {\n        tries,\n        backoff,\n        delay,\n    });\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n    }\n    if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    let response;\n    // Make the request and retry if it throws an error\n    try {\n        this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with request:`, transformedRequest);\n        const fetchResponse = await __classPrivateFieldGet(this, _HttpAgent_fetch, \"f\").call(this, '' + new URL(`/api/v2/canister/${ecid.toString()}/query`, this.host), Object.assign(Object.assign(Object.assign({}, __classPrivateFieldGet(this, _HttpAgent_fetchOptions, \"f\")), transformedRequest.request), { body }));\n        if (fetchResponse.status === 200) {\n            const queryResponse = _cbor__WEBPACK_IMPORTED_MODULE_3__.decode(await fetchResponse.arrayBuffer());\n            response = Object.assign(Object.assign({}, queryResponse), { httpDetails: {\n                    ok: fetchResponse.ok,\n                    status: fetchResponse.status,\n                    statusText: fetchResponse.statusText,\n                    headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(fetchResponse.headers),\n                }, requestId });\n        }\n        else {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_8__.AgentHTTPResponseError(`Gateway returned an error:\\n` +\n                `  Code: ${fetchResponse.status} (${fetchResponse.statusText})\\n` +\n                `  Body: ${await fetchResponse.text()}\\n`, {\n                ok: fetchResponse.ok,\n                status: fetchResponse.status,\n                statusText: fetchResponse.statusText,\n                headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(fetchResponse.headers),\n            });\n        }\n    }\n    catch (error) {\n        if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n            this.log.warn(`Caught exception while attempting to make query:\\n` +\n                `  ${error}\\n` +\n                `  Retrying query.`);\n            return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, Object.assign(Object.assign({}, args), { tries: tries + 1 }));\n        }\n        throw error;\n    }\n    const timestamp = (_b = (_a = response.signatures) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.timestamp;\n    // Skip watermark verification if the user has set verifyQuerySignatures to false\n    if (!__classPrivateFieldGet(this, _HttpAgent_verifyQuerySignatures, \"f\")) {\n        return response;\n    }\n    if (!timestamp) {\n        throw new Error('Timestamp not found in query response. This suggests a malformed or malicious response.');\n    }\n    // Convert the timestamp to milliseconds\n    const timeStampInMs = Number(BigInt(timestamp) / BigInt(1000000));\n    this.log.print('watermark and timestamp', {\n        waterMark: this.waterMark,\n        timestamp: timeStampInMs,\n    });\n    // If the timestamp is less than the watermark, retry the request up to the retry limit\n    if (Number(this.waterMark) > timeStampInMs) {\n        const error = new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError('Timestamp is below the watermark. Retrying query.');\n        this.log.error('Timestamp is below', error, {\n            timestamp,\n            waterMark: this.waterMark,\n        });\n        if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n            return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetryQuery).call(this, Object.assign(Object.assign({}, args), { tries: tries + 1 }));\n        }\n        {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n        }\n    }\n    return response;\n}, _HttpAgent_requestAndRetry = async function _HttpAgent_requestAndRetry(args) {\n    const { request, backoff, tries } = args;\n    const delay = tries === 0 ? 0 : backoff.next();\n    // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n    if (delay === null) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(`Timestamp failed to pass the watermark after retrying the configured ${__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")} times. We cannot guarantee the integrity of the response since it could be a replay attack.`);\n    }\n    if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    let response;\n    try {\n        response = await request();\n    }\n    catch (error) {\n        if (__classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\") > tries) {\n            this.log.warn(`Caught exception while attempting to make request:\\n` +\n                `  ${error}\\n` +\n                `  Retrying request.`);\n            // Delay the request by the configured backoff strategy\n            return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, { request, backoff, tries: tries + 1 });\n        }\n        throw error;\n    }\n    if (response.ok) {\n        return response;\n    }\n    const responseText = await response.clone().text();\n    const errorMessage = `Server returned an error:\\n` +\n        `  Code: ${response.status} (${response.statusText})\\n` +\n        `  Body: ${responseText}\\n`;\n    if (response.status === 404 && response.url.includes('api/v3')) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_8__.AgentHTTPResponseError('v3 api not supported. Fall back to v2', {\n            ok: response.ok,\n            status: response.status,\n            statusText: response.statusText,\n            headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(response.headers),\n        });\n    }\n    if (tries < __classPrivateFieldGet(this, _HttpAgent_retryTimes, \"f\")) {\n        return await __classPrivateFieldGet(this, _HttpAgent_instances, \"m\", _HttpAgent_requestAndRetry).call(this, { request, backoff, tries: tries + 1 });\n    }\n    throw new _errors__WEBPACK_IMPORTED_MODULE_8__.AgentHTTPResponseError(errorMessage, {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        headers: (0,_transforms__WEBPACK_IMPORTED_MODULE_6__.httpHeadersTransform)(response.headers),\n    });\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js":
/*!***********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expiry: () => (/* binding */ Expiry),\n/* harmony export */   httpHeadersTransform: () => (/* binding */ httpHeadersTransform),\n/* harmony export */   makeExpiryTransform: () => (/* binding */ makeExpiryTransform),\n/* harmony export */   makeNonceTransform: () => (/* binding */ makeNonceTransform)\n/* harmony export */ });\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! simple-cbor */ \"(ssr)/../../../../../node_modules/simple-cbor/src/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(simple_cbor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n\n\n\nconst NANOSECONDS_PER_MILLISECONDS = BigInt(1000000);\nconst REPLICA_PERMITTED_DRIFT_MILLISECONDS = 60 * 1000;\nclass Expiry {\n    constructor(deltaInMSec) {\n        // if ingress as seconds is less than 90, round to nearest second\n        if (deltaInMSec < 90 * 1000) {\n            // Raw value without subtraction of REPLICA_PERMITTED_DRIFT_MILLISECONDS\n            const raw_value = BigInt(Date.now() + deltaInMSec) * NANOSECONDS_PER_MILLISECONDS;\n            const ingress_as_seconds = raw_value / BigInt(1000000000);\n            this._value = ingress_as_seconds * BigInt(1000000000);\n            return;\n        }\n        // Use bigint because it can overflow the maximum number allowed in a double float.\n        const raw_value = BigInt(Math.floor(Date.now() + deltaInMSec - REPLICA_PERMITTED_DRIFT_MILLISECONDS)) *\n            NANOSECONDS_PER_MILLISECONDS;\n        // round down to the nearest second (since )\n        const ingress_as_seconds = raw_value / BigInt(1000000000);\n        // round down to nearest minute\n        const ingress_as_minutes = ingress_as_seconds / BigInt(60);\n        const rounded_down_nanos = ingress_as_minutes * BigInt(60) * BigInt(1000000000);\n        this._value = rounded_down_nanos;\n    }\n    toCBOR() {\n        // TODO: change this to take the minimum amount of space (it always takes 8 bytes now).\n        return simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.u64(this._value.toString(16), 16);\n    }\n    toHash() {\n        return (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this._value);\n    }\n}\n/**\n * Create a Nonce transform, which takes a function that returns a Buffer, and adds it\n * as the nonce to every call requests.\n * @param nonceFn A function that returns a buffer. By default uses a semi-random method.\n */\nfunction makeNonceTransform(nonceFn = _types__WEBPACK_IMPORTED_MODULE_2__.makeNonce) {\n    return async (request) => {\n        // Nonce needs to be inserted into the header for all requests, to enable logs to be correlated with requests.\n        const headers = request.request.headers;\n        // TODO: uncomment this when the http proxy supports it.\n        // headers.set('X-IC-Request-ID', toHex(new Uint8Array(nonce)));\n        request.request.headers = headers;\n        // Nonce only needs to be inserted into the body for async calls, to prevent replay attacks.\n        if (request.endpoint === \"call\" /* Endpoint.Call */) {\n            request.body.nonce = nonceFn();\n        }\n    };\n}\n/**\n * Create a transform that adds a delay (by default 5 minutes) to the expiry.\n *\n * @param delayInMilliseconds The delay to add to the call time, in milliseconds.\n */\nfunction makeExpiryTransform(delayInMilliseconds) {\n    return async (request) => {\n        request.body.ingress_expiry = new Expiry(delayInMilliseconds);\n    };\n}\n/**\n * Maps the default fetch headers field to the serializable HttpHeaderField.\n *\n * @param headers Fetch definition of the headers type\n * @returns array of header fields\n */\nfunction httpHeadersTransform(headers) {\n    const headerFields = [];\n    headers.forEach((value, key) => {\n        headerFields.push([key, value]);\n    });\n    return headerFields;\n}\n//# sourceMappingURL=transforms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvaHR0cC90cmFuc2Zvcm1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ1I7QUFDQztBQUNyQztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDhDQUFVO0FBQ3pCO0FBQ0E7QUFDQSxlQUFlLDBEQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sc0NBQXNDLDZDQUFTO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9hZ2VudC9odHRwL3RyYW5zZm9ybXMuanM/NjBmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsZWJFbmNvZGUgfSBmcm9tICdAZGZpbml0eS9jYW5kaWQnO1xuaW1wb3J0ICogYXMgY2JvciBmcm9tICdzaW1wbGUtY2Jvcic7XG5pbXBvcnQgeyBtYWtlTm9uY2UsIH0gZnJvbSAnLi90eXBlcyc7XG5jb25zdCBOQU5PU0VDT05EU19QRVJfTUlMTElTRUNPTkRTID0gQmlnSW50KDEwMDAwMDApO1xuY29uc3QgUkVQTElDQV9QRVJNSVRURURfRFJJRlRfTUlMTElTRUNPTkRTID0gNjAgKiAxMDAwO1xuZXhwb3J0IGNsYXNzIEV4cGlyeSB7XG4gICAgY29uc3RydWN0b3IoZGVsdGFJbk1TZWMpIHtcbiAgICAgICAgLy8gaWYgaW5ncmVzcyBhcyBzZWNvbmRzIGlzIGxlc3MgdGhhbiA5MCwgcm91bmQgdG8gbmVhcmVzdCBzZWNvbmRcbiAgICAgICAgaWYgKGRlbHRhSW5NU2VjIDwgOTAgKiAxMDAwKSB7XG4gICAgICAgICAgICAvLyBSYXcgdmFsdWUgd2l0aG91dCBzdWJ0cmFjdGlvbiBvZiBSRVBMSUNBX1BFUk1JVFRFRF9EUklGVF9NSUxMSVNFQ09ORFNcbiAgICAgICAgICAgIGNvbnN0IHJhd192YWx1ZSA9IEJpZ0ludChEYXRlLm5vdygpICsgZGVsdGFJbk1TZWMpICogTkFOT1NFQ09ORFNfUEVSX01JTExJU0VDT05EUztcbiAgICAgICAgICAgIGNvbnN0IGluZ3Jlc3NfYXNfc2Vjb25kcyA9IHJhd192YWx1ZSAvIEJpZ0ludCgxMDAwMDAwMDAwKTtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gaW5ncmVzc19hc19zZWNvbmRzICogQmlnSW50KDEwMDAwMDAwMDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVzZSBiaWdpbnQgYmVjYXVzZSBpdCBjYW4gb3ZlcmZsb3cgdGhlIG1heGltdW0gbnVtYmVyIGFsbG93ZWQgaW4gYSBkb3VibGUgZmxvYXQuXG4gICAgICAgIGNvbnN0IHJhd192YWx1ZSA9IEJpZ0ludChNYXRoLmZsb29yKERhdGUubm93KCkgKyBkZWx0YUluTVNlYyAtIFJFUExJQ0FfUEVSTUlUVEVEX0RSSUZUX01JTExJU0VDT05EUykpICpcbiAgICAgICAgICAgIE5BTk9TRUNPTkRTX1BFUl9NSUxMSVNFQ09ORFM7XG4gICAgICAgIC8vIHJvdW5kIGRvd24gdG8gdGhlIG5lYXJlc3Qgc2Vjb25kIChzaW5jZSApXG4gICAgICAgIGNvbnN0IGluZ3Jlc3NfYXNfc2Vjb25kcyA9IHJhd192YWx1ZSAvIEJpZ0ludCgxMDAwMDAwMDAwKTtcbiAgICAgICAgLy8gcm91bmQgZG93biB0byBuZWFyZXN0IG1pbnV0ZVxuICAgICAgICBjb25zdCBpbmdyZXNzX2FzX21pbnV0ZXMgPSBpbmdyZXNzX2FzX3NlY29uZHMgLyBCaWdJbnQoNjApO1xuICAgICAgICBjb25zdCByb3VuZGVkX2Rvd25fbmFub3MgPSBpbmdyZXNzX2FzX21pbnV0ZXMgKiBCaWdJbnQoNjApICogQmlnSW50KDEwMDAwMDAwMDApO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHJvdW5kZWRfZG93bl9uYW5vcztcbiAgICB9XG4gICAgdG9DQk9SKCkge1xuICAgICAgICAvLyBUT0RPOiBjaGFuZ2UgdGhpcyB0byB0YWtlIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBzcGFjZSAoaXQgYWx3YXlzIHRha2VzIDggYnl0ZXMgbm93KS5cbiAgICAgICAgcmV0dXJuIGNib3IudmFsdWUudTY0KHRoaXMuX3ZhbHVlLnRvU3RyaW5nKDE2KSwgMTYpO1xuICAgIH1cbiAgICB0b0hhc2goKSB7XG4gICAgICAgIHJldHVybiBsZWJFbmNvZGUodGhpcy5fdmFsdWUpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlIGEgTm9uY2UgdHJhbnNmb3JtLCB3aGljaCB0YWtlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIEJ1ZmZlciwgYW5kIGFkZHMgaXRcbiAqIGFzIHRoZSBub25jZSB0byBldmVyeSBjYWxsIHJlcXVlc3RzLlxuICogQHBhcmFtIG5vbmNlRm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBidWZmZXIuIEJ5IGRlZmF1bHQgdXNlcyBhIHNlbWktcmFuZG9tIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VOb25jZVRyYW5zZm9ybShub25jZUZuID0gbWFrZU5vbmNlKSB7XG4gICAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgICAgIC8vIE5vbmNlIG5lZWRzIHRvIGJlIGluc2VydGVkIGludG8gdGhlIGhlYWRlciBmb3IgYWxsIHJlcXVlc3RzLCB0byBlbmFibGUgbG9ncyB0byBiZSBjb3JyZWxhdGVkIHdpdGggcmVxdWVzdHMuXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSByZXF1ZXN0LnJlcXVlc3QuaGVhZGVycztcbiAgICAgICAgLy8gVE9ETzogdW5jb21tZW50IHRoaXMgd2hlbiB0aGUgaHR0cCBwcm94eSBzdXBwb3J0cyBpdC5cbiAgICAgICAgLy8gaGVhZGVycy5zZXQoJ1gtSUMtUmVxdWVzdC1JRCcsIHRvSGV4KG5ldyBVaW50OEFycmF5KG5vbmNlKSkpO1xuICAgICAgICByZXF1ZXN0LnJlcXVlc3QuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIC8vIE5vbmNlIG9ubHkgbmVlZHMgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgYm9keSBmb3IgYXN5bmMgY2FsbHMsIHRvIHByZXZlbnQgcmVwbGF5IGF0dGFja3MuXG4gICAgICAgIGlmIChyZXF1ZXN0LmVuZHBvaW50ID09PSBcImNhbGxcIiAvKiBFbmRwb2ludC5DYWxsICovKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmJvZHkubm9uY2UgPSBub25jZUZuKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSB0cmFuc2Zvcm0gdGhhdCBhZGRzIGEgZGVsYXkgKGJ5IGRlZmF1bHQgNSBtaW51dGVzKSB0byB0aGUgZXhwaXJ5LlxuICpcbiAqIEBwYXJhbSBkZWxheUluTWlsbGlzZWNvbmRzIFRoZSBkZWxheSB0byBhZGQgdG8gdGhlIGNhbGwgdGltZSwgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUV4cGlyeVRyYW5zZm9ybShkZWxheUluTWlsbGlzZWNvbmRzKSB7XG4gICAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgICAgIHJlcXVlc3QuYm9keS5pbmdyZXNzX2V4cGlyeSA9IG5ldyBFeHBpcnkoZGVsYXlJbk1pbGxpc2Vjb25kcyk7XG4gICAgfTtcbn1cbi8qKlxuICogTWFwcyB0aGUgZGVmYXVsdCBmZXRjaCBoZWFkZXJzIGZpZWxkIHRvIHRoZSBzZXJpYWxpemFibGUgSHR0cEhlYWRlckZpZWxkLlxuICpcbiAqIEBwYXJhbSBoZWFkZXJzIEZldGNoIGRlZmluaXRpb24gb2YgdGhlIGhlYWRlcnMgdHlwZVxuICogQHJldHVybnMgYXJyYXkgb2YgaGVhZGVyIGZpZWxkc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHR0cEhlYWRlcnNUcmFuc2Zvcm0oaGVhZGVycykge1xuICAgIGNvbnN0IGhlYWRlckZpZWxkcyA9IFtdO1xuICAgIGhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBoZWFkZXJGaWVsZHMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBoZWFkZXJGaWVsZHM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2Zvcm1zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/types.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/types.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SubmitRequestType: () => (/* binding */ SubmitRequestType),\n/* harmony export */   makeNonce: () => (/* binding */ makeNonce)\n/* harmony export */ });\n/* harmony import */ var _utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/random */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/random.js\");\n\n// The types of values allowed in the `request_type` field for submit requests.\nvar SubmitRequestType;\n(function (SubmitRequestType) {\n    SubmitRequestType[\"Call\"] = \"call\";\n})(SubmitRequestType || (SubmitRequestType = {}));\n/**\n * Create a random Nonce, based on random values\n */\nfunction makeNonce() {\n    // Encode 128 bits.\n    const buffer = new ArrayBuffer(16);\n    const view = new DataView(buffer);\n    const rand1 = (0,_utils_random__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    const rand2 = (0,_utils_random__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    const rand3 = (0,_utils_random__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    const rand4 = (0,_utils_random__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    view.setUint32(0, rand1);\n    view.setUint32(4, rand2);\n    view.setUint32(8, rand3);\n    view.setUint32(12, rand4);\n    return buffer;\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvaHR0cC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0Q7QUFDbEQ7QUFDTztBQUNQO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QztBQUMvQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwyREFBWTtBQUM5QixrQkFBa0IsMkRBQVk7QUFDOUIsa0JBQWtCLDJEQUFZO0FBQzlCLGtCQUFrQiwyREFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvaHR0cC90eXBlcy5qcz9lNGZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJhbmRvbU51bWJlciB9IGZyb20gJy4uLy4uL3V0aWxzL3JhbmRvbSc7XG4vLyBUaGUgdHlwZXMgb2YgdmFsdWVzIGFsbG93ZWQgaW4gdGhlIGByZXF1ZXN0X3R5cGVgIGZpZWxkIGZvciBzdWJtaXQgcmVxdWVzdHMuXG5leHBvcnQgdmFyIFN1Ym1pdFJlcXVlc3RUeXBlO1xuKGZ1bmN0aW9uIChTdWJtaXRSZXF1ZXN0VHlwZSkge1xuICAgIFN1Ym1pdFJlcXVlc3RUeXBlW1wiQ2FsbFwiXSA9IFwiY2FsbFwiO1xufSkoU3VibWl0UmVxdWVzdFR5cGUgfHwgKFN1Ym1pdFJlcXVlc3RUeXBlID0ge30pKTtcbi8qKlxuICogQ3JlYXRlIGEgcmFuZG9tIE5vbmNlLCBiYXNlZCBvbiByYW5kb20gdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTm9uY2UoKSB7XG4gICAgLy8gRW5jb2RlIDEyOCBiaXRzLlxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigxNik7XG4gICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgIGNvbnN0IHJhbmQxID0gcmFuZG9tTnVtYmVyKCk7XG4gICAgY29uc3QgcmFuZDIgPSByYW5kb21OdW1iZXIoKTtcbiAgICBjb25zdCByYW5kMyA9IHJhbmRvbU51bWJlcigpO1xuICAgIGNvbnN0IHJhbmQ0ID0gcmFuZG9tTnVtYmVyKCk7XG4gICAgdmlldy5zZXRVaW50MzIoMCwgcmFuZDEpO1xuICAgIHZpZXcuc2V0VWludDMyKDQsIHJhbmQyKTtcbiAgICB2aWV3LnNldFVpbnQzMig4LCByYW5kMyk7XG4gICAgdmlldy5zZXRVaW50MzIoMTIsIHJhbmQ0KTtcbiAgICByZXR1cm4gYnVmZmVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/types.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentHTTPResponseError: () => (/* reexport safe */ _http_errors__WEBPACK_IMPORTED_MODULE_2__.AgentHTTPResponseError),\n/* harmony export */   Expiry: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.Expiry),\n/* harmony export */   HttpAgent: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.HttpAgent),\n/* harmony export */   IC_ROOT_KEY: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.IC_ROOT_KEY),\n/* harmony export */   IdentityInvalidError: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.IdentityInvalidError),\n/* harmony export */   MANAGEMENT_CANISTER_ID: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.MANAGEMENT_CANISTER_ID),\n/* harmony export */   ProxyAgent: () => (/* reexport safe */ _proxy__WEBPACK_IMPORTED_MODULE_3__.ProxyAgent),\n/* harmony export */   ProxyMessageKind: () => (/* reexport safe */ _proxy__WEBPACK_IMPORTED_MODULE_3__.ProxyMessageKind),\n/* harmony export */   ProxyStubAgent: () => (/* reexport safe */ _proxy__WEBPACK_IMPORTED_MODULE_3__.ProxyStubAgent),\n/* harmony export */   ReplicaRejectCode: () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.ReplicaRejectCode),\n/* harmony export */   RequestStatusResponseStatus: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.RequestStatusResponseStatus),\n/* harmony export */   getDefaultAgent: () => (/* binding */ getDefaultAgent),\n/* harmony export */   httpHeadersTransform: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.httpHeadersTransform),\n/* harmony export */   makeExpiryTransform: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.makeExpiryTransform),\n/* harmony export */   makeNonce: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.makeNonce),\n/* harmony export */   makeNonceTransform: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.makeNonceTransform)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/api.js\");\n/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/index.js\");\n/* harmony import */ var _http_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http/errors */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/errors.js\");\n/* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proxy */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/proxy.js\");\n\n\n\n\nfunction getDefaultAgent() {\n    const agent = typeof window === 'undefined'\n        ? typeof global === 'undefined'\n            ? typeof self === 'undefined'\n                ? undefined\n                : self.ic.agent\n            : global.ic.agent\n        : window.ic.agent;\n    if (!agent) {\n        throw new Error('No Agent could be found.');\n    }\n    return agent;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0I7QUFDQztBQUNPO0FBQ047QUFDakI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvaW5kZXguanM/NTE5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG5leHBvcnQgKiBmcm9tICcuL2h0dHAnO1xuZXhwb3J0ICogZnJvbSAnLi9odHRwL2Vycm9ycyc7XG5leHBvcnQgKiBmcm9tICcuL3Byb3h5JztcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0QWdlbnQoKSB7XG4gICAgY29uc3QgYWdlbnQgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IHR5cGVvZiBnbG9iYWwgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBzZWxmLmljLmFnZW50XG4gICAgICAgICAgICA6IGdsb2JhbC5pYy5hZ2VudFxuICAgICAgICA6IHdpbmRvdy5pYy5hZ2VudDtcbiAgICBpZiAoIWFnZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gQWdlbnQgY291bGQgYmUgZm91bmQuJyk7XG4gICAgfVxuICAgIHJldHVybiBhZ2VudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/proxy.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/agent/proxy.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProxyAgent: () => (/* binding */ ProxyAgent),\n/* harmony export */   ProxyMessageKind: () => (/* binding */ ProxyMessageKind),\n/* harmony export */   ProxyStubAgent: () => (/* binding */ ProxyStubAgent)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n\nvar ProxyMessageKind;\n(function (ProxyMessageKind) {\n    ProxyMessageKind[\"Error\"] = \"err\";\n    ProxyMessageKind[\"GetPrincipal\"] = \"gp\";\n    ProxyMessageKind[\"GetPrincipalResponse\"] = \"gpr\";\n    ProxyMessageKind[\"Query\"] = \"q\";\n    ProxyMessageKind[\"QueryResponse\"] = \"qr\";\n    ProxyMessageKind[\"Call\"] = \"c\";\n    ProxyMessageKind[\"CallResponse\"] = \"cr\";\n    ProxyMessageKind[\"ReadState\"] = \"rs\";\n    ProxyMessageKind[\"ReadStateResponse\"] = \"rsr\";\n    ProxyMessageKind[\"Status\"] = \"s\";\n    ProxyMessageKind[\"StatusResponse\"] = \"sr\";\n})(ProxyMessageKind || (ProxyMessageKind = {}));\n// A Stub Agent that forwards calls to another Agent implementation.\nclass ProxyStubAgent {\n    constructor(_frontend, _agent) {\n        this._frontend = _frontend;\n        this._agent = _agent;\n    }\n    onmessage(msg) {\n        switch (msg.type) {\n            case ProxyMessageKind.GetPrincipal:\n                this._agent.getPrincipal().then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.GetPrincipalResponse,\n                        response: response.toText(),\n                    });\n                });\n                break;\n            case ProxyMessageKind.Query:\n                this._agent.query(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.QueryResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.Call:\n                this._agent.call(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.CallResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.ReadState:\n                this._agent.readState(...msg.args).then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.ReadStateResponse,\n                        response,\n                    });\n                });\n                break;\n            case ProxyMessageKind.Status:\n                this._agent.status().then(response => {\n                    this._frontend({\n                        id: msg.id,\n                        type: ProxyMessageKind.StatusResponse,\n                        response,\n                    });\n                });\n                break;\n            default:\n                throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n        }\n    }\n}\n// An Agent that forwards calls to a backend. The calls are serialized\nclass ProxyAgent {\n    constructor(_backend) {\n        this._backend = _backend;\n        this._nextId = 0;\n        this._pendingCalls = new Map();\n        this.rootKey = null;\n    }\n    onmessage(msg) {\n        const id = msg.id;\n        const maybePromise = this._pendingCalls.get(id);\n        if (!maybePromise) {\n            throw new Error('A proxy get the same message twice...');\n        }\n        this._pendingCalls.delete(id);\n        const [resolve, reject] = maybePromise;\n        switch (msg.type) {\n            case ProxyMessageKind.Error:\n                return reject(msg.error);\n            case ProxyMessageKind.GetPrincipalResponse:\n            case ProxyMessageKind.CallResponse:\n            case ProxyMessageKind.QueryResponse:\n            case ProxyMessageKind.ReadStateResponse:\n            case ProxyMessageKind.StatusResponse:\n                return resolve(msg.response);\n            default:\n                throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n        }\n    }\n    async getPrincipal() {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.GetPrincipal,\n        }).then(principal => {\n            if (typeof principal !== 'string') {\n                throw new Error('Invalid principal received.');\n            }\n            return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText(principal);\n        });\n    }\n    readState(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.ReadState,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    call(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Call,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    status() {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Status,\n        });\n    }\n    query(canisterId, fields) {\n        return this._sendAndWait({\n            id: this._nextId++,\n            type: ProxyMessageKind.Query,\n            args: [canisterId.toString(), fields],\n        });\n    }\n    async _sendAndWait(msg) {\n        return new Promise((resolve, reject) => {\n            this._pendingCalls.set(msg.id, [resolve, reject]);\n            this._backend(msg);\n        });\n    }\n    async fetchRootKey() {\n        // Hex-encoded version of the replica root key\n        const rootKey = (await this.status()).root_key;\n        this.rootKey = rootKey;\n        return rootKey;\n    }\n}\n//# sourceMappingURL=proxy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/proxy.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/auth.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/auth.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousIdentity: () => (/* binding */ AnonymousIdentity),\n/* harmony export */   SignIdentity: () => (/* binding */ SignIdentity),\n/* harmony export */   createIdentityDescriptor: () => (/* binding */ createIdentityDescriptor)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./request_id */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\nconst domainSeparator = new TextEncoder().encode('\\x0Aic-request');\n/**\n * An Identity that can sign blobs.\n */\nclass SignIdentity {\n    /**\n     * Get the principal represented by this identity. Normally should be a\n     * `Principal.selfAuthenticating()`.\n     */\n    getPrincipal() {\n        if (!this._principal) {\n            this._principal = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.selfAuthenticating(new Uint8Array(this.getPublicKey().toDer()));\n        }\n        return this._principal;\n    }\n    /**\n     * Transform a request into a signed version of the request. This is done last\n     * after the transforms on the body of a request. The returned object can be\n     * anything, but must be serializable to CBOR.\n     * @param request - internet computer request to transform\n     */\n    async transformRequest(request) {\n        const { body } = request, fields = __rest(request, [\"body\"]);\n        const requestId = await (0,_request_id__WEBPACK_IMPORTED_MODULE_1__.requestIdOf)(body);\n        return Object.assign(Object.assign({}, fields), { body: {\n                content: body,\n                sender_pubkey: this.getPublicKey().toDer(),\n                sender_sig: await this.sign((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.concat)(domainSeparator, requestId)),\n            } });\n    }\n}\nclass AnonymousIdentity {\n    getPrincipal() {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n    }\n    async transformRequest(request) {\n        return Object.assign(Object.assign({}, request), { body: { content: request.body } });\n    }\n}\n/**\n * Create an IdentityDescriptor from a @dfinity/identity Identity\n * @param identity - identity describe in returned descriptor\n */\nfunction createIdentityDescriptor(identity) {\n    const identityIndicator = 'getPublicKey' in identity\n        ? { type: 'PublicKeyIdentity', publicKey: (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.toHex)(identity.getPublicKey().toDer()) }\n        : { type: 'AnonymousIdentity' };\n    return identityIndicator;\n}\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYXV0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxjQUFjLFNBQUksSUFBSSxTQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGNBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQztBQUNKO0FBQ0k7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix5REFBUztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdDQUFnQyx3REFBVztBQUMzQyw2Q0FBNkMsYUFBYTtBQUMxRDtBQUNBO0FBQ0EsNENBQTRDLHFEQUFNO0FBQ2xELGVBQWU7QUFDZjtBQUNBO0FBQ087QUFDUDtBQUNBLGVBQWUseURBQVM7QUFDeEI7QUFDQTtBQUNBLDZDQUE2QyxjQUFjLFFBQVEseUJBQXlCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxZQUFZLHNDQUFzQyxvREFBSztBQUN2RCxZQUFZO0FBQ1o7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9hdXRoLmpzP2JjNzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgUHJpbmNpcGFsIH0gZnJvbSAnQGRmaW5pdHkvcHJpbmNpcGFsJztcbmltcG9ydCB7IHJlcXVlc3RJZE9mIH0gZnJvbSAnLi9yZXF1ZXN0X2lkJztcbmltcG9ydCB7IGNvbmNhdCwgdG9IZXggfSBmcm9tICcuL3V0aWxzL2J1ZmZlcic7XG5jb25zdCBkb21haW5TZXBhcmF0b3IgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoJ1xceDBBaWMtcmVxdWVzdCcpO1xuLyoqXG4gKiBBbiBJZGVudGl0eSB0aGF0IGNhbiBzaWduIGJsb2JzLlxuICovXG5leHBvcnQgY2xhc3MgU2lnbklkZW50aXR5IHtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHByaW5jaXBhbCByZXByZXNlbnRlZCBieSB0aGlzIGlkZW50aXR5LiBOb3JtYWxseSBzaG91bGQgYmUgYVxuICAgICAqIGBQcmluY2lwYWwuc2VsZkF1dGhlbnRpY2F0aW5nKClgLlxuICAgICAqL1xuICAgIGdldFByaW5jaXBhbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcmluY2lwYWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaW5jaXBhbCA9IFByaW5jaXBhbC5zZWxmQXV0aGVudGljYXRpbmcobmV3IFVpbnQ4QXJyYXkodGhpcy5nZXRQdWJsaWNLZXkoKS50b0RlcigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaW5jaXBhbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIGEgcmVxdWVzdCBpbnRvIGEgc2lnbmVkIHZlcnNpb24gb2YgdGhlIHJlcXVlc3QuIFRoaXMgaXMgZG9uZSBsYXN0XG4gICAgICogYWZ0ZXIgdGhlIHRyYW5zZm9ybXMgb24gdGhlIGJvZHkgb2YgYSByZXF1ZXN0LiBUaGUgcmV0dXJuZWQgb2JqZWN0IGNhbiBiZVxuICAgICAqIGFueXRoaW5nLCBidXQgbXVzdCBiZSBzZXJpYWxpemFibGUgdG8gQ0JPUi5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtIGludGVybmV0IGNvbXB1dGVyIHJlcXVlc3QgdG8gdHJhbnNmb3JtXG4gICAgICovXG4gICAgYXN5bmMgdHJhbnNmb3JtUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IHsgYm9keSB9ID0gcmVxdWVzdCwgZmllbGRzID0gX19yZXN0KHJlcXVlc3QsIFtcImJvZHlcIl0pO1xuICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSBhd2FpdCByZXF1ZXN0SWRPZihib2R5KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZmllbGRzKSwgeyBib2R5OiB7XG4gICAgICAgICAgICAgICAgY29udGVudDogYm9keSxcbiAgICAgICAgICAgICAgICBzZW5kZXJfcHVia2V5OiB0aGlzLmdldFB1YmxpY0tleSgpLnRvRGVyKCksXG4gICAgICAgICAgICAgICAgc2VuZGVyX3NpZzogYXdhaXQgdGhpcy5zaWduKGNvbmNhdChkb21haW5TZXBhcmF0b3IsIHJlcXVlc3RJZCkpLFxuICAgICAgICAgICAgfSB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQW5vbnltb3VzSWRlbnRpdHkge1xuICAgIGdldFByaW5jaXBhbCgpIHtcbiAgICAgICAgcmV0dXJuIFByaW5jaXBhbC5hbm9ueW1vdXMoKTtcbiAgICB9XG4gICAgYXN5bmMgdHJhbnNmb3JtUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3QpLCB7IGJvZHk6IHsgY29udGVudDogcmVxdWVzdC5ib2R5IH0gfSk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYW4gSWRlbnRpdHlEZXNjcmlwdG9yIGZyb20gYSBAZGZpbml0eS9pZGVudGl0eSBJZGVudGl0eVxuICogQHBhcmFtIGlkZW50aXR5IC0gaWRlbnRpdHkgZGVzY3JpYmUgaW4gcmV0dXJuZWQgZGVzY3JpcHRvclxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSWRlbnRpdHlEZXNjcmlwdG9yKGlkZW50aXR5KSB7XG4gICAgY29uc3QgaWRlbnRpdHlJbmRpY2F0b3IgPSAnZ2V0UHVibGljS2V5JyBpbiBpZGVudGl0eVxuICAgICAgICA/IHsgdHlwZTogJ1B1YmxpY0tleUlkZW50aXR5JywgcHVibGljS2V5OiB0b0hleChpZGVudGl0eS5nZXRQdWJsaWNLZXkoKS50b0RlcigpKSB9XG4gICAgICAgIDogeyB0eXBlOiAnQW5vbnltb3VzSWRlbnRpdHknIH07XG4gICAgcmV0dXJuIGlkZW50aXR5SW5kaWNhdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/auth.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js":
/*!**********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomPath: () => (/* binding */ CustomPath),\n/* harmony export */   encodePath: () => (/* binding */ encodePath),\n/* harmony export */   fetchNodeKeys: () => (/* binding */ fetchNodeKeys),\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../certificate */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cbor */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _utils_leb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/leb */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n/** @module CanisterStatus */\n\n\n\n\n\n\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using TextEncoder.\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {ArrayBuffer[]} path the path to the desired value, represented as an array of buffers\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nclass CustomPath {\n    constructor(key, path, decodeStrategy) {\n        this.key = key;\n        this.path = path;\n        this.decodeStrategy = decodeStrategy;\n    }\n}\n/**\n * Request information in the request_status state tree for a given canister.\n * Can be used to request information about the canister's controllers, time, module hash, candid interface, and more.\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nconst request = async (options) => {\n    const { agent, paths } = options;\n    const canisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(options.canisterId);\n    const uniquePaths = [...new Set(paths)];\n    // Map path options to their correct formats\n    const encodedPaths = uniquePaths.map(path => {\n        return encodePath(path, canisterId);\n    });\n    const status = new Map();\n    const promises = uniquePaths.map((path, index) => {\n        return (async () => {\n            var _a;\n            try {\n                const response = await agent.readState(canisterId, {\n                    paths: [encodedPaths[index]],\n                });\n                const cert = await _certificate__WEBPACK_IMPORTED_MODULE_2__.Certificate.create({\n                    certificate: response.certificate,\n                    rootKey: agent.rootKey,\n                    canisterId: canisterId,\n                });\n                const lookup = (cert, path) => {\n                    if (path === 'subnet') {\n                        const data = fetchNodeKeys(response.certificate, canisterId, agent.rootKey);\n                        return {\n                            path: path,\n                            data,\n                        };\n                    }\n                    else {\n                        return {\n                            path: path,\n                            data: (0,_certificate__WEBPACK_IMPORTED_MODULE_2__.lookupResultToBuffer)(cert.lookup(encodePath(path, canisterId))),\n                        };\n                    }\n                };\n                // must pass in the rootKey if we have no delegation\n                const { path, data } = lookup(cert, uniquePaths[index]);\n                if (!data) {\n                    // Typically, the cert lookup will throw\n                    console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n                    if (typeof path === 'string') {\n                        status.set(path, null);\n                    }\n                    else {\n                        status.set(path.key, null);\n                    }\n                }\n                else {\n                    switch (path) {\n                        case 'time': {\n                            status.set(path, (0,_utils_leb__WEBPACK_IMPORTED_MODULE_5__.decodeTime)(data));\n                            break;\n                        }\n                        case 'controllers': {\n                            status.set(path, decodeControllers(data));\n                            break;\n                        }\n                        case 'module_hash': {\n                            status.set(path, decodeHex(data));\n                            break;\n                        }\n                        case 'subnet': {\n                            status.set(path, data);\n                            break;\n                        }\n                        case 'candid': {\n                            status.set(path, new TextDecoder().decode(data));\n                            break;\n                        }\n                        default: {\n                            // Check for CustomPath signature\n                            if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                                switch (path.decodeStrategy) {\n                                    case 'raw':\n                                        status.set(path.key, data);\n                                        break;\n                                    case 'leb128': {\n                                        status.set(path.key, (0,_utils_leb__WEBPACK_IMPORTED_MODULE_5__.decodeLeb128)(data));\n                                        break;\n                                    }\n                                    case 'cbor': {\n                                        status.set(path.key, decodeCbor(data));\n                                        break;\n                                    }\n                                    case 'hex': {\n                                        status.set(path.key, decodeHex(data));\n                                        break;\n                                    }\n                                    case 'utf-8': {\n                                        status.set(path.key, decodeUtf8(data));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                // Break on signature verification errors\n                if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes('Invalid certificate')) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError(error.message);\n                }\n                if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                    status.set(path.key, null);\n                }\n                else {\n                    status.set(path, null);\n                }\n                console.group();\n                console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n                console.warn(error);\n                console.groupEnd();\n            }\n        })();\n    });\n    // Fetch all values separately, as each option can fail\n    await Promise.all(promises);\n    return status;\n};\nconst fetchNodeKeys = (certificate, canisterId, root_key) => {\n    if (!canisterId._isPrincipal) {\n        throw new Error('Invalid canisterId');\n    }\n    const cert = _cbor__WEBPACK_IMPORTED_MODULE_4__.decode(new Uint8Array(certificate));\n    const tree = cert.tree;\n    let delegation = cert.delegation;\n    let subnetId;\n    if (delegation && delegation.subnet_id) {\n        subnetId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(new Uint8Array(delegation.subnet_id));\n    }\n    // On local replica, with System type subnet, there is no delegation\n    else if (!delegation && typeof root_key !== 'undefined') {\n        subnetId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.selfAuthenticating(new Uint8Array(root_key));\n        delegation = {\n            subnet_id: subnetId.toUint8Array(),\n            certificate: new ArrayBuffer(0),\n        };\n    }\n    // otherwise use default NNS subnet id\n    else {\n        subnetId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.selfAuthenticating(_dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText('tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe').toUint8Array());\n        delegation = {\n            subnet_id: subnetId.toUint8Array(),\n            certificate: new ArrayBuffer(0),\n        };\n    }\n    const canisterInRange = (0,_certificate__WEBPACK_IMPORTED_MODULE_2__.check_canister_ranges)({ canisterId, subnetId, tree });\n    if (!canisterInRange) {\n        throw new Error('Canister not in range');\n    }\n    const subnetLookupResult = (0,_certificate__WEBPACK_IMPORTED_MODULE_2__.lookup_path)(['subnet', delegation.subnet_id, 'node'], tree);\n    if (subnetLookupResult.status !== _certificate__WEBPACK_IMPORTED_MODULE_2__.LookupStatus.Found) {\n        throw new Error('Node not found');\n    }\n    if (subnetLookupResult.value instanceof ArrayBuffer) {\n        throw new Error('Invalid node tree');\n    }\n    const nodeForks = (0,_certificate__WEBPACK_IMPORTED_MODULE_2__.flatten_forks)(subnetLookupResult.value);\n    const nodeKeys = new Map();\n    nodeForks.forEach(fork => {\n        const node_id = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(new Uint8Array(fork[1])).toText();\n        const publicKeyLookupResult = (0,_certificate__WEBPACK_IMPORTED_MODULE_2__.lookup_path)(['public_key'], fork[2]);\n        if (publicKeyLookupResult.status !== _certificate__WEBPACK_IMPORTED_MODULE_2__.LookupStatus.Found) {\n            throw new Error('Public key not found');\n        }\n        const derEncodedPublicKey = publicKeyLookupResult.value;\n        if (derEncodedPublicKey.byteLength !== 44) {\n            throw new Error('Invalid public key length');\n        }\n        else {\n            nodeKeys.set(node_id, derEncodedPublicKey);\n        }\n    });\n    return {\n        subnetId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),\n        nodeKeys,\n    };\n};\nconst encodePath = (path, canisterId) => {\n    const encoder = new TextEncoder();\n    const encode = (arg) => {\n        return new DataView(encoder.encode(arg).buffer).buffer;\n    };\n    const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n    switch (path) {\n        case 'time':\n            return [encode('time')];\n        case 'controllers':\n            return [encode('canister'), canisterBuffer, encode('controllers')];\n        case 'module_hash':\n            return [encode('canister'), canisterBuffer, encode('module_hash')];\n        case 'subnet':\n            return [encode('subnet')];\n        case 'candid':\n            return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n        default: {\n            // Check for CustomPath signature\n            if ('key' in path && 'path' in path) {\n                // For simplified metadata queries\n                if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n                    const metaPath = path.path;\n                    const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n                    return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n                    // For non-metadata, return the provided custompath\n                }\n                else {\n                    return path['path'];\n                }\n            }\n        }\n    }\n    throw new Error(`An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`);\n};\nconst decodeHex = (buf) => {\n    return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.toHex)(buf);\n};\nconst decodeCbor = (buf) => {\n    return _cbor__WEBPACK_IMPORTED_MODULE_4__.decode(buf);\n};\nconst decodeUtf8 = (buf) => {\n    return new TextDecoder().decode(buf);\n};\n// Controllers are CBOR-encoded buffers\nconst decodeControllers = (buf) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const controllersRaw = decodeCbor(buf);\n    return controllersRaw.map((buf) => {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(new Uint8Array(buf));\n    });\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset.js":
/*!*****************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAssetCanisterActor: () => (/* binding */ createAssetCanisterActor)\n/* harmony export */ });\n/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../actor */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/actor.js\");\n/* harmony import */ var _asset_idl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./asset_idl */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset_idl.js\");\n\n\n/**\n * Create a management canister actor.\n * @param config\n */\nfunction createAssetCanisterActor(config) {\n    return _actor__WEBPACK_IMPORTED_MODULE_0__.Actor.createActor(_asset_idl__WEBPACK_IMPORTED_MODULE_1__[\"default\"], config);\n}\n//# sourceMappingURL=asset.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vY2FuaXN0ZXJzL2Fzc2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHlDQUFLLGFBQWEsa0RBQWE7QUFDMUM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vY2FuaXN0ZXJzL2Fzc2V0LmpzP2Q0MWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0b3IgfSBmcm9tICcuLi9hY3Rvcic7XG5pbXBvcnQgYXNzZXRDYW5pc3RlciBmcm9tICcuL2Fzc2V0X2lkbCc7XG4vKipcbiAqIENyZWF0ZSBhIG1hbmFnZW1lbnQgY2FuaXN0ZXIgYWN0b3IuXG4gKiBAcGFyYW0gY29uZmlnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBc3NldENhbmlzdGVyQWN0b3IoY29uZmlnKSB7XG4gICAgcmV0dXJuIEFjdG9yLmNyZWF0ZUFjdG9yKGFzc2V0Q2FuaXN0ZXIsIGNvbmZpZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NldC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset_idl.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset_idl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * This file is generated from the candid for asset management.\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (({ IDL }) => {\n    return IDL.Service({\n        retrieve: IDL.Func([IDL.Text], [IDL.Vec(IDL.Nat8)], ['query']),\n        store: IDL.Func([IDL.Text, IDL.Vec(IDL.Nat8)], [], []),\n    });\n});\n//# sourceMappingURL=asset_idl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vY2FuaXN0ZXJzL2Fzc2V0X2lkbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLEdBQUcsS0FBSztBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQyxFQUFDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2NhbmlzdGVycy9hc3NldF9pZGwuanM/ODJiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgY2FuZGlkIGZvciBhc3NldCBtYW5hZ2VtZW50LlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtaWdub3JlXG5leHBvcnQgZGVmYXVsdCAoeyBJREwgfSkgPT4ge1xuICAgIHJldHVybiBJREwuU2VydmljZSh7XG4gICAgICAgIHJldHJpZXZlOiBJREwuRnVuYyhbSURMLlRleHRdLCBbSURMLlZlYyhJREwuTmF0OCldLCBbJ3F1ZXJ5J10pLFxuICAgICAgICBzdG9yZTogSURMLkZ1bmMoW0lETC5UZXh0LCBJREwuVmVjKElETC5OYXQ4KV0sIFtdLCBbXSksXG4gICAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNzZXRfaWRsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset_idl.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js":
/*!**************************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * This file is generated from the candid for asset management.\n * didc version: 0.4.0\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (({ IDL }) => {\n    const bitcoin_network = IDL.Variant({\n        mainnet: IDL.Null,\n        testnet: IDL.Null,\n    });\n    const bitcoin_address = IDL.Text;\n    const bitcoin_get_balance_args = IDL.Record({\n        network: bitcoin_network,\n        address: bitcoin_address,\n        min_confirmations: IDL.Opt(IDL.Nat32),\n    });\n    const satoshi = IDL.Nat64;\n    const bitcoin_get_balance_result = satoshi;\n    const bitcoin_get_current_fee_percentiles_args = IDL.Record({\n        network: bitcoin_network,\n    });\n    const millisatoshi_per_byte = IDL.Nat64;\n    const bitcoin_get_current_fee_percentiles_result = IDL.Vec(millisatoshi_per_byte);\n    const bitcoin_get_utxos_args = IDL.Record({\n        network: bitcoin_network,\n        filter: IDL.Opt(IDL.Variant({\n            page: IDL.Vec(IDL.Nat8),\n            min_confirmations: IDL.Nat32,\n        })),\n        address: bitcoin_address,\n    });\n    const block_hash = IDL.Vec(IDL.Nat8);\n    const outpoint = IDL.Record({\n        txid: IDL.Vec(IDL.Nat8),\n        vout: IDL.Nat32,\n    });\n    const utxo = IDL.Record({\n        height: IDL.Nat32,\n        value: satoshi,\n        outpoint: outpoint,\n    });\n    const bitcoin_get_utxos_result = IDL.Record({\n        next_page: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        tip_height: IDL.Nat32,\n        tip_block_hash: block_hash,\n        utxos: IDL.Vec(utxo),\n    });\n    const bitcoin_send_transaction_args = IDL.Record({\n        transaction: IDL.Vec(IDL.Nat8),\n        network: bitcoin_network,\n    });\n    const canister_id = IDL.Principal;\n    const canister_info_args = IDL.Record({\n        canister_id: canister_id,\n        num_requested_changes: IDL.Opt(IDL.Nat64),\n    });\n    const change_origin = IDL.Variant({\n        from_user: IDL.Record({ user_id: IDL.Principal }),\n        from_canister: IDL.Record({\n            canister_version: IDL.Opt(IDL.Nat64),\n            canister_id: IDL.Principal,\n        }),\n    });\n    const change_details = IDL.Variant({\n        creation: IDL.Record({ controllers: IDL.Vec(IDL.Principal) }),\n        code_deployment: IDL.Record({\n            mode: IDL.Variant({\n                reinstall: IDL.Null,\n                upgrade: IDL.Null,\n                install: IDL.Null,\n            }),\n            module_hash: IDL.Vec(IDL.Nat8),\n        }),\n        controllers_change: IDL.Record({\n            controllers: IDL.Vec(IDL.Principal),\n        }),\n        code_uninstall: IDL.Null,\n    });\n    const change = IDL.Record({\n        timestamp_nanos: IDL.Nat64,\n        canister_version: IDL.Nat64,\n        origin: change_origin,\n        details: change_details,\n    });\n    const canister_info_result = IDL.Record({\n        controllers: IDL.Vec(IDL.Principal),\n        module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        recent_changes: IDL.Vec(change),\n        total_num_changes: IDL.Nat64,\n    });\n    const canister_status_args = IDL.Record({ canister_id: canister_id });\n    const log_visibility = IDL.Variant({\n        controllers: IDL.Null,\n        public: IDL.Null,\n    });\n    const definite_canister_settings = IDL.Record({\n        freezing_threshold: IDL.Nat,\n        controllers: IDL.Vec(IDL.Principal),\n        reserved_cycles_limit: IDL.Nat,\n        log_visibility: log_visibility,\n        wasm_memory_limit: IDL.Nat,\n        memory_allocation: IDL.Nat,\n        compute_allocation: IDL.Nat,\n    });\n    const canister_status_result = IDL.Record({\n        status: IDL.Variant({\n            stopped: IDL.Null,\n            stopping: IDL.Null,\n            running: IDL.Null,\n        }),\n        memory_size: IDL.Nat,\n        cycles: IDL.Nat,\n        settings: definite_canister_settings,\n        query_stats: IDL.Record({\n            response_payload_bytes_total: IDL.Nat,\n            num_instructions_total: IDL.Nat,\n            num_calls_total: IDL.Nat,\n            request_payload_bytes_total: IDL.Nat,\n        }),\n        idle_cycles_burned_per_day: IDL.Nat,\n        module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        reserved_cycles: IDL.Nat,\n    });\n    const clear_chunk_store_args = IDL.Record({ canister_id: canister_id });\n    const canister_settings = IDL.Record({\n        freezing_threshold: IDL.Opt(IDL.Nat),\n        controllers: IDL.Opt(IDL.Vec(IDL.Principal)),\n        reserved_cycles_limit: IDL.Opt(IDL.Nat),\n        log_visibility: IDL.Opt(log_visibility),\n        wasm_memory_limit: IDL.Opt(IDL.Nat),\n        memory_allocation: IDL.Opt(IDL.Nat),\n        compute_allocation: IDL.Opt(IDL.Nat),\n    });\n    const create_canister_args = IDL.Record({\n        settings: IDL.Opt(canister_settings),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const create_canister_result = IDL.Record({ canister_id: canister_id });\n    const delete_canister_args = IDL.Record({ canister_id: canister_id });\n    const deposit_cycles_args = IDL.Record({ canister_id: canister_id });\n    const ecdsa_curve = IDL.Variant({ secp256k1: IDL.Null });\n    const ecdsa_public_key_args = IDL.Record({\n        key_id: IDL.Record({ name: IDL.Text, curve: ecdsa_curve }),\n        canister_id: IDL.Opt(canister_id),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n    });\n    const ecdsa_public_key_result = IDL.Record({\n        public_key: IDL.Vec(IDL.Nat8),\n        chain_code: IDL.Vec(IDL.Nat8),\n    });\n    const fetch_canister_logs_args = IDL.Record({ canister_id: canister_id });\n    const canister_log_record = IDL.Record({\n        idx: IDL.Nat64,\n        timestamp_nanos: IDL.Nat64,\n        content: IDL.Vec(IDL.Nat8),\n    });\n    const fetch_canister_logs_result = IDL.Record({\n        canister_log_records: IDL.Vec(canister_log_record),\n    });\n    const http_header = IDL.Record({ value: IDL.Text, name: IDL.Text });\n    const http_request_result = IDL.Record({\n        status: IDL.Nat,\n        body: IDL.Vec(IDL.Nat8),\n        headers: IDL.Vec(http_header),\n    });\n    const http_request_args = IDL.Record({\n        url: IDL.Text,\n        method: IDL.Variant({\n            get: IDL.Null,\n            head: IDL.Null,\n            post: IDL.Null,\n        }),\n        max_response_bytes: IDL.Opt(IDL.Nat64),\n        body: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        transform: IDL.Opt(IDL.Record({\n            function: IDL.Func([\n                IDL.Record({\n                    context: IDL.Vec(IDL.Nat8),\n                    response: http_request_result,\n                }),\n            ], [http_request_result], ['query']),\n            context: IDL.Vec(IDL.Nat8),\n        })),\n        headers: IDL.Vec(http_header),\n    });\n    const canister_install_mode = IDL.Variant({\n        reinstall: IDL.Null,\n        upgrade: IDL.Opt(IDL.Record({\n            wasm_memory_persistence: IDL.Opt(IDL.Variant({ keep: IDL.Null, replace: IDL.Null })),\n            skip_pre_upgrade: IDL.Opt(IDL.Bool),\n        })),\n        install: IDL.Null,\n    });\n    const chunk_hash = IDL.Record({ hash: IDL.Vec(IDL.Nat8) });\n    const install_chunked_code_args = IDL.Record({\n        arg: IDL.Vec(IDL.Nat8),\n        wasm_module_hash: IDL.Vec(IDL.Nat8),\n        mode: canister_install_mode,\n        chunk_hashes_list: IDL.Vec(chunk_hash),\n        target_canister: canister_id,\n        store_canister: IDL.Opt(canister_id),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const wasm_module = IDL.Vec(IDL.Nat8);\n    const install_code_args = IDL.Record({\n        arg: IDL.Vec(IDL.Nat8),\n        wasm_module: wasm_module,\n        mode: canister_install_mode,\n        canister_id: canister_id,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const node_metrics_history_args = IDL.Record({\n        start_at_timestamp_nanos: IDL.Nat64,\n        subnet_id: IDL.Principal,\n    });\n    const node_metrics = IDL.Record({\n        num_block_failures_total: IDL.Nat64,\n        node_id: IDL.Principal,\n        num_blocks_proposed_total: IDL.Nat64,\n    });\n    const node_metrics_history_result = IDL.Vec(IDL.Record({\n        timestamp_nanos: IDL.Nat64,\n        node_metrics: IDL.Vec(node_metrics),\n    }));\n    const provisional_create_canister_with_cycles_args = IDL.Record({\n        settings: IDL.Opt(canister_settings),\n        specified_id: IDL.Opt(canister_id),\n        amount: IDL.Opt(IDL.Nat),\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const provisional_create_canister_with_cycles_result = IDL.Record({\n        canister_id: canister_id,\n    });\n    const provisional_top_up_canister_args = IDL.Record({\n        canister_id: canister_id,\n        amount: IDL.Nat,\n    });\n    const raw_rand_result = IDL.Vec(IDL.Nat8);\n    const schnorr_algorithm = IDL.Variant({\n        ed25519: IDL.Null,\n        bip340secp256k1: IDL.Null,\n    });\n    const schnorr_public_key_args = IDL.Record({\n        key_id: IDL.Record({\n            algorithm: schnorr_algorithm,\n            name: IDL.Text,\n        }),\n        canister_id: IDL.Opt(canister_id),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n    });\n    const schnorr_public_key_result = IDL.Record({\n        public_key: IDL.Vec(IDL.Nat8),\n        chain_code: IDL.Vec(IDL.Nat8),\n    });\n    const sign_with_ecdsa_args = IDL.Record({\n        key_id: IDL.Record({ name: IDL.Text, curve: ecdsa_curve }),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n        message_hash: IDL.Vec(IDL.Nat8),\n    });\n    const sign_with_ecdsa_result = IDL.Record({\n        signature: IDL.Vec(IDL.Nat8),\n    });\n    const sign_with_schnorr_args = IDL.Record({\n        key_id: IDL.Record({\n            algorithm: schnorr_algorithm,\n            name: IDL.Text,\n        }),\n        derivation_path: IDL.Vec(IDL.Vec(IDL.Nat8)),\n        message: IDL.Vec(IDL.Nat8),\n    });\n    const sign_with_schnorr_result = IDL.Record({\n        signature: IDL.Vec(IDL.Nat8),\n    });\n    const start_canister_args = IDL.Record({ canister_id: canister_id });\n    const stop_canister_args = IDL.Record({ canister_id: canister_id });\n    const stored_chunks_args = IDL.Record({ canister_id: canister_id });\n    const stored_chunks_result = IDL.Vec(chunk_hash);\n    const uninstall_code_args = IDL.Record({\n        canister_id: canister_id,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const update_settings_args = IDL.Record({\n        canister_id: IDL.Principal,\n        settings: canister_settings,\n        sender_canister_version: IDL.Opt(IDL.Nat64),\n    });\n    const upload_chunk_args = IDL.Record({\n        chunk: IDL.Vec(IDL.Nat8),\n        canister_id: IDL.Principal,\n    });\n    const upload_chunk_result = chunk_hash;\n    return IDL.Service({\n        bitcoin_get_balance: IDL.Func([bitcoin_get_balance_args], [bitcoin_get_balance_result], []),\n        bitcoin_get_current_fee_percentiles: IDL.Func([bitcoin_get_current_fee_percentiles_args], [bitcoin_get_current_fee_percentiles_result], []),\n        bitcoin_get_utxos: IDL.Func([bitcoin_get_utxos_args], [bitcoin_get_utxos_result], []),\n        bitcoin_send_transaction: IDL.Func([bitcoin_send_transaction_args], [], []),\n        canister_info: IDL.Func([canister_info_args], [canister_info_result], []),\n        canister_status: IDL.Func([canister_status_args], [canister_status_result], []),\n        clear_chunk_store: IDL.Func([clear_chunk_store_args], [], []),\n        create_canister: IDL.Func([create_canister_args], [create_canister_result], []),\n        delete_canister: IDL.Func([delete_canister_args], [], []),\n        deposit_cycles: IDL.Func([deposit_cycles_args], [], []),\n        ecdsa_public_key: IDL.Func([ecdsa_public_key_args], [ecdsa_public_key_result], []),\n        fetch_canister_logs: IDL.Func([fetch_canister_logs_args], [fetch_canister_logs_result], ['query']),\n        http_request: IDL.Func([http_request_args], [http_request_result], []),\n        install_chunked_code: IDL.Func([install_chunked_code_args], [], []),\n        install_code: IDL.Func([install_code_args], [], []),\n        node_metrics_history: IDL.Func([node_metrics_history_args], [node_metrics_history_result], []),\n        provisional_create_canister_with_cycles: IDL.Func([provisional_create_canister_with_cycles_args], [provisional_create_canister_with_cycles_result], []),\n        provisional_top_up_canister: IDL.Func([provisional_top_up_canister_args], [], []),\n        raw_rand: IDL.Func([], [raw_rand_result], []),\n        schnorr_public_key: IDL.Func([schnorr_public_key_args], [schnorr_public_key_result], []),\n        sign_with_ecdsa: IDL.Func([sign_with_ecdsa_args], [sign_with_ecdsa_result], []),\n        sign_with_schnorr: IDL.Func([sign_with_schnorr_args], [sign_with_schnorr_result], []),\n        start_canister: IDL.Func([start_canister_args], [], []),\n        stop_canister: IDL.Func([stop_canister_args], [], []),\n        stored_chunks: IDL.Func([stored_chunks_args], [stored_chunks_result], []),\n        uninstall_code: IDL.Func([uninstall_code_args], [], []),\n        update_settings: IDL.Func([update_settings_args], [], []),\n        upload_chunk: IDL.Func([upload_chunk_args], [upload_chunk_result], []),\n    });\n});\n//# sourceMappingURL=management_idl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CborTag: () => (/* binding */ CborTag),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var borc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! borc */ \"(ssr)/../../../../../node_modules/borc/src/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! simple-cbor */ \"(ssr)/../../../../../node_modules/simple-cbor/src/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(simple_cbor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n// This file is based on:\n// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses\n\n\n\n\n// We are using hansl/simple-cbor for CBOR serialization, to avoid issues with\n// encoding the uint64 values that the HTTP handler of the client expects for\n// canister IDs. However, simple-cbor does not yet provide deserialization so\n// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR\n// decoder.\nclass PrincipalEncoder {\n    get name() {\n        return 'Principal';\n    }\n    get priority() {\n        return 0;\n    }\n    match(value) {\n        return value && value._isPrincipal === true;\n    }\n    encode(v) {\n        return simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.bytes(v.toUint8Array());\n    }\n}\nclass BufferEncoder {\n    get name() {\n        return 'Buffer';\n    }\n    get priority() {\n        return 1;\n    }\n    match(value) {\n        return value instanceof ArrayBuffer || ArrayBuffer.isView(value);\n    }\n    encode(v) {\n        return simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.bytes(new Uint8Array(v));\n    }\n}\nclass BigIntEncoder {\n    get name() {\n        return 'BigInt';\n    }\n    get priority() {\n        return 1;\n    }\n    match(value) {\n        return typeof value === `bigint`;\n    }\n    encode(v) {\n        // Always use a bigint encoding.\n        if (v > BigInt(0)) {\n            return simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.tagged(2, simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.bytes((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.fromHex)(v.toString(16))));\n        }\n        else {\n            return simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.tagged(3, simple_cbor__WEBPACK_IMPORTED_MODULE_1__.value.bytes((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.fromHex)((BigInt('-1') * v).toString(16))));\n        }\n    }\n}\nconst serializer = simple_cbor__WEBPACK_IMPORTED_MODULE_1__.SelfDescribeCborSerializer.withDefaultEncoders(true);\nserializer.addEncoder(new PrincipalEncoder());\nserializer.addEncoder(new BufferEncoder());\nserializer.addEncoder(new BigIntEncoder());\nvar CborTag;\n(function (CborTag) {\n    CborTag[CborTag[\"Uint64LittleEndian\"] = 71] = \"Uint64LittleEndian\";\n    CborTag[CborTag[\"Semantic\"] = 55799] = \"Semantic\";\n})(CborTag || (CborTag = {}));\n/**\n * Encode a JavaScript value into CBOR.\n */\nfunction encode(value) {\n    return serializer.serialize(value);\n}\nfunction decodePositiveBigInt(buf) {\n    const len = buf.byteLength;\n    let res = BigInt(0);\n    for (let i = 0; i < len; i++) {\n        res = res * BigInt(0x100) + BigInt(buf[i]);\n    }\n    return res;\n}\n// A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.\nclass Uint8ArrayDecoder extends borc__WEBPACK_IMPORTED_MODULE_0__.Decoder {\n    createByteString(raw) {\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.concat)(...raw);\n    }\n    createByteStringFromHeap(start, end) {\n        if (start === end) {\n            return new ArrayBuffer(0);\n        }\n        return new Uint8Array(this._heap.slice(start, end));\n    }\n}\nfunction decode(input) {\n    const buffer = new Uint8Array(input);\n    const decoder = new Uint8ArrayDecoder({\n        size: buffer.byteLength,\n        tags: {\n            // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).\n            2: val => decodePositiveBigInt(val),\n            3: val => -decodePositiveBigInt(val),\n            [CborTag.Semantic]: (value) => value,\n        },\n    });\n    try {\n        return decoder.decodeFirst(buffer);\n    }\n    catch (e) {\n        throw new Error(`Failed to decode CBOR: ${e}, input: ${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.toHex)(buffer)}`);\n    }\n}\n//# sourceMappingURL=cbor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vY2Jvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUN3QjtBQUNZO0FBQ3FCO0FBQ0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDhDQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4Q0FBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOENBQVUsV0FBVyw4Q0FBVSxPQUFPLHNEQUFPO0FBQ2hFO0FBQ0E7QUFDQSxtQkFBbUIsOENBQVUsV0FBVyw4Q0FBVSxPQUFPLHNEQUFPO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtRUFBMEI7QUFDN0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBCQUEwQjtBQUMzQjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlDQUFZO0FBQzVDO0FBQ0EsZUFBZSxxREFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxFQUFFLFdBQVcsb0RBQUssU0FBUztBQUM3RTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2Nib3IuanM/OGM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgYmFzZWQgb246XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGZpbml0eS1sYWIvZGZpbml0eS9ibG9iLzliY2E2NWY4ZWRkNjU3MDFlYTZiZGIwMGUwNzUyZjkxODZiYmM4OTMvZG9jcy9zcGVjL3B1YmxpYy9pbmRleC5hZG9jI2Nib3ItZW5jb2Rpbmctb2YtcmVxdWVzdHMtYW5kLXJlc3BvbnNlc1xuaW1wb3J0IGJvcmMgZnJvbSAnYm9yYyc7XG5pbXBvcnQgKiBhcyBjYm9yIGZyb20gJ3NpbXBsZS1jYm9yJztcbmltcG9ydCB7IFNlbGZEZXNjcmliZUNib3JTZXJpYWxpemVyIH0gZnJvbSAnc2ltcGxlLWNib3InO1xuaW1wb3J0IHsgY29uY2F0LCBmcm9tSGV4LCB0b0hleCB9IGZyb20gJy4vdXRpbHMvYnVmZmVyJztcbi8vIFdlIGFyZSB1c2luZyBoYW5zbC9zaW1wbGUtY2JvciBmb3IgQ0JPUiBzZXJpYWxpemF0aW9uLCB0byBhdm9pZCBpc3N1ZXMgd2l0aFxuLy8gZW5jb2RpbmcgdGhlIHVpbnQ2NCB2YWx1ZXMgdGhhdCB0aGUgSFRUUCBoYW5kbGVyIG9mIHRoZSBjbGllbnQgZXhwZWN0cyBmb3Jcbi8vIGNhbmlzdGVyIElEcy4gSG93ZXZlciwgc2ltcGxlLWNib3IgZG9lcyBub3QgeWV0IHByb3ZpZGUgZGVzZXJpYWxpemF0aW9uIHNvXG4vLyB3ZSBhcmUgdXNpbmcgYFVpbnQ4QXJyYXlgIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGUgZGlnbmlmaWVkcXVpcmUvYm9yYyBDQk9SXG4vLyBkZWNvZGVyLlxuY2xhc3MgUHJpbmNpcGFsRW5jb2RlciB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnUHJpbmNpcGFsJztcbiAgICB9XG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgbWF0Y2godmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLl9pc1ByaW5jaXBhbCA9PT0gdHJ1ZTtcbiAgICB9XG4gICAgZW5jb2RlKHYpIHtcbiAgICAgICAgcmV0dXJuIGNib3IudmFsdWUuYnl0ZXModi50b1VpbnQ4QXJyYXkoKSk7XG4gICAgfVxufVxuY2xhc3MgQnVmZmVyRW5jb2RlciB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnQnVmZmVyJztcbiAgICB9XG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgbWF0Y2godmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKTtcbiAgICB9XG4gICAgZW5jb2RlKHYpIHtcbiAgICAgICAgcmV0dXJuIGNib3IudmFsdWUuYnl0ZXMobmV3IFVpbnQ4QXJyYXkodikpO1xuICAgIH1cbn1cbmNsYXNzIEJpZ0ludEVuY29kZXIge1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ0JpZ0ludCc7XG4gICAgfVxuICAgIGdldCBwcmlvcml0eSgpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIG1hdGNoKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IGBiaWdpbnRgO1xuICAgIH1cbiAgICBlbmNvZGUodikge1xuICAgICAgICAvLyBBbHdheXMgdXNlIGEgYmlnaW50IGVuY29kaW5nLlxuICAgICAgICBpZiAodiA+IEJpZ0ludCgwKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNib3IudmFsdWUudGFnZ2VkKDIsIGNib3IudmFsdWUuYnl0ZXMoZnJvbUhleCh2LnRvU3RyaW5nKDE2KSkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjYm9yLnZhbHVlLnRhZ2dlZCgzLCBjYm9yLnZhbHVlLmJ5dGVzKGZyb21IZXgoKEJpZ0ludCgnLTEnKSAqIHYpLnRvU3RyaW5nKDE2KSkpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IHNlcmlhbGl6ZXIgPSBTZWxmRGVzY3JpYmVDYm9yU2VyaWFsaXplci53aXRoRGVmYXVsdEVuY29kZXJzKHRydWUpO1xuc2VyaWFsaXplci5hZGRFbmNvZGVyKG5ldyBQcmluY2lwYWxFbmNvZGVyKCkpO1xuc2VyaWFsaXplci5hZGRFbmNvZGVyKG5ldyBCdWZmZXJFbmNvZGVyKCkpO1xuc2VyaWFsaXplci5hZGRFbmNvZGVyKG5ldyBCaWdJbnRFbmNvZGVyKCkpO1xuZXhwb3J0IHZhciBDYm9yVGFnO1xuKGZ1bmN0aW9uIChDYm9yVGFnKSB7XG4gICAgQ2JvclRhZ1tDYm9yVGFnW1wiVWludDY0TGl0dGxlRW5kaWFuXCJdID0gNzFdID0gXCJVaW50NjRMaXR0bGVFbmRpYW5cIjtcbiAgICBDYm9yVGFnW0Nib3JUYWdbXCJTZW1hbnRpY1wiXSA9IDU1Nzk5XSA9IFwiU2VtYW50aWNcIjtcbn0pKENib3JUYWcgfHwgKENib3JUYWcgPSB7fSkpO1xuLyoqXG4gKiBFbmNvZGUgYSBKYXZhU2NyaXB0IHZhbHVlIGludG8gQ0JPUi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZSh2YWx1ZSkge1xuICAgIHJldHVybiBzZXJpYWxpemVyLnNlcmlhbGl6ZSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBkZWNvZGVQb3NpdGl2ZUJpZ0ludChidWYpIHtcbiAgICBjb25zdCBsZW4gPSBidWYuYnl0ZUxlbmd0aDtcbiAgICBsZXQgcmVzID0gQmlnSW50KDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcmVzID0gcmVzICogQmlnSW50KDB4MTAwKSArIEJpZ0ludChidWZbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8gQSBCT1JDIHN1YmNsYXNzIHRoYXQgZGVjb2RlcyBieXRlIHN0cmluZ3MgdG8gQXJyYXlCdWZmZXIgaW5zdGVhZCBvZiB0aGUgQnVmZmVyIGNsYXNzLlxuY2xhc3MgVWludDhBcnJheURlY29kZXIgZXh0ZW5kcyBib3JjLkRlY29kZXIge1xuICAgIGNyZWF0ZUJ5dGVTdHJpbmcocmF3KSB7XG4gICAgICAgIHJldHVybiBjb25jYXQoLi4ucmF3KTtcbiAgICB9XG4gICAgY3JlYXRlQnl0ZVN0cmluZ0Zyb21IZWFwKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuX2hlYXAuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShpbnB1dCk7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBVaW50OEFycmF5RGVjb2Rlcih7XG4gICAgICAgIHNpemU6IGJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICB0YWdzOiB7XG4gICAgICAgICAgICAvLyBPdmVycmlkZSB0YWdzIDIgYW5kIDMgZm9yIEJpZ0ludCBzdXBwb3J0IChib3JjIHN1cHBvcnRzIG9ubHkgQmlnTnVtYmVyKS5cbiAgICAgICAgICAgIDI6IHZhbCA9PiBkZWNvZGVQb3NpdGl2ZUJpZ0ludCh2YWwpLFxuICAgICAgICAgICAgMzogdmFsID0+IC1kZWNvZGVQb3NpdGl2ZUJpZ0ludCh2YWwpLFxuICAgICAgICAgICAgW0Nib3JUYWcuU2VtYW50aWNdOiAodmFsdWUpID0+IHZhbHVlLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZUZpcnN0KGJ1ZmZlcik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGRlY29kZSBDQk9SOiAke2V9LCBpbnB1dDogJHt0b0hleChidWZmZXIpfWApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNib3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Certificate: () => (/* binding */ Certificate),\n/* harmony export */   CertificateVerificationError: () => (/* binding */ CertificateVerificationError),\n/* harmony export */   LookupStatus: () => (/* binding */ LookupStatus),\n/* harmony export */   NodeType: () => (/* binding */ NodeType),\n/* harmony export */   check_canister_ranges: () => (/* binding */ check_canister_ranges),\n/* harmony export */   find_label: () => (/* binding */ find_label),\n/* harmony export */   flatten_forks: () => (/* binding */ flatten_forks),\n/* harmony export */   hashTreeToString: () => (/* binding */ hashTreeToString),\n/* harmony export */   lookupResultToBuffer: () => (/* binding */ lookupResultToBuffer),\n/* harmony export */   lookup_path: () => (/* binding */ lookup_path),\n/* harmony export */   reconstruct: () => (/* binding */ reconstruct)\n/* harmony export */ });\n/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cbor */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./request_id */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _utils_bls__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/bls */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/bls.js\");\n/* harmony import */ var _utils_leb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/leb */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js\");\n\n\n\n\n\n\n\n\n/**\n * A certificate may fail verification with respect to the provided public key\n */\nclass CertificateVerificationError extends _errors__WEBPACK_IMPORTED_MODULE_1__.AgentError {\n    constructor(reason) {\n        super(`Invalid certificate: ${reason}`);\n    }\n}\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Empty\"] = 0] = \"Empty\";\n    NodeType[NodeType[\"Fork\"] = 1] = \"Fork\";\n    NodeType[NodeType[\"Labeled\"] = 2] = \"Labeled\";\n    NodeType[NodeType[\"Leaf\"] = 3] = \"Leaf\";\n    NodeType[NodeType[\"Pruned\"] = 4] = \"Pruned\";\n})(NodeType || (NodeType = {}));\n/**\n * Make a human readable string out of a hash tree.\n * @param tree\n */\nfunction hashTreeToString(tree) {\n    const indent = (s) => s\n        .split('\\n')\n        .map(x => '  ' + x)\n        .join('\\n');\n    function labelToString(label) {\n        const decoder = new TextDecoder(undefined, { fatal: true });\n        try {\n            return JSON.stringify(decoder.decode(label));\n        }\n        catch (e) {\n            return `data(...${label.byteLength} bytes)`;\n        }\n    }\n    switch (tree[0]) {\n        case NodeType.Empty:\n            return '()';\n        case NodeType.Fork: {\n            if (tree[1] instanceof Array && tree[2] instanceof ArrayBuffer) {\n                const left = hashTreeToString(tree[1]);\n                const right = hashTreeToString(tree[2]);\n                return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n            }\n            else {\n                throw new Error('Invalid tree structure for fork');\n            }\n        }\n        case NodeType.Labeled: {\n            if (tree[1] instanceof ArrayBuffer && tree[2] instanceof ArrayBuffer) {\n                const label = labelToString(tree[1]);\n                const sub = hashTreeToString(tree[2]);\n                return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n            }\n            else {\n                throw new Error('Invalid tree structure for labeled');\n            }\n        }\n        case NodeType.Leaf: {\n            if (!tree[1]) {\n                throw new Error('Invalid tree structure for leaf');\n            }\n            else if (Array.isArray(tree[1])) {\n                return JSON.stringify(tree[1]);\n            }\n            return `leaf(...${tree[1].byteLength} bytes)`;\n        }\n        case NodeType.Pruned: {\n            if (!tree[1]) {\n                throw new Error('Invalid tree structure for pruned');\n            }\n            else if (Array.isArray(tree[1])) {\n                return JSON.stringify(tree[1]);\n            }\n            return `pruned(${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.toHex)(new Uint8Array(tree[1]))}`;\n        }\n        default: {\n            return `unknown(${JSON.stringify(tree[0])})`;\n        }\n    }\n}\nfunction isBufferGreaterThan(a, b) {\n    const a8 = new Uint8Array(a);\n    const b8 = new Uint8Array(b);\n    for (let i = 0; i < a8.length; i++) {\n        if (a8[i] > b8[i]) {\n            return true;\n        }\n    }\n    return false;\n}\nclass Certificate {\n    constructor(certificate, _rootKey, _canisterId, _blsVerify, \n    // Default to 5 minutes\n    _maxAgeInMinutes = 5) {\n        this._rootKey = _rootKey;\n        this._canisterId = _canisterId;\n        this._blsVerify = _blsVerify;\n        this._maxAgeInMinutes = _maxAgeInMinutes;\n        this.cert = _cbor__WEBPACK_IMPORTED_MODULE_0__.decode(new Uint8Array(certificate));\n    }\n    /**\n     * Create a new instance of a certificate, automatically verifying it. Throws a\n     * CertificateVerificationError if the certificate cannot be verified.\n     * @constructs  Certificate\n     * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}\n     * @param {ArrayBuffer} options.certificate The bytes of the certificate\n     * @param {ArrayBuffer} options.rootKey The root key to verify against\n     * @param {Principal} options.canisterId The effective or signing canister ID\n     * @param {number} options.maxAgeInMinutes The maximum age of the certificate in minutes. Default is 5 minutes.\n     * @throws {CertificateVerificationError}\n     */\n    static async create(options) {\n        const cert = Certificate.createUnverified(options);\n        await cert.verify();\n        return cert;\n    }\n    static createUnverified(options) {\n        let blsVerify = options.blsVerify;\n        if (!blsVerify) {\n            blsVerify = _utils_bls__WEBPACK_IMPORTED_MODULE_5__.blsVerify;\n        }\n        return new Certificate(options.certificate, options.rootKey, options.canisterId, blsVerify, options.maxAgeInMinutes);\n    }\n    lookup(path) {\n        // constrain the type of the result, so that empty HashTree is undefined\n        return lookup_path(path, this.cert.tree);\n    }\n    lookup_label(label) {\n        return this.lookup([label]);\n    }\n    async verify() {\n        const rootHash = await reconstruct(this.cert.tree);\n        const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n        const sig = this.cert.signature;\n        const key = extractDER(derKey);\n        const msg = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-state-root'), rootHash);\n        let sigVer = false;\n        const lookupTime = lookupResultToBuffer(this.lookup(['time']));\n        if (!lookupTime) {\n            // Should never happen - time is always present in IC certificates\n            throw new CertificateVerificationError('Certificate does not contain a time');\n        }\n        const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n        const MAX_AGE_IN_MSEC = this._maxAgeInMinutes * 60 * 1000;\n        const now = Date.now();\n        const earliestCertificateTime = now - MAX_AGE_IN_MSEC;\n        const fiveMinutesFromNow = now + FIVE_MINUTES_IN_MSEC;\n        const certTime = (0,_utils_leb__WEBPACK_IMPORTED_MODULE_6__.decodeTime)(lookupTime);\n        if (certTime.getTime() < earliestCertificateTime) {\n            throw new CertificateVerificationError(`Certificate is signed more than ${this._maxAgeInMinutes} minutes in the past. Certificate time: ` +\n                certTime.toISOString() +\n                ' Current time: ' +\n                new Date(now).toISOString());\n        }\n        else if (certTime.getTime() > fiveMinutesFromNow) {\n            throw new CertificateVerificationError('Certificate is signed more than 5 minutes in the future. Certificate time: ' +\n                certTime.toISOString() +\n                ' Current time: ' +\n                new Date(now).toISOString());\n        }\n        try {\n            sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));\n        }\n        catch (err) {\n            sigVer = false;\n        }\n        if (!sigVer) {\n            throw new CertificateVerificationError('Signature verification failed');\n        }\n    }\n    async _checkDelegationAndGetKey(d) {\n        if (!d) {\n            return this._rootKey;\n        }\n        const cert = await Certificate.createUnverified({\n            certificate: d.certificate,\n            rootKey: this._rootKey,\n            canisterId: this._canisterId,\n            blsVerify: this._blsVerify,\n            // Do not check max age for delegation certificates\n            maxAgeInMinutes: Infinity,\n        });\n        if (cert.cert.delegation) {\n            throw new CertificateVerificationError('Delegation certificates cannot be nested');\n        }\n        await cert.verify();\n        if (this._canisterId.toString() !== _agent__WEBPACK_IMPORTED_MODULE_7__.MANAGEMENT_CANISTER_ID) {\n            const canisterInRange = check_canister_ranges({\n                canisterId: this._canisterId,\n                subnetId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__.Principal.fromUint8Array(new Uint8Array(d.subnet_id)),\n                tree: cert.cert.tree,\n            });\n            if (!canisterInRange) {\n                throw new CertificateVerificationError(`Canister ${this._canisterId} not in range of delegations for subnet 0x${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.toHex)(d.subnet_id)}`);\n            }\n        }\n        const publicKeyLookup = lookupResultToBuffer(cert.lookup(['subnet', d.subnet_id, 'public_key']));\n        if (!publicKeyLookup) {\n            throw new Error(`Could not find subnet key for subnet 0x${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.toHex)(d.subnet_id)}`);\n        }\n        return publicKeyLookup;\n    }\n}\nconst DER_PREFIX = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.fromHex)('308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100');\nconst KEY_LENGTH = 96;\nfunction extractDER(buf) {\n    const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n    if (buf.byteLength !== expectedLength) {\n        throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);\n    }\n    const prefix = buf.slice(0, DER_PREFIX.byteLength);\n    if (!(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.bufEquals)(prefix, DER_PREFIX)) {\n        throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`);\n    }\n    return buf.slice(DER_PREFIX.byteLength);\n}\n/**\n * utility function to constrain the type of a path\n * @param {ArrayBuffer | HashTree | undefined} result - the result of a lookup\n * @returns ArrayBuffer or Undefined\n */\nfunction lookupResultToBuffer(result) {\n    if (result.status !== LookupStatus.Found) {\n        return undefined;\n    }\n    if (result.value instanceof ArrayBuffer) {\n        return result.value;\n    }\n    if (result.value instanceof Uint8Array) {\n        return result.value.buffer;\n    }\n    return undefined;\n}\n/**\n * @param t\n */\nasync function reconstruct(t) {\n    switch (t[0]) {\n        case NodeType.Empty:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)(domain_sep('ic-hashtree-empty'));\n        case NodeType.Pruned:\n            return t[1];\n        case NodeType.Leaf:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-hashtree-leaf'), t[1]));\n        case NodeType.Labeled:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-hashtree-labeled'), t[1], await reconstruct(t[2])));\n        case NodeType.Fork:\n            return (0,_request_id__WEBPACK_IMPORTED_MODULE_2__.hash)((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(domain_sep('ic-hashtree-fork'), await reconstruct(t[1]), await reconstruct(t[2])));\n        default:\n            throw new Error('unreachable');\n    }\n}\nfunction domain_sep(s) {\n    const len = new Uint8Array([s.length]);\n    const str = new TextEncoder().encode(s);\n    return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.concat)(len, str);\n}\nvar LookupStatus;\n(function (LookupStatus) {\n    LookupStatus[\"Unknown\"] = \"unknown\";\n    LookupStatus[\"Absent\"] = \"absent\";\n    LookupStatus[\"Found\"] = \"found\";\n})(LookupStatus || (LookupStatus = {}));\nvar LabelLookupStatus;\n(function (LabelLookupStatus) {\n    LabelLookupStatus[\"Less\"] = \"less\";\n    LabelLookupStatus[\"Greater\"] = \"greater\";\n})(LabelLookupStatus || (LabelLookupStatus = {}));\nfunction lookup_path(path, tree) {\n    if (path.length === 0) {\n        switch (tree[0]) {\n            case NodeType.Leaf: {\n                if (!tree[1]) {\n                    throw new Error('Invalid tree structure for leaf');\n                }\n                if (tree[1] instanceof ArrayBuffer) {\n                    return {\n                        status: LookupStatus.Found,\n                        value: tree[1],\n                    };\n                }\n                if (tree[1] instanceof Uint8Array) {\n                    return {\n                        status: LookupStatus.Found,\n                        value: tree[1].buffer,\n                    };\n                }\n                return {\n                    status: LookupStatus.Found,\n                    value: tree[1],\n                };\n            }\n            default: {\n                return {\n                    status: LookupStatus.Found,\n                    value: tree,\n                };\n            }\n        }\n    }\n    const label = typeof path[0] === 'string' ? new TextEncoder().encode(path[0]) : path[0];\n    const lookupResult = find_label(label, tree);\n    switch (lookupResult.status) {\n        case LookupStatus.Found: {\n            return lookup_path(path.slice(1), lookupResult.value);\n        }\n        case LabelLookupStatus.Greater:\n        case LabelLookupStatus.Less: {\n            return {\n                status: LookupStatus.Absent,\n            };\n        }\n        default: {\n            return lookupResult;\n        }\n    }\n}\n/**\n * If the tree is a fork, flatten it into an array of trees\n * @param t - the tree to flatten\n * @returns HashTree[] - the flattened tree\n */\nfunction flatten_forks(t) {\n    switch (t[0]) {\n        case NodeType.Empty:\n            return [];\n        case NodeType.Fork:\n            return flatten_forks(t[1]).concat(flatten_forks(t[2]));\n        default:\n            return [t];\n    }\n}\nfunction find_label(label, tree) {\n    switch (tree[0]) {\n        // if we have a labelled node, compare the node's label to the one we are\n        // looking for\n        case NodeType.Labeled:\n            // if the label we're searching for is greater than this node's label,\n            // we need to keep searching\n            if (isBufferGreaterThan(label, tree[1])) {\n                return {\n                    status: LabelLookupStatus.Greater,\n                };\n            }\n            // if the label we're searching for is equal this node's label, we can\n            // stop searching and return the found node\n            if ((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_3__.bufEquals)(label, tree[1])) {\n                return {\n                    status: LookupStatus.Found,\n                    value: tree[2],\n                };\n            }\n            // if the label we're searching for is not greater than or equal to this\n            // node's label, then it's less than this node's label, and we can stop\n            // searching because we've looked too far\n            return {\n                status: LabelLookupStatus.Less,\n            };\n        // if we have a fork node, we need to search both sides, starting with the left\n        case NodeType.Fork:\n            // search in the left node\n            const leftLookupResult = find_label(label, tree[1]);\n            switch (leftLookupResult.status) {\n                // if the label we're searching for is greater than the left node lookup,\n                // we need to search the right node\n                case LabelLookupStatus.Greater: {\n                    const rightLookupResult = find_label(label, tree[2]);\n                    // if the label we're searching for is less than the right node lookup,\n                    // then we can stop searching and say that the label is provably Absent\n                    if (rightLookupResult.status === LabelLookupStatus.Less) {\n                        return {\n                            status: LookupStatus.Absent,\n                        };\n                    }\n                    // if the label we're searching for is less than or equal to the right\n                    // node lookup, then we let the caller handle it\n                    return rightLookupResult;\n                }\n                // if the left node returns an uncertain result, we need to search the\n                // right node\n                case LookupStatus.Unknown: {\n                    let rightLookupResult = find_label(label, tree[2]);\n                    // if the label we're searching for is less than the right node lookup,\n                    // then we also need to return an uncertain result\n                    if (rightLookupResult.status === LabelLookupStatus.Less) {\n                        return {\n                            status: LookupStatus.Unknown,\n                        };\n                    }\n                    // if the label we're searching for is less than or equal to the right\n                    // node lookup, then we let the caller handle it\n                    return rightLookupResult;\n                }\n                // if the label we're searching for is not greater than the left node\n                // lookup, or the result is not uncertain, we stop searching and return\n                // whatever the result of the left node lookup was, which can be either\n                // Found or Absent\n                default: {\n                    return leftLookupResult;\n                }\n            }\n        // if we encounter a Pruned node, we can't know for certain if the label\n        // we're searching for is present or not\n        case NodeType.Pruned:\n            return {\n                status: LookupStatus.Unknown,\n            };\n        // if the current node is Empty, or a Leaf, we can stop searching because\n        // we know for sure that the label we're searching for is not present\n        default:\n            return {\n                status: LookupStatus.Absent,\n            };\n    }\n}\n/**\n * Check if a canister falls within a range of canisters\n * @param canisterId Principal\n * @param ranges [Principal, Principal][]\n * @returns\n */\nfunction check_canister_ranges(params) {\n    const { canisterId, subnetId, tree } = params;\n    const rangeLookup = lookup_path(['subnet', subnetId.toUint8Array(), 'canister_ranges'], tree);\n    if (rangeLookup.status !== LookupStatus.Found || !(rangeLookup.value instanceof ArrayBuffer)) {\n        throw new Error(`Could not find canister ranges for subnet ${subnetId}`);\n    }\n    const ranges_arr = _cbor__WEBPACK_IMPORTED_MODULE_0__.decode(rangeLookup.value);\n    const ranges = ranges_arr.map(v => [\n        _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__.Principal.fromUint8Array(v[0]),\n        _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__.Principal.fromUint8Array(v[1]),\n    ]);\n    const canisterInRange = ranges.some(r => r[0].ltEq(canisterId) && r[1].gtEq(canisterId));\n    return canisterInRange;\n}\n//# sourceMappingURL=certificate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vY2VydGlmaWNhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNPO0FBQ0Y7QUFDK0I7QUFDcEI7QUFDWjtBQUNNO0FBQ1E7QUFDakQ7QUFDQTtBQUNBO0FBQ08sMkNBQTJDLCtDQUFVO0FBQzVEO0FBQ0Esc0NBQXNDLE9BQU87QUFDN0M7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsYUFBYTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQkFBa0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGFBQWEsa0JBQWtCLGNBQWM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWMsV0FBVyxZQUFZO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixvQkFBb0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixvREFBSywwQkFBMEI7QUFDNUQ7QUFDQTtBQUNBLDhCQUE4Qix3QkFBd0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5Q0FBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwQkFBMEIsU0FBUztBQUNsRCxlQUFlLGFBQWE7QUFDNUIsZUFBZSxhQUFhO0FBQzVCLGVBQWUsV0FBVztBQUMxQixlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpREFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscURBQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzREFBVTtBQUNuQztBQUNBLHNGQUFzRix1QkFBdUI7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsMERBQXNCO0FBQ2xFO0FBQ0E7QUFDQSwwQkFBMEIseURBQVM7QUFDbkM7QUFDQSxhQUFhO0FBQ2I7QUFDQSxtRUFBbUUsa0JBQWtCLDJDQUEyQyxvREFBSyxjQUFjO0FBQ25KO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLG9EQUFLLGNBQWM7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0JBQWdCO0FBQ2xGO0FBQ0E7QUFDQSxTQUFTLHdEQUFTO0FBQ2xCLG1HQUFtRyxXQUFXLFlBQVksT0FBTztBQUNqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQ0FBb0M7QUFDL0M7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLG1CQUFtQixpREFBSTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaURBQUksQ0FBQyxxREFBTTtBQUM5QjtBQUNBLG1CQUFtQixpREFBSSxDQUFDLHFEQUFNO0FBQzlCO0FBQ0EsbUJBQW1CLGlEQUFJLENBQUMscURBQU07QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFEQUFNO0FBQ2pCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0NBQW9DO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDeEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdEQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQSxxRUFBcUUsU0FBUztBQUM5RTtBQUNBLHVCQUF1Qix5Q0FBVztBQUNsQztBQUNBLFFBQVEseURBQVM7QUFDakIsUUFBUSx5REFBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9jZXJ0aWZpY2F0ZS5qcz9kZWZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNib3IgZnJvbSAnLi9jYm9yJztcbmltcG9ydCB7IEFnZW50RXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgeyBoYXNoIH0gZnJvbSAnLi9yZXF1ZXN0X2lkJztcbmltcG9ydCB7IGJ1ZkVxdWFscywgY29uY2F0LCBmcm9tSGV4LCB0b0hleCB9IGZyb20gJy4vdXRpbHMvYnVmZmVyJztcbmltcG9ydCB7IFByaW5jaXBhbCB9IGZyb20gJ0BkZmluaXR5L3ByaW5jaXBhbCc7XG5pbXBvcnQgKiBhcyBibHMgZnJvbSAnLi91dGlscy9ibHMnO1xuaW1wb3J0IHsgZGVjb2RlVGltZSB9IGZyb20gJy4vdXRpbHMvbGViJztcbmltcG9ydCB7IE1BTkFHRU1FTlRfQ0FOSVNURVJfSUQgfSBmcm9tICcuL2FnZW50Jztcbi8qKlxuICogQSBjZXJ0aWZpY2F0ZSBtYXkgZmFpbCB2ZXJpZmljYXRpb24gd2l0aCByZXNwZWN0IHRvIHRoZSBwcm92aWRlZCBwdWJsaWMga2V5XG4gKi9cbmV4cG9ydCBjbGFzcyBDZXJ0aWZpY2F0ZVZlcmlmaWNhdGlvbkVycm9yIGV4dGVuZHMgQWdlbnRFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIGNlcnRpZmljYXRlOiAke3JlYXNvbn1gKTtcbiAgICB9XG59XG5leHBvcnQgdmFyIE5vZGVUeXBlO1xuKGZ1bmN0aW9uIChOb2RlVHlwZSkge1xuICAgIE5vZGVUeXBlW05vZGVUeXBlW1wiRW1wdHlcIl0gPSAwXSA9IFwiRW1wdHlcIjtcbiAgICBOb2RlVHlwZVtOb2RlVHlwZVtcIkZvcmtcIl0gPSAxXSA9IFwiRm9ya1wiO1xuICAgIE5vZGVUeXBlW05vZGVUeXBlW1wiTGFiZWxlZFwiXSA9IDJdID0gXCJMYWJlbGVkXCI7XG4gICAgTm9kZVR5cGVbTm9kZVR5cGVbXCJMZWFmXCJdID0gM10gPSBcIkxlYWZcIjtcbiAgICBOb2RlVHlwZVtOb2RlVHlwZVtcIlBydW5lZFwiXSA9IDRdID0gXCJQcnVuZWRcIjtcbn0pKE5vZGVUeXBlIHx8IChOb2RlVHlwZSA9IHt9KSk7XG4vKipcbiAqIE1ha2UgYSBodW1hbiByZWFkYWJsZSBzdHJpbmcgb3V0IG9mIGEgaGFzaCB0cmVlLlxuICogQHBhcmFtIHRyZWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hUcmVlVG9TdHJpbmcodHJlZSkge1xuICAgIGNvbnN0IGluZGVudCA9IChzKSA9PiBzXG4gICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgLm1hcCh4ID0+ICcgICcgKyB4KVxuICAgICAgICAuam9pbignXFxuJyk7XG4gICAgZnVuY3Rpb24gbGFiZWxUb1N0cmluZyhsYWJlbCkge1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKHVuZGVmaW5lZCwgeyBmYXRhbDogdHJ1ZSB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkZWNvZGVyLmRlY29kZShsYWJlbCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gYGRhdGEoLi4uJHtsYWJlbC5ieXRlTGVuZ3RofSBieXRlcylgO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAodHJlZVswXSkge1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVtcHR5OlxuICAgICAgICAgICAgcmV0dXJuICcoKSc7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuRm9yazoge1xuICAgICAgICAgICAgaWYgKHRyZWVbMV0gaW5zdGFuY2VvZiBBcnJheSAmJiB0cmVlWzJdIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0ID0gaGFzaFRyZWVUb1N0cmluZyh0cmVlWzFdKTtcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodCA9IGhhc2hUcmVlVG9TdHJpbmcodHJlZVsyXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBzdWIoXFxuIGxlZnQ6XFxuJHtpbmRlbnQobGVmdCl9XFxuLS0tXFxuIHJpZ2h0OlxcbiR7aW5kZW50KHJpZ2h0KX1cXG4pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0cmVlIHN0cnVjdHVyZSBmb3IgZm9yaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuTGFiZWxlZDoge1xuICAgICAgICAgICAgaWYgKHRyZWVbMV0gaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciAmJiB0cmVlWzJdIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGxhYmVsVG9TdHJpbmcodHJlZVsxXSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViID0gaGFzaFRyZWVUb1N0cmluZyh0cmVlWzJdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYGxhYmVsKFxcbiBsYWJlbDpcXG4ke2luZGVudChsYWJlbCl9XFxuIHN1YjpcXG4ke2luZGVudChzdWIpfVxcbilgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRyZWUgc3RydWN0dXJlIGZvciBsYWJlbGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBOb2RlVHlwZS5MZWFmOiB7XG4gICAgICAgICAgICBpZiAoIXRyZWVbMV0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdHJlZSBzdHJ1Y3R1cmUgZm9yIGxlYWYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodHJlZVsxXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodHJlZVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYGxlYWYoLi4uJHt0cmVlWzFdLmJ5dGVMZW5ndGh9IGJ5dGVzKWA7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBOb2RlVHlwZS5QcnVuZWQ6IHtcbiAgICAgICAgICAgIGlmICghdHJlZVsxXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0cmVlIHN0cnVjdHVyZSBmb3IgcHJ1bmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRyZWVbMV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRyZWVbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGBwcnVuZWQoJHt0b0hleChuZXcgVWludDhBcnJheSh0cmVlWzFdKSl9YDtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICByZXR1cm4gYHVua25vd24oJHtKU09OLnN0cmluZ2lmeSh0cmVlWzBdKX0pYDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzQnVmZmVyR3JlYXRlclRoYW4oYSwgYikge1xuICAgIGNvbnN0IGE4ID0gbmV3IFVpbnQ4QXJyYXkoYSk7XG4gICAgY29uc3QgYjggPSBuZXcgVWludDhBcnJheShiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGE4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhOFtpXSA+IGI4W2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgY2xhc3MgQ2VydGlmaWNhdGUge1xuICAgIGNvbnN0cnVjdG9yKGNlcnRpZmljYXRlLCBfcm9vdEtleSwgX2NhbmlzdGVySWQsIF9ibHNWZXJpZnksIFxuICAgIC8vIERlZmF1bHQgdG8gNSBtaW51dGVzXG4gICAgX21heEFnZUluTWludXRlcyA9IDUpIHtcbiAgICAgICAgdGhpcy5fcm9vdEtleSA9IF9yb290S2V5O1xuICAgICAgICB0aGlzLl9jYW5pc3RlcklkID0gX2NhbmlzdGVySWQ7XG4gICAgICAgIHRoaXMuX2Jsc1ZlcmlmeSA9IF9ibHNWZXJpZnk7XG4gICAgICAgIHRoaXMuX21heEFnZUluTWludXRlcyA9IF9tYXhBZ2VJbk1pbnV0ZXM7XG4gICAgICAgIHRoaXMuY2VydCA9IGNib3IuZGVjb2RlKG5ldyBVaW50OEFycmF5KGNlcnRpZmljYXRlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBhIGNlcnRpZmljYXRlLCBhdXRvbWF0aWNhbGx5IHZlcmlmeWluZyBpdC4gVGhyb3dzIGFcbiAgICAgKiBDZXJ0aWZpY2F0ZVZlcmlmaWNhdGlvbkVycm9yIGlmIHRoZSBjZXJ0aWZpY2F0ZSBjYW5ub3QgYmUgdmVyaWZpZWQuXG4gICAgICogQGNvbnN0cnVjdHMgIENlcnRpZmljYXRlXG4gICAgICogQHBhcmFtIHtDcmVhdGVDZXJ0aWZpY2F0ZU9wdGlvbnN9IG9wdGlvbnMge0BsaW5rIENyZWF0ZUNlcnRpZmljYXRlT3B0aW9uc31cbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBvcHRpb25zLmNlcnRpZmljYXRlIFRoZSBieXRlcyBvZiB0aGUgY2VydGlmaWNhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBvcHRpb25zLnJvb3RLZXkgVGhlIHJvb3Qga2V5IHRvIHZlcmlmeSBhZ2FpbnN0XG4gICAgICogQHBhcmFtIHtQcmluY2lwYWx9IG9wdGlvbnMuY2FuaXN0ZXJJZCBUaGUgZWZmZWN0aXZlIG9yIHNpZ25pbmcgY2FuaXN0ZXIgSURcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5tYXhBZ2VJbk1pbnV0ZXMgVGhlIG1heGltdW0gYWdlIG9mIHRoZSBjZXJ0aWZpY2F0ZSBpbiBtaW51dGVzLiBEZWZhdWx0IGlzIDUgbWludXRlcy5cbiAgICAgKiBAdGhyb3dzIHtDZXJ0aWZpY2F0ZVZlcmlmaWNhdGlvbkVycm9yfVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBjcmVhdGUob3B0aW9ucykge1xuICAgICAgICBjb25zdCBjZXJ0ID0gQ2VydGlmaWNhdGUuY3JlYXRlVW52ZXJpZmllZChvcHRpb25zKTtcbiAgICAgICAgYXdhaXQgY2VydC52ZXJpZnkoKTtcbiAgICAgICAgcmV0dXJuIGNlcnQ7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVVbnZlcmlmaWVkKG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGJsc1ZlcmlmeSA9IG9wdGlvbnMuYmxzVmVyaWZ5O1xuICAgICAgICBpZiAoIWJsc1ZlcmlmeSkge1xuICAgICAgICAgICAgYmxzVmVyaWZ5ID0gYmxzLmJsc1ZlcmlmeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENlcnRpZmljYXRlKG9wdGlvbnMuY2VydGlmaWNhdGUsIG9wdGlvbnMucm9vdEtleSwgb3B0aW9ucy5jYW5pc3RlcklkLCBibHNWZXJpZnksIG9wdGlvbnMubWF4QWdlSW5NaW51dGVzKTtcbiAgICB9XG4gICAgbG9va3VwKHBhdGgpIHtcbiAgICAgICAgLy8gY29uc3RyYWluIHRoZSB0eXBlIG9mIHRoZSByZXN1bHQsIHNvIHRoYXQgZW1wdHkgSGFzaFRyZWUgaXMgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBsb29rdXBfcGF0aChwYXRoLCB0aGlzLmNlcnQudHJlZSk7XG4gICAgfVxuICAgIGxvb2t1cF9sYWJlbChsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb29rdXAoW2xhYmVsXSk7XG4gICAgfVxuICAgIGFzeW5jIHZlcmlmeSgpIHtcbiAgICAgICAgY29uc3Qgcm9vdEhhc2ggPSBhd2FpdCByZWNvbnN0cnVjdCh0aGlzLmNlcnQudHJlZSk7XG4gICAgICAgIGNvbnN0IGRlcktleSA9IGF3YWl0IHRoaXMuX2NoZWNrRGVsZWdhdGlvbkFuZEdldEtleSh0aGlzLmNlcnQuZGVsZWdhdGlvbik7XG4gICAgICAgIGNvbnN0IHNpZyA9IHRoaXMuY2VydC5zaWduYXR1cmU7XG4gICAgICAgIGNvbnN0IGtleSA9IGV4dHJhY3RERVIoZGVyS2V5KTtcbiAgICAgICAgY29uc3QgbXNnID0gY29uY2F0KGRvbWFpbl9zZXAoJ2ljLXN0YXRlLXJvb3QnKSwgcm9vdEhhc2gpO1xuICAgICAgICBsZXQgc2lnVmVyID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGxvb2t1cFRpbWUgPSBsb29rdXBSZXN1bHRUb0J1ZmZlcih0aGlzLmxvb2t1cChbJ3RpbWUnXSkpO1xuICAgICAgICBpZiAoIWxvb2t1cFRpbWUpIHtcbiAgICAgICAgICAgIC8vIFNob3VsZCBuZXZlciBoYXBwZW4gLSB0aW1lIGlzIGFsd2F5cyBwcmVzZW50IGluIElDIGNlcnRpZmljYXRlc1xuICAgICAgICAgICAgdGhyb3cgbmV3IENlcnRpZmljYXRlVmVyaWZpY2F0aW9uRXJyb3IoJ0NlcnRpZmljYXRlIGRvZXMgbm90IGNvbnRhaW4gYSB0aW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgRklWRV9NSU5VVEVTX0lOX01TRUMgPSA1ICogNjAgKiAxMDAwO1xuICAgICAgICBjb25zdCBNQVhfQUdFX0lOX01TRUMgPSB0aGlzLl9tYXhBZ2VJbk1pbnV0ZXMgKiA2MCAqIDEwMDA7XG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IGVhcmxpZXN0Q2VydGlmaWNhdGVUaW1lID0gbm93IC0gTUFYX0FHRV9JTl9NU0VDO1xuICAgICAgICBjb25zdCBmaXZlTWludXRlc0Zyb21Ob3cgPSBub3cgKyBGSVZFX01JTlVURVNfSU5fTVNFQztcbiAgICAgICAgY29uc3QgY2VydFRpbWUgPSBkZWNvZGVUaW1lKGxvb2t1cFRpbWUpO1xuICAgICAgICBpZiAoY2VydFRpbWUuZ2V0VGltZSgpIDwgZWFybGllc3RDZXJ0aWZpY2F0ZVRpbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDZXJ0aWZpY2F0ZVZlcmlmaWNhdGlvbkVycm9yKGBDZXJ0aWZpY2F0ZSBpcyBzaWduZWQgbW9yZSB0aGFuICR7dGhpcy5fbWF4QWdlSW5NaW51dGVzfSBtaW51dGVzIGluIHRoZSBwYXN0LiBDZXJ0aWZpY2F0ZSB0aW1lOiBgICtcbiAgICAgICAgICAgICAgICBjZXJ0VGltZS50b0lTT1N0cmluZygpICtcbiAgICAgICAgICAgICAgICAnIEN1cnJlbnQgdGltZTogJyArXG4gICAgICAgICAgICAgICAgbmV3IERhdGUobm93KS50b0lTT1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjZXJ0VGltZS5nZXRUaW1lKCkgPiBmaXZlTWludXRlc0Zyb21Ob3cpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDZXJ0aWZpY2F0ZVZlcmlmaWNhdGlvbkVycm9yKCdDZXJ0aWZpY2F0ZSBpcyBzaWduZWQgbW9yZSB0aGFuIDUgbWludXRlcyBpbiB0aGUgZnV0dXJlLiBDZXJ0aWZpY2F0ZSB0aW1lOiAnICtcbiAgICAgICAgICAgICAgICBjZXJ0VGltZS50b0lTT1N0cmluZygpICtcbiAgICAgICAgICAgICAgICAnIEN1cnJlbnQgdGltZTogJyArXG4gICAgICAgICAgICAgICAgbmV3IERhdGUobm93KS50b0lTT1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2lnVmVyID0gYXdhaXQgdGhpcy5fYmxzVmVyaWZ5KG5ldyBVaW50OEFycmF5KGtleSksIG5ldyBVaW50OEFycmF5KHNpZyksIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpZ1ZlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2lnVmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ2VydGlmaWNhdGVWZXJpZmljYXRpb25FcnJvcignU2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfY2hlY2tEZWxlZ2F0aW9uQW5kR2V0S2V5KGQpIHtcbiAgICAgICAgaWYgKCFkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcm9vdEtleTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZXJ0ID0gYXdhaXQgQ2VydGlmaWNhdGUuY3JlYXRlVW52ZXJpZmllZCh7XG4gICAgICAgICAgICBjZXJ0aWZpY2F0ZTogZC5jZXJ0aWZpY2F0ZSxcbiAgICAgICAgICAgIHJvb3RLZXk6IHRoaXMuX3Jvb3RLZXksXG4gICAgICAgICAgICBjYW5pc3RlcklkOiB0aGlzLl9jYW5pc3RlcklkLFxuICAgICAgICAgICAgYmxzVmVyaWZ5OiB0aGlzLl9ibHNWZXJpZnksXG4gICAgICAgICAgICAvLyBEbyBub3QgY2hlY2sgbWF4IGFnZSBmb3IgZGVsZWdhdGlvbiBjZXJ0aWZpY2F0ZXNcbiAgICAgICAgICAgIG1heEFnZUluTWludXRlczogSW5maW5pdHksXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY2VydC5jZXJ0LmRlbGVnYXRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDZXJ0aWZpY2F0ZVZlcmlmaWNhdGlvbkVycm9yKCdEZWxlZ2F0aW9uIGNlcnRpZmljYXRlcyBjYW5ub3QgYmUgbmVzdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgY2VydC52ZXJpZnkoKTtcbiAgICAgICAgaWYgKHRoaXMuX2NhbmlzdGVySWQudG9TdHJpbmcoKSAhPT0gTUFOQUdFTUVOVF9DQU5JU1RFUl9JRCkge1xuICAgICAgICAgICAgY29uc3QgY2FuaXN0ZXJJblJhbmdlID0gY2hlY2tfY2FuaXN0ZXJfcmFuZ2VzKHtcbiAgICAgICAgICAgICAgICBjYW5pc3RlcklkOiB0aGlzLl9jYW5pc3RlcklkLFxuICAgICAgICAgICAgICAgIHN1Ym5ldElkOiBQcmluY2lwYWwuZnJvbVVpbnQ4QXJyYXkobmV3IFVpbnQ4QXJyYXkoZC5zdWJuZXRfaWQpKSxcbiAgICAgICAgICAgICAgICB0cmVlOiBjZXJ0LmNlcnQudHJlZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFjYW5pc3RlckluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ2VydGlmaWNhdGVWZXJpZmljYXRpb25FcnJvcihgQ2FuaXN0ZXIgJHt0aGlzLl9jYW5pc3RlcklkfSBub3QgaW4gcmFuZ2Ugb2YgZGVsZWdhdGlvbnMgZm9yIHN1Ym5ldCAweCR7dG9IZXgoZC5zdWJuZXRfaWQpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB1YmxpY0tleUxvb2t1cCA9IGxvb2t1cFJlc3VsdFRvQnVmZmVyKGNlcnQubG9va3VwKFsnc3VibmV0JywgZC5zdWJuZXRfaWQsICdwdWJsaWNfa2V5J10pKTtcbiAgICAgICAgaWYgKCFwdWJsaWNLZXlMb29rdXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgc3VibmV0IGtleSBmb3Igc3VibmV0IDB4JHt0b0hleChkLnN1Ym5ldF9pZCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB1YmxpY0tleUxvb2t1cDtcbiAgICB9XG59XG5jb25zdCBERVJfUFJFRklYID0gZnJvbUhleCgnMzA4MTgyMzAxZDA2MGQyYjA2MDEwNDAxODJkYzdjMDUwMzAxMDIwMTA2MGMyYjA2MDEwNDAxODJkYzdjMDUwMzAyMDEwMzYxMDAnKTtcbmNvbnN0IEtFWV9MRU5HVEggPSA5NjtcbmZ1bmN0aW9uIGV4dHJhY3RERVIoYnVmKSB7XG4gICAgY29uc3QgZXhwZWN0ZWRMZW5ndGggPSBERVJfUFJFRklYLmJ5dGVMZW5ndGggKyBLRVlfTEVOR1RIO1xuICAgIGlmIChidWYuYnl0ZUxlbmd0aCAhPT0gZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQkxTIERFUi1lbmNvZGVkIHB1YmxpYyBrZXkgbXVzdCBiZSAke2V4cGVjdGVkTGVuZ3RofSBieXRlcyBsb25nYCk7XG4gICAgfVxuICAgIGNvbnN0IHByZWZpeCA9IGJ1Zi5zbGljZSgwLCBERVJfUFJFRklYLmJ5dGVMZW5ndGgpO1xuICAgIGlmICghYnVmRXF1YWxzKHByZWZpeCwgREVSX1BSRUZJWCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQkxTIERFUi1lbmNvZGVkIHB1YmxpYyBrZXkgaXMgaW52YWxpZC4gRXhwZWN0IHRoZSBmb2xsb3dpbmcgcHJlZml4OiAke0RFUl9QUkVGSVh9LCBidXQgZ2V0ICR7cHJlZml4fWApO1xuICAgIH1cbiAgICByZXR1cm4gYnVmLnNsaWNlKERFUl9QUkVGSVguYnl0ZUxlbmd0aCk7XG59XG4vKipcbiAqIHV0aWxpdHkgZnVuY3Rpb24gdG8gY29uc3RyYWluIHRoZSB0eXBlIG9mIGEgcGF0aFxuICogQHBhcmFtIHtBcnJheUJ1ZmZlciB8IEhhc2hUcmVlIHwgdW5kZWZpbmVkfSByZXN1bHQgLSB0aGUgcmVzdWx0IG9mIGEgbG9va3VwXG4gKiBAcmV0dXJucyBBcnJheUJ1ZmZlciBvciBVbmRlZmluZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvb2t1cFJlc3VsdFRvQnVmZmVyKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuc3RhdHVzICE9PSBMb29rdXBTdGF0dXMuRm91bmQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC52YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gICAgfVxuICAgIGlmIChyZXN1bHQudmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQudmFsdWUuYnVmZmVyO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBAcGFyYW0gdFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVjb25zdHJ1Y3QodCkge1xuICAgIHN3aXRjaCAodFswXSkge1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVtcHR5OlxuICAgICAgICAgICAgcmV0dXJuIGhhc2goZG9tYWluX3NlcCgnaWMtaGFzaHRyZWUtZW1wdHknKSk7XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuUHJ1bmVkOlxuICAgICAgICAgICAgcmV0dXJuIHRbMV07XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuTGVhZjpcbiAgICAgICAgICAgIHJldHVybiBoYXNoKGNvbmNhdChkb21haW5fc2VwKCdpYy1oYXNodHJlZS1sZWFmJyksIHRbMV0pKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5MYWJlbGVkOlxuICAgICAgICAgICAgcmV0dXJuIGhhc2goY29uY2F0KGRvbWFpbl9zZXAoJ2ljLWhhc2h0cmVlLWxhYmVsZWQnKSwgdFsxXSwgYXdhaXQgcmVjb25zdHJ1Y3QodFsyXSkpKTtcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5Gb3JrOlxuICAgICAgICAgICAgcmV0dXJuIGhhc2goY29uY2F0KGRvbWFpbl9zZXAoJ2ljLWhhc2h0cmVlLWZvcmsnKSwgYXdhaXQgcmVjb25zdHJ1Y3QodFsxXSksIGF3YWl0IHJlY29uc3RydWN0KHRbMl0pKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVhY2hhYmxlJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZG9tYWluX3NlcChzKSB7XG4gICAgY29uc3QgbGVuID0gbmV3IFVpbnQ4QXJyYXkoW3MubGVuZ3RoXSk7XG4gICAgY29uc3Qgc3RyID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHMpO1xuICAgIHJldHVybiBjb25jYXQobGVuLCBzdHIpO1xufVxuZXhwb3J0IHZhciBMb29rdXBTdGF0dXM7XG4oZnVuY3Rpb24gKExvb2t1cFN0YXR1cykge1xuICAgIExvb2t1cFN0YXR1c1tcIlVua25vd25cIl0gPSBcInVua25vd25cIjtcbiAgICBMb29rdXBTdGF0dXNbXCJBYnNlbnRcIl0gPSBcImFic2VudFwiO1xuICAgIExvb2t1cFN0YXR1c1tcIkZvdW5kXCJdID0gXCJmb3VuZFwiO1xufSkoTG9va3VwU3RhdHVzIHx8IChMb29rdXBTdGF0dXMgPSB7fSkpO1xudmFyIExhYmVsTG9va3VwU3RhdHVzO1xuKGZ1bmN0aW9uIChMYWJlbExvb2t1cFN0YXR1cykge1xuICAgIExhYmVsTG9va3VwU3RhdHVzW1wiTGVzc1wiXSA9IFwibGVzc1wiO1xuICAgIExhYmVsTG9va3VwU3RhdHVzW1wiR3JlYXRlclwiXSA9IFwiZ3JlYXRlclwiO1xufSkoTGFiZWxMb29rdXBTdGF0dXMgfHwgKExhYmVsTG9va3VwU3RhdHVzID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBsb29rdXBfcGF0aChwYXRoLCB0cmVlKSB7XG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHN3aXRjaCAodHJlZVswXSkge1xuICAgICAgICAgICAgY2FzZSBOb2RlVHlwZS5MZWFmOiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0cmVlWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0cmVlIHN0cnVjdHVyZSBmb3IgbGVhZicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHJlZVsxXSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IExvb2t1cFN0YXR1cy5Gb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cmVlWzFdLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHJlZVsxXSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogTG9va3VwU3RhdHVzLkZvdW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRyZWVbMV0uYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IExvb2t1cFN0YXR1cy5Gb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRyZWVbMV0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IExvb2t1cFN0YXR1cy5Gb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRyZWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYWJlbCA9IHR5cGVvZiBwYXRoWzBdID09PSAnc3RyaW5nJyA/IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShwYXRoWzBdKSA6IHBhdGhbMF07XG4gICAgY29uc3QgbG9va3VwUmVzdWx0ID0gZmluZF9sYWJlbChsYWJlbCwgdHJlZSk7XG4gICAgc3dpdGNoIChsb29rdXBSZXN1bHQuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgTG9va3VwU3RhdHVzLkZvdW5kOiB7XG4gICAgICAgICAgICByZXR1cm4gbG9va3VwX3BhdGgocGF0aC5zbGljZSgxKSwgbG9va3VwUmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIExhYmVsTG9va3VwU3RhdHVzLkdyZWF0ZXI6XG4gICAgICAgIGNhc2UgTGFiZWxMb29rdXBTdGF0dXMuTGVzczoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IExvb2t1cFN0YXR1cy5BYnNlbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHJldHVybiBsb29rdXBSZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIElmIHRoZSB0cmVlIGlzIGEgZm9yaywgZmxhdHRlbiBpdCBpbnRvIGFuIGFycmF5IG9mIHRyZWVzXG4gKiBAcGFyYW0gdCAtIHRoZSB0cmVlIHRvIGZsYXR0ZW5cbiAqIEByZXR1cm5zIEhhc2hUcmVlW10gLSB0aGUgZmxhdHRlbmVkIHRyZWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5fZm9ya3ModCkge1xuICAgIHN3aXRjaCAodFswXSkge1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkVtcHR5OlxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICBjYXNlIE5vZGVUeXBlLkZvcms6XG4gICAgICAgICAgICByZXR1cm4gZmxhdHRlbl9mb3Jrcyh0WzFdKS5jb25jYXQoZmxhdHRlbl9mb3Jrcyh0WzJdKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gW3RdO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kX2xhYmVsKGxhYmVsLCB0cmVlKSB7XG4gICAgc3dpdGNoICh0cmVlWzBdKSB7XG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBsYWJlbGxlZCBub2RlLCBjb21wYXJlIHRoZSBub2RlJ3MgbGFiZWwgdG8gdGhlIG9uZSB3ZSBhcmVcbiAgICAgICAgLy8gbG9va2luZyBmb3JcbiAgICAgICAgY2FzZSBOb2RlVHlwZS5MYWJlbGVkOlxuICAgICAgICAgICAgLy8gaWYgdGhlIGxhYmVsIHdlJ3JlIHNlYXJjaGluZyBmb3IgaXMgZ3JlYXRlciB0aGFuIHRoaXMgbm9kZSdzIGxhYmVsLFxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBrZWVwIHNlYXJjaGluZ1xuICAgICAgICAgICAgaWYgKGlzQnVmZmVyR3JlYXRlclRoYW4obGFiZWwsIHRyZWVbMV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBMYWJlbExvb2t1cFN0YXR1cy5HcmVhdGVyLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiB0aGUgbGFiZWwgd2UncmUgc2VhcmNoaW5nIGZvciBpcyBlcXVhbCB0aGlzIG5vZGUncyBsYWJlbCwgd2UgY2FuXG4gICAgICAgICAgICAvLyBzdG9wIHNlYXJjaGluZyBhbmQgcmV0dXJuIHRoZSBmb3VuZCBub2RlXG4gICAgICAgICAgICBpZiAoYnVmRXF1YWxzKGxhYmVsLCB0cmVlWzFdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogTG9va3VwU3RhdHVzLkZvdW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJlZVsyXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgdGhlIGxhYmVsIHdlJ3JlIHNlYXJjaGluZyBmb3IgaXMgbm90IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGlzXG4gICAgICAgICAgICAvLyBub2RlJ3MgbGFiZWwsIHRoZW4gaXQncyBsZXNzIHRoYW4gdGhpcyBub2RlJ3MgbGFiZWwsIGFuZCB3ZSBjYW4gc3RvcFxuICAgICAgICAgICAgLy8gc2VhcmNoaW5nIGJlY2F1c2Ugd2UndmUgbG9va2VkIHRvbyBmYXJcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBMYWJlbExvb2t1cFN0YXR1cy5MZXNzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIGZvcmsgbm9kZSwgd2UgbmVlZCB0byBzZWFyY2ggYm90aCBzaWRlcywgc3RhcnRpbmcgd2l0aCB0aGUgbGVmdFxuICAgICAgICBjYXNlIE5vZGVUeXBlLkZvcms6XG4gICAgICAgICAgICAvLyBzZWFyY2ggaW4gdGhlIGxlZnQgbm9kZVxuICAgICAgICAgICAgY29uc3QgbGVmdExvb2t1cFJlc3VsdCA9IGZpbmRfbGFiZWwobGFiZWwsIHRyZWVbMV0pO1xuICAgICAgICAgICAgc3dpdGNoIChsZWZ0TG9va3VwUmVzdWx0LnN0YXR1cykge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBsYWJlbCB3ZSdyZSBzZWFyY2hpbmcgZm9yIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbGVmdCBub2RlIGxvb2t1cCxcbiAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHNlYXJjaCB0aGUgcmlnaHQgbm9kZVxuICAgICAgICAgICAgICAgIGNhc2UgTGFiZWxMb29rdXBTdGF0dXMuR3JlYXRlcjoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByaWdodExvb2t1cFJlc3VsdCA9IGZpbmRfbGFiZWwobGFiZWwsIHRyZWVbMl0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbGFiZWwgd2UncmUgc2VhcmNoaW5nIGZvciBpcyBsZXNzIHRoYW4gdGhlIHJpZ2h0IG5vZGUgbG9va3VwLFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIHdlIGNhbiBzdG9wIHNlYXJjaGluZyBhbmQgc2F5IHRoYXQgdGhlIGxhYmVsIGlzIHByb3ZhYmx5IEFic2VudFxuICAgICAgICAgICAgICAgICAgICBpZiAocmlnaHRMb29rdXBSZXN1bHQuc3RhdHVzID09PSBMYWJlbExvb2t1cFN0YXR1cy5MZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogTG9va3VwU3RhdHVzLkFic2VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGxhYmVsIHdlJ3JlIHNlYXJjaGluZyBmb3IgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSByaWdodFxuICAgICAgICAgICAgICAgICAgICAvLyBub2RlIGxvb2t1cCwgdGhlbiB3ZSBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJpZ2h0TG9va3VwUmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbGVmdCBub2RlIHJldHVybnMgYW4gdW5jZXJ0YWluIHJlc3VsdCwgd2UgbmVlZCB0byBzZWFyY2ggdGhlXG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgbm9kZVxuICAgICAgICAgICAgICAgIGNhc2UgTG9va3VwU3RhdHVzLlVua25vd246IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0TG9va3VwUmVzdWx0ID0gZmluZF9sYWJlbChsYWJlbCwgdHJlZVsyXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBsYWJlbCB3ZSdyZSBzZWFyY2hpbmcgZm9yIGlzIGxlc3MgdGhhbiB0aGUgcmlnaHQgbm9kZSBsb29rdXAsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gd2UgYWxzbyBuZWVkIHRvIHJldHVybiBhbiB1bmNlcnRhaW4gcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIGlmIChyaWdodExvb2t1cFJlc3VsdC5zdGF0dXMgPT09IExhYmVsTG9va3VwU3RhdHVzLkxlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBMb29rdXBTdGF0dXMuVW5rbm93bixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGxhYmVsIHdlJ3JlIHNlYXJjaGluZyBmb3IgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSByaWdodFxuICAgICAgICAgICAgICAgICAgICAvLyBub2RlIGxvb2t1cCwgdGhlbiB3ZSBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJpZ2h0TG9va3VwUmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbGFiZWwgd2UncmUgc2VhcmNoaW5nIGZvciBpcyBub3QgZ3JlYXRlciB0aGFuIHRoZSBsZWZ0IG5vZGVcbiAgICAgICAgICAgICAgICAvLyBsb29rdXAsIG9yIHRoZSByZXN1bHQgaXMgbm90IHVuY2VydGFpbiwgd2Ugc3RvcCBzZWFyY2hpbmcgYW5kIHJldHVyblxuICAgICAgICAgICAgICAgIC8vIHdoYXRldmVyIHRoZSByZXN1bHQgb2YgdGhlIGxlZnQgbm9kZSBsb29rdXAgd2FzLCB3aGljaCBjYW4gYmUgZWl0aGVyXG4gICAgICAgICAgICAgICAgLy8gRm91bmQgb3IgQWJzZW50XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGVmdExvb2t1cFJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhIFBydW5lZCBub2RlLCB3ZSBjYW4ndCBrbm93IGZvciBjZXJ0YWluIGlmIHRoZSBsYWJlbFxuICAgICAgICAvLyB3ZSdyZSBzZWFyY2hpbmcgZm9yIGlzIHByZXNlbnQgb3Igbm90XG4gICAgICAgIGNhc2UgTm9kZVR5cGUuUHJ1bmVkOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IExvb2t1cFN0YXR1cy5Vbmtub3duLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgLy8gaWYgdGhlIGN1cnJlbnQgbm9kZSBpcyBFbXB0eSwgb3IgYSBMZWFmLCB3ZSBjYW4gc3RvcCBzZWFyY2hpbmcgYmVjYXVzZVxuICAgICAgICAvLyB3ZSBrbm93IGZvciBzdXJlIHRoYXQgdGhlIGxhYmVsIHdlJ3JlIHNlYXJjaGluZyBmb3IgaXMgbm90IHByZXNlbnRcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBMb29rdXBTdGF0dXMuQWJzZW50LFxuICAgICAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIENoZWNrIGlmIGEgY2FuaXN0ZXIgZmFsbHMgd2l0aGluIGEgcmFuZ2Ugb2YgY2FuaXN0ZXJzXG4gKiBAcGFyYW0gY2FuaXN0ZXJJZCBQcmluY2lwYWxcbiAqIEBwYXJhbSByYW5nZXMgW1ByaW5jaXBhbCwgUHJpbmNpcGFsXVtdXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tfY2FuaXN0ZXJfcmFuZ2VzKHBhcmFtcykge1xuICAgIGNvbnN0IHsgY2FuaXN0ZXJJZCwgc3VibmV0SWQsIHRyZWUgfSA9IHBhcmFtcztcbiAgICBjb25zdCByYW5nZUxvb2t1cCA9IGxvb2t1cF9wYXRoKFsnc3VibmV0Jywgc3VibmV0SWQudG9VaW50OEFycmF5KCksICdjYW5pc3Rlcl9yYW5nZXMnXSwgdHJlZSk7XG4gICAgaWYgKHJhbmdlTG9va3VwLnN0YXR1cyAhPT0gTG9va3VwU3RhdHVzLkZvdW5kIHx8ICEocmFuZ2VMb29rdXAudmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBjYW5pc3RlciByYW5nZXMgZm9yIHN1Ym5ldCAke3N1Ym5ldElkfWApO1xuICAgIH1cbiAgICBjb25zdCByYW5nZXNfYXJyID0gY2Jvci5kZWNvZGUocmFuZ2VMb29rdXAudmFsdWUpO1xuICAgIGNvbnN0IHJhbmdlcyA9IHJhbmdlc19hcnIubWFwKHYgPT4gW1xuICAgICAgICBQcmluY2lwYWwuZnJvbVVpbnQ4QXJyYXkodlswXSksXG4gICAgICAgIFByaW5jaXBhbC5mcm9tVWludDhBcnJheSh2WzFdKSxcbiAgICBdKTtcbiAgICBjb25zdCBjYW5pc3RlckluUmFuZ2UgPSByYW5nZXMuc29tZShyID0+IHJbMF0ubHRFcShjYW5pc3RlcklkKSAmJiByWzFdLmd0RXEoY2FuaXN0ZXJJZCkpO1xuICAgIHJldHVybiBjYW5pc3RlckluUmFuZ2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jZXJ0aWZpY2F0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/constants.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/constants.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS: () => (/* binding */ DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)\n/* harmony export */ });\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2NvbnN0YW50cy5qcz80NDExIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERlZmF1bHQgZGVsdGEgZm9yIGluZ3Jlc3MgZXhwaXJ5IGlzIDUgbWludXRlcy5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0lOR1JFU1NfRVhQSVJZX0RFTFRBX0lOX01TRUNTID0gNSAqIDYwICogMTAwMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/der.js":
/*!*****************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/der.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER_COSE_OID: () => (/* binding */ DER_COSE_OID),\n/* harmony export */   ED25519_OID: () => (/* binding */ ED25519_OID),\n/* harmony export */   SECP256K1_OID: () => (/* binding */ SECP256K1_OID),\n/* harmony export */   decodeLen: () => (/* binding */ decodeLen),\n/* harmony export */   decodeLenBytes: () => (/* binding */ decodeLenBytes),\n/* harmony export */   encodeLen: () => (/* binding */ encodeLen),\n/* harmony export */   encodeLenBytes: () => (/* binding */ encodeLenBytes),\n/* harmony export */   unwrapDER: () => (/* binding */ unwrapDER),\n/* harmony export */   wrapDER: () => (/* binding */ wrapDER)\n/* harmony export */ });\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n\nconst encodeLenBytes = (len) => {\n    if (len <= 0x7f) {\n        return 1;\n    }\n    else if (len <= 0xff) {\n        return 2;\n    }\n    else if (len <= 0xffff) {\n        return 3;\n    }\n    else if (len <= 0xffffff) {\n        return 4;\n    }\n    else {\n        throw new Error('Length too long (> 4 bytes)');\n    }\n};\nconst encodeLen = (buf, offset, len) => {\n    if (len <= 0x7f) {\n        buf[offset] = len;\n        return 1;\n    }\n    else if (len <= 0xff) {\n        buf[offset] = 0x81;\n        buf[offset + 1] = len;\n        return 2;\n    }\n    else if (len <= 0xffff) {\n        buf[offset] = 0x82;\n        buf[offset + 1] = len >> 8;\n        buf[offset + 2] = len;\n        return 3;\n    }\n    else if (len <= 0xffffff) {\n        buf[offset] = 0x83;\n        buf[offset + 1] = len >> 16;\n        buf[offset + 2] = len >> 8;\n        buf[offset + 3] = len;\n        return 4;\n    }\n    else {\n        throw new Error('Length too long (> 4 bytes)');\n    }\n};\nconst decodeLenBytes = (buf, offset) => {\n    if (buf[offset] < 0x80)\n        return 1;\n    if (buf[offset] === 0x80)\n        throw new Error('Invalid length 0');\n    if (buf[offset] === 0x81)\n        return 2;\n    if (buf[offset] === 0x82)\n        return 3;\n    if (buf[offset] === 0x83)\n        return 4;\n    throw new Error('Length too long (> 4 bytes)');\n};\nconst decodeLen = (buf, offset) => {\n    const lenBytes = decodeLenBytes(buf, offset);\n    if (lenBytes === 1)\n        return buf[offset];\n    else if (lenBytes === 2)\n        return buf[offset + 1];\n    else if (lenBytes === 3)\n        return (buf[offset + 1] << 8) + buf[offset + 2];\n    else if (lenBytes === 4)\n        return (buf[offset + 1] << 16) + (buf[offset + 2] << 8) + buf[offset + 3];\n    throw new Error('Length too long (> 4 bytes)');\n};\n/**\n * A DER encoded `SEQUENCE(OID)` for DER-encoded-COSE\n */\nconst DER_COSE_OID = Uint8Array.from([\n    ...[0x30, 0x0c],\n    ...[0x06, 0x0a],\n    ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xb8, 0x43, 0x01, 0x01], // DER encoded COSE\n]);\n/**\n * A DER encoded `SEQUENCE(OID)` for the Ed25519 algorithm\n */\nconst ED25519_OID = Uint8Array.from([\n    ...[0x30, 0x05],\n    ...[0x06, 0x03],\n    ...[0x2b, 0x65, 0x70], // id-Ed25519 OID\n]);\n/**\n * A DER encoded `SEQUENCE(OID)` for secp256k1 with the ECDSA algorithm\n */\nconst SECP256K1_OID = Uint8Array.from([\n    ...[0x30, 0x10],\n    ...[0x06, 0x07],\n    ...[0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01],\n    ...[0x06, 0x05],\n    ...[0x2b, 0x81, 0x04, 0x00, 0x0a], // OID secp256k1\n]);\n/**\n * Wraps the given `payload` in a DER encoding tagged with the given encoded `oid` like so:\n * `SEQUENCE(oid, BITSTRING(payload))`\n *\n * @param payload The payload to encode as the bit string\n * @param oid The DER encoded (and SEQUENCE wrapped!) OID to tag the payload with\n */\nfunction wrapDER(payload, oid) {\n    // The Bit String header needs to include the unused bit count byte in its length\n    const bitStringHeaderLength = 2 + encodeLenBytes(payload.byteLength + 1);\n    const len = oid.byteLength + bitStringHeaderLength + payload.byteLength;\n    let offset = 0;\n    const buf = new Uint8Array(1 + encodeLenBytes(len) + len);\n    // Sequence\n    buf[offset++] = 0x30;\n    // Sequence Length\n    offset += encodeLen(buf, offset, len);\n    // OID\n    buf.set(oid, offset);\n    offset += oid.byteLength;\n    // Bit String Header\n    buf[offset++] = 0x03;\n    offset += encodeLen(buf, offset, payload.byteLength + 1);\n    // 0 padding\n    buf[offset++] = 0x00;\n    buf.set(new Uint8Array(payload), offset);\n    return buf;\n}\n/**\n * Extracts a payload from the given `derEncoded` data, and checks that it was tagged with the given `oid`.\n *\n * `derEncoded = SEQUENCE(oid, BITSTRING(payload))`\n *\n * @param derEncoded The DER encoded and tagged data\n * @param oid The DER encoded (and SEQUENCE wrapped!) expected OID\n * @returns The unwrapped payload\n */\nconst unwrapDER = (derEncoded, oid) => {\n    let offset = 0;\n    const expect = (n, msg) => {\n        if (buf[offset++] !== n) {\n            throw new Error('Expected: ' + msg);\n        }\n    };\n    const buf = new Uint8Array(derEncoded);\n    expect(0x30, 'sequence');\n    offset += decodeLenBytes(buf, offset);\n    if (!(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_0__.bufEquals)(buf.slice(offset, offset + oid.byteLength), oid)) {\n        throw new Error('Not the expected OID.');\n    }\n    offset += oid.byteLength;\n    expect(0x03, 'bit string');\n    const payloadLen = decodeLen(buf, offset) - 1; // Subtracting 1 to account for the 0 padding\n    offset += decodeLenBytes(buf, offset);\n    expect(0x00, '0 padding');\n    const result = buf.slice(offset);\n    if (payloadLen !== result.length) {\n        throw new Error(`DER payload mismatch: Expected length ${payloadLen} actual length ${result.length}`);\n    }\n    return result;\n};\n//# sourceMappingURL=der.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/der.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/errors.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/errors.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActorCallError: () => (/* binding */ ActorCallError),\n/* harmony export */   AgentError: () => (/* binding */ AgentError),\n/* harmony export */   QueryCallRejectedError: () => (/* binding */ QueryCallRejectedError),\n/* harmony export */   UpdateCallRejectedError: () => (/* binding */ UpdateCallRejectedError)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _agent_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent/api */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/api.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n\n\n\n/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n * @todo https://github.com/dfinity/agent-js/issues/420\n */\nclass AgentError extends Error {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        this.name = 'AgentError';\n        this.__proto__ = AgentError.prototype;\n        Object.setPrototypeOf(this, AgentError.prototype);\n    }\n}\nclass ActorCallError extends AgentError {\n    constructor(canisterId, methodName, type, props) {\n        const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        super([\n            `Call failed:`,\n            `  Canister: ${cid.toText()}`,\n            `  Method: ${methodName} (${type})`,\n            ...Object.getOwnPropertyNames(props).map(n => `  \"${n}\": ${JSON.stringify(props[n])}`),\n        ].join('\\n'));\n        this.canisterId = canisterId;\n        this.methodName = methodName;\n        this.type = type;\n        this.props = props;\n        this.name = 'ActorCallError';\n        this.__proto__ = ActorCallError.prototype;\n        Object.setPrototypeOf(this, ActorCallError.prototype);\n    }\n}\nclass QueryCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, result) {\n        var _a;\n        const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        super(cid, methodName, 'query', {\n            Status: result.status,\n            Code: (_a = _agent_api__WEBPACK_IMPORTED_MODULE_1__.ReplicaRejectCode[result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code \"${result.reject_code}\"`,\n            Message: result.reject_message,\n        });\n        this.result = result;\n        this.name = 'QueryCallRejectedError';\n        this.__proto__ = QueryCallRejectedError.prototype;\n        Object.setPrototypeOf(this, QueryCallRejectedError.prototype);\n    }\n}\nclass UpdateCallRejectedError extends ActorCallError {\n    constructor(canisterId, methodName, requestId, response) {\n        const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n        super(cid, methodName, 'update', Object.assign({ 'Request ID': (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.toHex)(requestId) }, (response.body\n            ? Object.assign(Object.assign({}, (response.body.error_code\n                ? {\n                    'Error code': response.body.error_code,\n                }\n                : {})), { 'Reject code': String(response.body.reject_code), 'Reject message': response.body.reject_message }) : {\n            'HTTP status code': response.status.toString(),\n            'HTTP status text': response.statusText,\n        })));\n        this.requestId = requestId;\n        this.response = response;\n        this.name = 'UpdateCallRejectedError';\n        this.__proto__ = UpdateCallRejectedError.prototype;\n        Object.setPrototypeOf(this, UpdateCallRejectedError.prototype);\n    }\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0M7QUFDRTtBQUNWO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0JBQW9CLHlEQUFTO0FBQzdCO0FBQ0E7QUFDQSwyQkFBMkIsYUFBYTtBQUN4Qyx5QkFBeUIsWUFBWSxHQUFHLEtBQUs7QUFDN0MsZ0VBQWdFLEVBQUUsS0FBSyx5QkFBeUI7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxvQkFBb0IseURBQVM7QUFDN0I7QUFDQTtBQUNBLHdCQUF3Qix5REFBaUIsd0VBQXdFLG1CQUFtQjtBQUNwSTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0JBQW9CLHlEQUFTO0FBQzdCLHlEQUF5RCxjQUFjLG9EQUFLLGFBQWE7QUFDekYsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixNQUFNLGtHQUFrRztBQUM1SDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2Vycm9ycy5qcz9mZmU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaW5jaXBhbCB9IGZyb20gJ0BkZmluaXR5L3ByaW5jaXBhbCc7XG5pbXBvcnQgeyBSZXBsaWNhUmVqZWN0Q29kZSwgfSBmcm9tICcuL2FnZW50L2FwaSc7XG5pbXBvcnQgeyB0b0hleCB9IGZyb20gJy4vdXRpbHMvYnVmZmVyJztcbi8qKlxuICogQW4gZXJyb3IgdGhhdCBoYXBwZW5zIGluIHRoZSBBZ2VudC4gVGhpcyBpcyB0aGUgcm9vdCBvZiBhbGwgZXJyb3JzIGFuZCBzaG91bGQgYmUgdXNlZFxuICogZXZlcnl3aGVyZSBpbiB0aGUgQWdlbnQgY29kZSAodGhpcyBwYWNrYWdlKS5cbiAqIEB0b2RvIGh0dHBzOi8vZ2l0aHViLmNvbS9kZmluaXR5L2FnZW50LWpzL2lzc3Vlcy80MjBcbiAqL1xuZXhwb3J0IGNsYXNzIEFnZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0FnZW50RXJyb3InO1xuICAgICAgICB0aGlzLl9fcHJvdG9fXyA9IEFnZW50RXJyb3IucHJvdG90eXBlO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQWdlbnRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBY3RvckNhbGxFcnJvciBleHRlbmRzIEFnZW50RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNhbmlzdGVySWQsIG1ldGhvZE5hbWUsIHR5cGUsIHByb3BzKSB7XG4gICAgICAgIGNvbnN0IGNpZCA9IFByaW5jaXBhbC5mcm9tKGNhbmlzdGVySWQpO1xuICAgICAgICBzdXBlcihbXG4gICAgICAgICAgICBgQ2FsbCBmYWlsZWQ6YCxcbiAgICAgICAgICAgIGAgIENhbmlzdGVyOiAke2NpZC50b1RleHQoKX1gLFxuICAgICAgICAgICAgYCAgTWV0aG9kOiAke21ldGhvZE5hbWV9ICgke3R5cGV9KWAsXG4gICAgICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm9wcykubWFwKG4gPT4gYCAgXCIke259XCI6ICR7SlNPTi5zdHJpbmdpZnkocHJvcHNbbl0pfWApLFxuICAgICAgICBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgdGhpcy5jYW5pc3RlcklkID0gY2FuaXN0ZXJJZDtcbiAgICAgICAgdGhpcy5tZXRob2ROYW1lID0gbWV0aG9kTmFtZTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQWN0b3JDYWxsRXJyb3InO1xuICAgICAgICB0aGlzLl9fcHJvdG9fXyA9IEFjdG9yQ2FsbEVycm9yLnByb3RvdHlwZTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjdG9yQ2FsbEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFF1ZXJ5Q2FsbFJlamVjdGVkRXJyb3IgZXh0ZW5kcyBBY3RvckNhbGxFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY2FuaXN0ZXJJZCwgbWV0aG9kTmFtZSwgcmVzdWx0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY2lkID0gUHJpbmNpcGFsLmZyb20oY2FuaXN0ZXJJZCk7XG4gICAgICAgIHN1cGVyKGNpZCwgbWV0aG9kTmFtZSwgJ3F1ZXJ5Jywge1xuICAgICAgICAgICAgU3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICAgICAgQ29kZTogKF9hID0gUmVwbGljYVJlamVjdENvZGVbcmVzdWx0LnJlamVjdF9jb2RlXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYFVua25vd24gQ29kZSBcIiR7cmVzdWx0LnJlamVjdF9jb2RlfVwiYCxcbiAgICAgICAgICAgIE1lc3NhZ2U6IHJlc3VsdC5yZWplY3RfbWVzc2FnZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB0aGlzLm5hbWUgPSAnUXVlcnlDYWxsUmVqZWN0ZWRFcnJvcic7XG4gICAgICAgIHRoaXMuX19wcm90b19fID0gUXVlcnlDYWxsUmVqZWN0ZWRFcnJvci5wcm90b3R5cGU7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBRdWVyeUNhbGxSZWplY3RlZEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFVwZGF0ZUNhbGxSZWplY3RlZEVycm9yIGV4dGVuZHMgQWN0b3JDYWxsRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNhbmlzdGVySWQsIG1ldGhvZE5hbWUsIHJlcXVlc3RJZCwgcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgY2lkID0gUHJpbmNpcGFsLmZyb20oY2FuaXN0ZXJJZCk7XG4gICAgICAgIHN1cGVyKGNpZCwgbWV0aG9kTmFtZSwgJ3VwZGF0ZScsIE9iamVjdC5hc3NpZ24oeyAnUmVxdWVzdCBJRCc6IHRvSGV4KHJlcXVlc3RJZCkgfSwgKHJlc3BvbnNlLmJvZHlcbiAgICAgICAgICAgID8gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAocmVzcG9uc2UuYm9keS5lcnJvcl9jb2RlXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICdFcnJvciBjb2RlJzogcmVzcG9uc2UuYm9keS5lcnJvcl9jb2RlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHt9KSksIHsgJ1JlamVjdCBjb2RlJzogU3RyaW5nKHJlc3BvbnNlLmJvZHkucmVqZWN0X2NvZGUpLCAnUmVqZWN0IG1lc3NhZ2UnOiByZXNwb25zZS5ib2R5LnJlamVjdF9tZXNzYWdlIH0pIDoge1xuICAgICAgICAgICAgJ0hUVFAgc3RhdHVzIGNvZGUnOiByZXNwb25zZS5zdGF0dXMudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICdIVFRQIHN0YXR1cyB0ZXh0JzogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgfSkpKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1VwZGF0ZUNhbGxSZWplY3RlZEVycm9yJztcbiAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBVcGRhdGVDYWxsUmVqZWN0ZWRFcnJvci5wcm90b3R5cGU7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBVcGRhdGVDYWxsUmVqZWN0ZWRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/errors.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/fetch_candid.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/fetch_candid.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCandid: () => (/* binding */ fetchCandid)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _canisterStatus_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canisterStatus/index */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\");\n/* harmony import */ var _agent_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./agent/http */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/index.js\");\n/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actor */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/actor.js\");\n\n\n\n\n/**\n * Retrieves the Candid interface for the specified canister.\n *\n * @param agent The agent to use for the request (usually an `HttpAgent`)\n * @param canisterId A string corresponding to the canister ID\n * @returns Candid source code\n */\nasync function fetchCandid(canisterId, agent) {\n    if (!agent) {\n        // Create an anonymous `HttpAgent` (adapted from Candid UI)\n        agent = await _agent_http__WEBPACK_IMPORTED_MODULE_2__.HttpAgent.create();\n    }\n    // Attempt to use canister metadata\n    const status = await _canisterStatus_index__WEBPACK_IMPORTED_MODULE_1__.request({\n        agent,\n        canisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText(canisterId),\n        paths: ['candid'],\n    });\n    const candid = status.get('candid');\n    if (candid) {\n        return candid;\n    }\n    // Use `__get_candid_interface_tmp_hack` for canisters without Candid metadata\n    const tmpHackInterface = ({ IDL }) => IDL.Service({\n        __get_candid_interface_tmp_hack: IDL.Func([], [IDL.Text], ['query']),\n    });\n    const actor = _actor__WEBPACK_IMPORTED_MODULE_3__.Actor.createActor(tmpHackInterface, { agent, canisterId });\n    return (await actor.__get_candid_interface_tmp_hack());\n}\n//# sourceMappingURL=fetch_candid.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vZmV0Y2hfY2FuZGlkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStDO0FBQ1U7QUFDaEI7QUFDVDtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHNCQUFzQixrREFBUztBQUMvQjtBQUNBO0FBQ0EseUJBQXlCLDBEQUFzQjtBQUMvQztBQUNBLG9CQUFvQix5REFBUztBQUM3QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLEtBQUs7QUFDckM7QUFDQSxLQUFLO0FBQ0wsa0JBQWtCLHlDQUFLLGlDQUFpQyxtQkFBbUI7QUFDM0U7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9mZXRjaF9jYW5kaWQuanM/NmI2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmluY2lwYWwgfSBmcm9tICdAZGZpbml0eS9wcmluY2lwYWwnO1xuaW1wb3J0ICogYXMgQ2FuaXN0ZXJTdGF0dXMgZnJvbSAnLi9jYW5pc3RlclN0YXR1cy9pbmRleCc7XG5pbXBvcnQgeyBIdHRwQWdlbnQgfSBmcm9tICcuL2FnZW50L2h0dHAnO1xuaW1wb3J0IHsgQWN0b3IgfSBmcm9tICcuL2FjdG9yJztcbi8qKlxuICogUmV0cmlldmVzIHRoZSBDYW5kaWQgaW50ZXJmYWNlIGZvciB0aGUgc3BlY2lmaWVkIGNhbmlzdGVyLlxuICpcbiAqIEBwYXJhbSBhZ2VudCBUaGUgYWdlbnQgdG8gdXNlIGZvciB0aGUgcmVxdWVzdCAodXN1YWxseSBhbiBgSHR0cEFnZW50YClcbiAqIEBwYXJhbSBjYW5pc3RlcklkIEEgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGNhbmlzdGVyIElEXG4gKiBAcmV0dXJucyBDYW5kaWQgc291cmNlIGNvZGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQ2FuZGlkKGNhbmlzdGVySWQsIGFnZW50KSB7XG4gICAgaWYgKCFhZ2VudCkge1xuICAgICAgICAvLyBDcmVhdGUgYW4gYW5vbnltb3VzIGBIdHRwQWdlbnRgIChhZGFwdGVkIGZyb20gQ2FuZGlkIFVJKVxuICAgICAgICBhZ2VudCA9IGF3YWl0IEh0dHBBZ2VudC5jcmVhdGUoKTtcbiAgICB9XG4gICAgLy8gQXR0ZW1wdCB0byB1c2UgY2FuaXN0ZXIgbWV0YWRhdGFcbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBDYW5pc3RlclN0YXR1cy5yZXF1ZXN0KHtcbiAgICAgICAgYWdlbnQsXG4gICAgICAgIGNhbmlzdGVySWQ6IFByaW5jaXBhbC5mcm9tVGV4dChjYW5pc3RlcklkKSxcbiAgICAgICAgcGF0aHM6IFsnY2FuZGlkJ10sXG4gICAgfSk7XG4gICAgY29uc3QgY2FuZGlkID0gc3RhdHVzLmdldCgnY2FuZGlkJyk7XG4gICAgaWYgKGNhbmRpZCkge1xuICAgICAgICByZXR1cm4gY2FuZGlkO1xuICAgIH1cbiAgICAvLyBVc2UgYF9fZ2V0X2NhbmRpZF9pbnRlcmZhY2VfdG1wX2hhY2tgIGZvciBjYW5pc3RlcnMgd2l0aG91dCBDYW5kaWQgbWV0YWRhdGFcbiAgICBjb25zdCB0bXBIYWNrSW50ZXJmYWNlID0gKHsgSURMIH0pID0+IElETC5TZXJ2aWNlKHtcbiAgICAgICAgX19nZXRfY2FuZGlkX2ludGVyZmFjZV90bXBfaGFjazogSURMLkZ1bmMoW10sIFtJREwuVGV4dF0sIFsncXVlcnknXSksXG4gICAgfSk7XG4gICAgY29uc3QgYWN0b3IgPSBBY3Rvci5jcmVhdGVBY3Rvcih0bXBIYWNrSW50ZXJmYWNlLCB7IGFnZW50LCBjYW5pc3RlcklkIH0pO1xuICAgIHJldHVybiAoYXdhaXQgYWN0b3IuX19nZXRfY2FuZGlkX2ludGVyZmFjZV90bXBfaGFjaygpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoX2NhbmRpZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/fetch_candid.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js":
/*!*******************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTOR_METHOD_WITH_CERTIFICATE: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.ACTOR_METHOD_WITH_CERTIFICATE),\n/* harmony export */   ACTOR_METHOD_WITH_HTTP_DETAILS: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.ACTOR_METHOD_WITH_HTTP_DETAILS),\n/* harmony export */   Actor: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.Actor),\n/* harmony export */   ActorCallError: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.ActorCallError),\n/* harmony export */   AdvancedActor: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.AdvancedActor),\n/* harmony export */   AgentHTTPResponseError: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.AgentHTTPResponseError),\n/* harmony export */   AnonymousIdentity: () => (/* reexport safe */ _auth__WEBPACK_IMPORTED_MODULE_4__.AnonymousIdentity),\n/* harmony export */   CanisterStatus: () => (/* reexport module object */ _canisterStatus__WEBPACK_IMPORTED_MODULE_15__),\n/* harmony export */   Cbor: () => (/* reexport module object */ _cbor__WEBPACK_IMPORTED_MODULE_16__),\n/* harmony export */   Certificate: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.Certificate),\n/* harmony export */   CertificateVerificationError: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.CertificateVerificationError),\n/* harmony export */   DER_COSE_OID: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.DER_COSE_OID),\n/* harmony export */   ED25519_OID: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.ED25519_OID),\n/* harmony export */   Ed25519PublicKey: () => (/* reexport safe */ _public_key__WEBPACK_IMPORTED_MODULE_9__.Ed25519PublicKey),\n/* harmony export */   Expiry: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.Expiry),\n/* harmony export */   HttpAgent: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.HttpAgent),\n/* harmony export */   IC_ROOT_KEY: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.IC_ROOT_KEY),\n/* harmony export */   IdentityInvalidError: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.IdentityInvalidError),\n/* harmony export */   LookupStatus: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.LookupStatus),\n/* harmony export */   MANAGEMENT_CANISTER_ID: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.MANAGEMENT_CANISTER_ID),\n/* harmony export */   NodeType: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.NodeType),\n/* harmony export */   ProxyAgent: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.ProxyAgent),\n/* harmony export */   ProxyMessageKind: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.ProxyMessageKind),\n/* harmony export */   ProxyStubAgent: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.ProxyStubAgent),\n/* harmony export */   QueryCallRejectedError: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.QueryCallRejectedError),\n/* harmony export */   ReplicaRejectCode: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.ReplicaRejectCode),\n/* harmony export */   RequestStatusResponseStatus: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.RequestStatusResponseStatus),\n/* harmony export */   SECP256K1_OID: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.SECP256K1_OID),\n/* harmony export */   SignIdentity: () => (/* reexport safe */ _auth__WEBPACK_IMPORTED_MODULE_4__.SignIdentity),\n/* harmony export */   SubmitRequestType: () => (/* reexport safe */ _agent_http_types__WEBPACK_IMPORTED_MODULE_3__.SubmitRequestType),\n/* harmony export */   UpdateCallRejectedError: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.UpdateCallRejectedError),\n/* harmony export */   blsVerify: () => (/* reexport safe */ _utils_bls__WEBPACK_IMPORTED_MODULE_11__.blsVerify),\n/* harmony export */   bufEquals: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_12__.bufEquals),\n/* harmony export */   bufFromBufLike: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_12__.bufFromBufLike),\n/* harmony export */   check_canister_ranges: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.check_canister_ranges),\n/* harmony export */   compare: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_12__.compare),\n/* harmony export */   concat: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_12__.concat),\n/* harmony export */   createAssetCanisterActor: () => (/* reexport safe */ _canisters_asset__WEBPACK_IMPORTED_MODULE_5__.createAssetCanisterActor),\n/* harmony export */   createIdentityDescriptor: () => (/* reexport safe */ _auth__WEBPACK_IMPORTED_MODULE_4__.createIdentityDescriptor),\n/* harmony export */   decodeLen: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.decodeLen),\n/* harmony export */   decodeLenBytes: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.decodeLenBytes),\n/* harmony export */   defaultStrategy: () => (/* reexport safe */ _polling__WEBPACK_IMPORTED_MODULE_14__.defaultStrategy),\n/* harmony export */   encodeLen: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.encodeLen),\n/* harmony export */   encodeLenBytes: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.encodeLenBytes),\n/* harmony export */   fetchCandid: () => (/* reexport safe */ _fetch_candid__WEBPACK_IMPORTED_MODULE_8__.fetchCandid),\n/* harmony export */   find_label: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.find_label),\n/* harmony export */   flatten_forks: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.flatten_forks),\n/* harmony export */   fromHex: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_12__.fromHex),\n/* harmony export */   getDefaultAgent: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.getDefaultAgent),\n/* harmony export */   getManagementCanister: () => (/* reexport safe */ _actor__WEBPACK_IMPORTED_MODULE_0__.getManagementCanister),\n/* harmony export */   hash: () => (/* reexport safe */ _request_id__WEBPACK_IMPORTED_MODULE_10__.hash),\n/* harmony export */   hashOfMap: () => (/* reexport safe */ _request_id__WEBPACK_IMPORTED_MODULE_10__.hashOfMap),\n/* harmony export */   hashTreeToString: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.hashTreeToString),\n/* harmony export */   hashValue: () => (/* reexport safe */ _request_id__WEBPACK_IMPORTED_MODULE_10__.hashValue),\n/* harmony export */   httpHeadersTransform: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.httpHeadersTransform),\n/* harmony export */   lookupResultToBuffer: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.lookupResultToBuffer),\n/* harmony export */   lookup_path: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.lookup_path),\n/* harmony export */   makeExpiryTransform: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.makeExpiryTransform),\n/* harmony export */   makeNonce: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.makeNonce),\n/* harmony export */   makeNonceTransform: () => (/* reexport safe */ _agent__WEBPACK_IMPORTED_MODULE_1__.makeNonceTransform),\n/* harmony export */   pollForResponse: () => (/* reexport safe */ _polling__WEBPACK_IMPORTED_MODULE_14__.pollForResponse),\n/* harmony export */   polling: () => (/* reexport module object */ _polling__WEBPACK_IMPORTED_MODULE_14__),\n/* harmony export */   randomNumber: () => (/* reexport safe */ _utils_random__WEBPACK_IMPORTED_MODULE_13__.randomNumber),\n/* harmony export */   reconstruct: () => (/* reexport safe */ _certificate__WEBPACK_IMPORTED_MODULE_6__.reconstruct),\n/* harmony export */   requestIdOf: () => (/* reexport safe */ _request_id__WEBPACK_IMPORTED_MODULE_10__.requestIdOf),\n/* harmony export */   strategy: () => (/* reexport safe */ _polling__WEBPACK_IMPORTED_MODULE_14__.strategy),\n/* harmony export */   toHex: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_12__.toHex),\n/* harmony export */   uint8ToBuf: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_12__.uint8ToBuf),\n/* harmony export */   unwrapDER: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.unwrapDER),\n/* harmony export */   verify: () => (/* reexport safe */ _utils_bls__WEBPACK_IMPORTED_MODULE_11__.verify),\n/* harmony export */   wrapDER: () => (/* reexport safe */ _der__WEBPACK_IMPORTED_MODULE_7__.wrapDER)\n/* harmony export */ });\n/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actor */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/actor.js\");\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js\");\n/* harmony import */ var _agent_http_transforms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./agent/http/transforms */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\");\n/* harmony import */ var _agent_http_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./agent/http/types */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./auth */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/auth.js\");\n/* harmony import */ var _canisters_asset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./canisters/asset */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisters/asset.js\");\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./certificate */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _der__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./der */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/der.js\");\n/* harmony import */ var _fetch_candid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fetch_candid */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/fetch_candid.js\");\n/* harmony import */ var _public_key__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./public_key */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/public_key.js\");\n/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./request_id */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _utils_bls__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/bls */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/bls.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _utils_random__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/random */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/random.js\");\n/* harmony import */ var _polling__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./polling */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/index.js\");\n/* harmony import */ var _canisterStatus__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./canisterStatus */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\");\n/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cbor */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/cbor.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QjtBQUNBO0FBQ2dCO0FBQ0w7QUFDWjtBQUNXO0FBQ0o7QUFDUjtBQUNTO0FBQ0Y7QUFDQTtBQUNEO0FBQ0c7QUFDQTtBQUNNO0FBQ2M7QUFDcEI7QUFDTDtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vaW5kZXguanM/NGRmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FjdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vYWdlbnQnO1xuZXhwb3J0ICogZnJvbSAnLi9hZ2VudC9odHRwL3RyYW5zZm9ybXMnO1xuZXhwb3J0ICogZnJvbSAnLi9hZ2VudC9odHRwL3R5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vYXV0aCc7XG5leHBvcnQgKiBmcm9tICcuL2NhbmlzdGVycy9hc3NldCc7XG5leHBvcnQgKiBmcm9tICcuL2NlcnRpZmljYXRlJztcbmV4cG9ydCAqIGZyb20gJy4vZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vZmV0Y2hfY2FuZGlkJztcbmV4cG9ydCAqIGZyb20gJy4vcHVibGljX2tleSc7XG5leHBvcnQgKiBmcm9tICcuL3JlcXVlc3RfaWQnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9ibHMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9idWZmZXInO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9yYW5kb20nO1xuZXhwb3J0ICogYXMgcG9sbGluZyBmcm9tICcuL3BvbGxpbmcnO1xuZXhwb3J0ICogYXMgQ2FuaXN0ZXJTdGF0dXMgZnJvbSAnLi9jYW5pc3RlclN0YXR1cyc7XG5leHBvcnQgKiBhcyBDYm9yIGZyb20gJy4vY2Jvcic7XG5leHBvcnQgKiBmcm9tICcuL3BvbGxpbmcnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/observable.js":
/*!************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/observable.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Observable: () => (/* binding */ Observable),\n/* harmony export */   ObservableLog: () => (/* binding */ ObservableLog)\n/* harmony export */ });\nclass Observable {\n    constructor() {\n        this.observers = [];\n    }\n    subscribe(func) {\n        this.observers.push(func);\n    }\n    unsubscribe(func) {\n        this.observers = this.observers.filter(observer => observer !== func);\n    }\n    notify(data, ...rest) {\n        this.observers.forEach(observer => observer(data, ...rest));\n    }\n}\nclass ObservableLog extends Observable {\n    constructor() {\n        super();\n    }\n    print(message, ...rest) {\n        this.notify({ message, level: 'info' }, ...rest);\n    }\n    warn(message, ...rest) {\n        this.notify({ message, level: 'warn' }, ...rest);\n    }\n    error(message, error, ...rest) {\n        this.notify({ message, level: 'error', error }, ...rest);\n    }\n}\n//# sourceMappingURL=observable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vb2JzZXJ2YWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0Esc0JBQXNCLGdDQUFnQztBQUN0RDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL29ic2VydmFibGUuanM/ZmQ4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgT2JzZXJ2YWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgfVxuICAgIHN1YnNjcmliZShmdW5jKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goZnVuYyk7XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlKGZ1bmMpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycy5maWx0ZXIob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIgIT09IGZ1bmMpO1xuICAgIH1cbiAgICBub3RpZnkoZGF0YSwgLi4ucmVzdCkge1xuICAgICAgICB0aGlzLm9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IG9ic2VydmVyKGRhdGEsIC4uLnJlc3QpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZUxvZyBleHRlbmRzIE9ic2VydmFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICBwcmludChtZXNzYWdlLCAuLi5yZXN0KSB7XG4gICAgICAgIHRoaXMubm90aWZ5KHsgbWVzc2FnZSwgbGV2ZWw6ICdpbmZvJyB9LCAuLi5yZXN0KTtcbiAgICB9XG4gICAgd2FybihtZXNzYWdlLCAuLi5yZXN0KSB7XG4gICAgICAgIHRoaXMubm90aWZ5KHsgbWVzc2FnZSwgbGV2ZWw6ICd3YXJuJyB9LCAuLi5yZXN0KTtcbiAgICB9XG4gICAgZXJyb3IobWVzc2FnZSwgZXJyb3IsIC4uLnJlc3QpIHtcbiAgICAgICAgdGhpcy5ub3RpZnkoeyBtZXNzYWdlLCBsZXZlbDogJ2Vycm9yJywgZXJyb3IgfSwgLi4ucmVzdCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/observable.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/backoff.js":
/*!*****************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/polling/backoff.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExponentialBackoff: () => (/* binding */ ExponentialBackoff),\n/* harmony export */   exponentialBackoff: () => (/* binding */ exponentialBackoff)\n/* harmony export */ });\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ExponentialBackoff_currentInterval, _ExponentialBackoff_randomizationFactor, _ExponentialBackoff_multiplier, _ExponentialBackoff_maxInterval, _ExponentialBackoff_startTime, _ExponentialBackoff_maxElapsedTime, _ExponentialBackoff_maxIterations, _ExponentialBackoff_date, _ExponentialBackoff_count;\nconst RANDOMIZATION_FACTOR = 0.5;\nconst MULTIPLIER = 1.5;\nconst INITIAL_INTERVAL_MSEC = 500;\nconst MAX_INTERVAL_MSEC = 60000;\nconst MAX_ELAPSED_TIME_MSEC = 900000;\nconst MAX_ITERATIONS = 10;\n/**\n * Exponential backoff strategy.\n */\nclass ExponentialBackoff {\n    constructor(options = ExponentialBackoff.default) {\n        _ExponentialBackoff_currentInterval.set(this, void 0);\n        _ExponentialBackoff_randomizationFactor.set(this, void 0);\n        _ExponentialBackoff_multiplier.set(this, void 0);\n        _ExponentialBackoff_maxInterval.set(this, void 0);\n        _ExponentialBackoff_startTime.set(this, void 0);\n        _ExponentialBackoff_maxElapsedTime.set(this, void 0);\n        _ExponentialBackoff_maxIterations.set(this, void 0);\n        _ExponentialBackoff_date.set(this, void 0);\n        _ExponentialBackoff_count.set(this, 0);\n        const { initialInterval = INITIAL_INTERVAL_MSEC, randomizationFactor = RANDOMIZATION_FACTOR, multiplier = MULTIPLIER, maxInterval = MAX_INTERVAL_MSEC, maxElapsedTime = MAX_ELAPSED_TIME_MSEC, maxIterations = MAX_ITERATIONS, date = Date, } = options;\n        __classPrivateFieldSet(this, _ExponentialBackoff_currentInterval, initialInterval, \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_randomizationFactor, randomizationFactor, \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_multiplier, multiplier, \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_maxInterval, maxInterval, \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_date, date, \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_startTime, date.now(), \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_maxElapsedTime, maxElapsedTime, \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_maxIterations, maxIterations, \"f\");\n    }\n    get ellapsedTimeInMsec() {\n        return __classPrivateFieldGet(this, _ExponentialBackoff_date, \"f\").now() - __classPrivateFieldGet(this, _ExponentialBackoff_startTime, \"f\");\n    }\n    get currentInterval() {\n        return __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\");\n    }\n    get count() {\n        return __classPrivateFieldGet(this, _ExponentialBackoff_count, \"f\");\n    }\n    get randomValueFromInterval() {\n        const delta = __classPrivateFieldGet(this, _ExponentialBackoff_randomizationFactor, \"f\") * __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\");\n        const min = __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\") - delta;\n        const max = __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\") + delta;\n        return Math.random() * (max - min) + min;\n    }\n    incrementCurrentInterval() {\n        var _a;\n        __classPrivateFieldSet(this, _ExponentialBackoff_currentInterval, Math.min(__classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\") * __classPrivateFieldGet(this, _ExponentialBackoff_multiplier, \"f\"), __classPrivateFieldGet(this, _ExponentialBackoff_maxInterval, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _ExponentialBackoff_count, (_a = __classPrivateFieldGet(this, _ExponentialBackoff_count, \"f\"), _a++, _a), \"f\");\n        return __classPrivateFieldGet(this, _ExponentialBackoff_currentInterval, \"f\");\n    }\n    next() {\n        if (this.ellapsedTimeInMsec >= __classPrivateFieldGet(this, _ExponentialBackoff_maxElapsedTime, \"f\") || __classPrivateFieldGet(this, _ExponentialBackoff_count, \"f\") >= __classPrivateFieldGet(this, _ExponentialBackoff_maxIterations, \"f\")) {\n            return null;\n        }\n        else {\n            this.incrementCurrentInterval();\n            return this.randomValueFromInterval;\n        }\n    }\n}\n_ExponentialBackoff_currentInterval = new WeakMap(), _ExponentialBackoff_randomizationFactor = new WeakMap(), _ExponentialBackoff_multiplier = new WeakMap(), _ExponentialBackoff_maxInterval = new WeakMap(), _ExponentialBackoff_startTime = new WeakMap(), _ExponentialBackoff_maxElapsedTime = new WeakMap(), _ExponentialBackoff_maxIterations = new WeakMap(), _ExponentialBackoff_date = new WeakMap(), _ExponentialBackoff_count = new WeakMap();\nExponentialBackoff.default = {\n    initialInterval: INITIAL_INTERVAL_MSEC,\n    randomizationFactor: RANDOMIZATION_FACTOR,\n    multiplier: MULTIPLIER,\n    maxInterval: MAX_INTERVAL_MSEC,\n    // 1 minute\n    maxElapsedTime: MAX_ELAPSED_TIME_MSEC,\n    maxIterations: MAX_ITERATIONS,\n    date: Date,\n};\n/**\n * Utility function to create an exponential backoff iterator.\n * @param options - for the exponential backoff\n * @returns an iterator that yields the next delay in the exponential backoff\n * @yields the next delay in the exponential backoff\n */\nfunction* exponentialBackoff(options = ExponentialBackoff.default) {\n    const backoff = new ExponentialBackoff(options);\n    let next = backoff.next();\n    while (next) {\n        yield next;\n        next = backoff.next();\n    }\n}\n//# sourceMappingURL=backoff.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/backoff.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/index.js":
/*!***************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/polling/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultStrategy: () => (/* reexport safe */ _strategy__WEBPACK_IMPORTED_MODULE_3__.defaultStrategy),\n/* harmony export */   pollForResponse: () => (/* binding */ pollForResponse),\n/* harmony export */   strategy: () => (/* reexport module object */ _strategy__WEBPACK_IMPORTED_MODULE_3__)\n/* harmony export */ });\n/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/agent/index.js\");\n/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../certificate */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _strategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strategy */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/strategy.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/constants.js\");\n\n\n\n\n\n\n\n/**\n * Polls the IC to check the status of the given request then\n * returns the response bytes once the request has been processed.\n * @param agent The agent to use to poll read_state.\n * @param canisterId The effective canister ID.\n * @param requestId The Request ID to poll status for.\n * @param strategy A polling strategy.\n * @param request Request for the readState call.\n * @param blsVerify - optional replacement function that verifies the BLS signature of a certificate.\n */\nasync function pollForResponse(agent, canisterId, requestId, strategy = (0,_strategy__WEBPACK_IMPORTED_MODULE_3__.defaultStrategy)(), \n// eslint-disable-next-line\nrequest, blsVerify) {\n    var _a;\n    const path = [new TextEncoder().encode('request_status'), requestId];\n    const currentRequest = request !== null && request !== void 0 ? request : (await ((_a = agent.createReadStateRequest) === null || _a === void 0 ? void 0 : _a.call(agent, { paths: [path] })));\n    // Use a fresh expiry for the readState call.\n    currentRequest.body.content.ingress_expiry = new _agent__WEBPACK_IMPORTED_MODULE_0__.Expiry(_constants__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);\n    const state = await agent.readState(canisterId, { paths: [path] }, undefined, currentRequest);\n    if (agent.rootKey == null)\n        throw new Error('Agent root key not initialized before polling');\n    const cert = await _certificate__WEBPACK_IMPORTED_MODULE_1__.Certificate.create({\n        certificate: state.certificate,\n        rootKey: agent.rootKey,\n        canisterId: canisterId,\n        blsVerify,\n    });\n    const maybeBuf = (0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, new TextEncoder().encode('status')]));\n    let status;\n    if (typeof maybeBuf === 'undefined') {\n        // Missing requestId means we need to wait\n        status = _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Unknown;\n    }\n    else {\n        status = new TextDecoder().decode(maybeBuf);\n    }\n    switch (status) {\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Replied: {\n            return {\n                reply: (0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, 'reply'])),\n                certificate: cert,\n            };\n        }\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Received:\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Unknown:\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Processing:\n            // Execute the polling strategy, then retry.\n            await strategy(canisterId, requestId, status);\n            return pollForResponse(agent, canisterId, requestId, strategy, currentRequest, blsVerify);\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Rejected: {\n            const rejectCode = new Uint8Array((0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, 'reject_code'])))[0];\n            const rejectMessage = new TextDecoder().decode((0,_certificate__WEBPACK_IMPORTED_MODULE_1__.lookupResultToBuffer)(cert.lookup([...path, 'reject_message'])));\n            throw new Error(`Call was rejected:\\n` +\n                `  Request ID: ${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.toHex)(requestId)}\\n` +\n                `  Reject code: ${rejectCode}\\n` +\n                `  Reject text: ${rejectMessage}\\n`);\n        }\n        case _agent__WEBPACK_IMPORTED_MODULE_0__.RequestStatusResponseStatus.Done:\n            // This is _technically_ not an error, but we still didn't see the `Replied` status so\n            // we don't know the result and cannot decode it.\n            throw new Error(`Call was marked as done but we never saw the reply:\\n` +\n                `  Request ID: ${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.toHex)(requestId)}\\n`);\n    }\n    throw new Error('unreachable');\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcG9sbGluZy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErRDtBQUNJO0FBQzNCO0FBQ0Q7QUFDTTtBQUN3QjtBQUN4QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHdFQUF3RSwwREFBZTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdMQUFnTCxlQUFlO0FBQy9MO0FBQ0EscURBQXFELDBDQUFNLENBQUMsNkVBQXFDO0FBQ2pHLHNEQUFzRCxlQUFlO0FBQ3JFO0FBQ0E7QUFDQSx1QkFBdUIscURBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUJBQXFCLGtFQUFvQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0RBQTJCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLCtEQUEyQjtBQUN4QztBQUNBLHVCQUF1QixrRUFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsYUFBYSwrREFBMkI7QUFDeEMsYUFBYSwrREFBMkI7QUFDeEMsYUFBYSwrREFBMkI7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsYUFBYSwrREFBMkI7QUFDeEMsOENBQThDLGtFQUFvQjtBQUNsRSwyREFBMkQsa0VBQW9CO0FBQy9FO0FBQ0EsaUNBQWlDLG9EQUFLLFlBQVk7QUFDbEQsa0NBQWtDLFdBQVc7QUFDN0Msa0NBQWtDLGNBQWM7QUFDaEQ7QUFDQSxhQUFhLCtEQUEyQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0RBQUssWUFBWTtBQUNsRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcG9sbGluZy9pbmRleC5qcz80YWY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cGlyeSwgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzIH0gZnJvbSAnLi4vYWdlbnQnO1xuaW1wb3J0IHsgQ2VydGlmaWNhdGUsIGxvb2t1cFJlc3VsdFRvQnVmZmVyIH0gZnJvbSAnLi4vY2VydGlmaWNhdGUnO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tICcuLi91dGlscy9idWZmZXInO1xuZXhwb3J0ICogYXMgc3RyYXRlZ3kgZnJvbSAnLi9zdHJhdGVneSc7XG5pbXBvcnQgeyBkZWZhdWx0U3RyYXRlZ3kgfSBmcm9tICcuL3N0cmF0ZWd5JztcbmltcG9ydCB7IERFRkFVTFRfSU5HUkVTU19FWFBJUllfREVMVEFfSU5fTVNFQ1MgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuZXhwb3J0IHsgZGVmYXVsdFN0cmF0ZWd5IH0gZnJvbSAnLi9zdHJhdGVneSc7XG4vKipcbiAqIFBvbGxzIHRoZSBJQyB0byBjaGVjayB0aGUgc3RhdHVzIG9mIHRoZSBnaXZlbiByZXF1ZXN0IHRoZW5cbiAqIHJldHVybnMgdGhlIHJlc3BvbnNlIGJ5dGVzIG9uY2UgdGhlIHJlcXVlc3QgaGFzIGJlZW4gcHJvY2Vzc2VkLlxuICogQHBhcmFtIGFnZW50IFRoZSBhZ2VudCB0byB1c2UgdG8gcG9sbCByZWFkX3N0YXRlLlxuICogQHBhcmFtIGNhbmlzdGVySWQgVGhlIGVmZmVjdGl2ZSBjYW5pc3RlciBJRC5cbiAqIEBwYXJhbSByZXF1ZXN0SWQgVGhlIFJlcXVlc3QgSUQgdG8gcG9sbCBzdGF0dXMgZm9yLlxuICogQHBhcmFtIHN0cmF0ZWd5IEEgcG9sbGluZyBzdHJhdGVneS5cbiAqIEBwYXJhbSByZXF1ZXN0IFJlcXVlc3QgZm9yIHRoZSByZWFkU3RhdGUgY2FsbC5cbiAqIEBwYXJhbSBibHNWZXJpZnkgLSBvcHRpb25hbCByZXBsYWNlbWVudCBmdW5jdGlvbiB0aGF0IHZlcmlmaWVzIHRoZSBCTFMgc2lnbmF0dXJlIG9mIGEgY2VydGlmaWNhdGUuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb2xsRm9yUmVzcG9uc2UoYWdlbnQsIGNhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RyYXRlZ3kgPSBkZWZhdWx0U3RyYXRlZ3koKSwgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbnJlcXVlc3QsIGJsc1ZlcmlmeSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBwYXRoID0gW25ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgncmVxdWVzdF9zdGF0dXMnKSwgcmVxdWVzdElkXTtcbiAgICBjb25zdCBjdXJyZW50UmVxdWVzdCA9IHJlcXVlc3QgIT09IG51bGwgJiYgcmVxdWVzdCAhPT0gdm9pZCAwID8gcmVxdWVzdCA6IChhd2FpdCAoKF9hID0gYWdlbnQuY3JlYXRlUmVhZFN0YXRlUmVxdWVzdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoYWdlbnQsIHsgcGF0aHM6IFtwYXRoXSB9KSkpO1xuICAgIC8vIFVzZSBhIGZyZXNoIGV4cGlyeSBmb3IgdGhlIHJlYWRTdGF0ZSBjYWxsLlxuICAgIGN1cnJlbnRSZXF1ZXN0LmJvZHkuY29udGVudC5pbmdyZXNzX2V4cGlyeSA9IG5ldyBFeHBpcnkoREVGQVVMVF9JTkdSRVNTX0VYUElSWV9ERUxUQV9JTl9NU0VDUyk7XG4gICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBhZ2VudC5yZWFkU3RhdGUoY2FuaXN0ZXJJZCwgeyBwYXRoczogW3BhdGhdIH0sIHVuZGVmaW5lZCwgY3VycmVudFJlcXVlc3QpO1xuICAgIGlmIChhZ2VudC5yb290S2V5ID09IG51bGwpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQWdlbnQgcm9vdCBrZXkgbm90IGluaXRpYWxpemVkIGJlZm9yZSBwb2xsaW5nJyk7XG4gICAgY29uc3QgY2VydCA9IGF3YWl0IENlcnRpZmljYXRlLmNyZWF0ZSh7XG4gICAgICAgIGNlcnRpZmljYXRlOiBzdGF0ZS5jZXJ0aWZpY2F0ZSxcbiAgICAgICAgcm9vdEtleTogYWdlbnQucm9vdEtleSxcbiAgICAgICAgY2FuaXN0ZXJJZDogY2FuaXN0ZXJJZCxcbiAgICAgICAgYmxzVmVyaWZ5LFxuICAgIH0pO1xuICAgIGNvbnN0IG1heWJlQnVmID0gbG9va3VwUmVzdWx0VG9CdWZmZXIoY2VydC5sb29rdXAoWy4uLnBhdGgsIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnc3RhdHVzJyldKSk7XG4gICAgbGV0IHN0YXR1cztcbiAgICBpZiAodHlwZW9mIG1heWJlQnVmID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBNaXNzaW5nIHJlcXVlc3RJZCBtZWFucyB3ZSBuZWVkIHRvIHdhaXRcbiAgICAgICAgc3RhdHVzID0gUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLlVua25vd247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUobWF5YmVCdWYpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgICBjYXNlIFJlcXVlc3RTdGF0dXNSZXNwb25zZVN0YXR1cy5SZXBsaWVkOiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlcGx5OiBsb29rdXBSZXN1bHRUb0J1ZmZlcihjZXJ0Lmxvb2t1cChbLi4ucGF0aCwgJ3JlcGx5J10pKSxcbiAgICAgICAgICAgICAgICBjZXJ0aWZpY2F0ZTogY2VydCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSZXF1ZXN0U3RhdHVzUmVzcG9uc2VTdGF0dXMuUmVjZWl2ZWQ6XG4gICAgICAgIGNhc2UgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLlVua25vd246XG4gICAgICAgIGNhc2UgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLlByb2Nlc3Npbmc6XG4gICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBwb2xsaW5nIHN0cmF0ZWd5LCB0aGVuIHJldHJ5LlxuICAgICAgICAgICAgYXdhaXQgc3RyYXRlZ3koY2FuaXN0ZXJJZCwgcmVxdWVzdElkLCBzdGF0dXMpO1xuICAgICAgICAgICAgcmV0dXJuIHBvbGxGb3JSZXNwb25zZShhZ2VudCwgY2FuaXN0ZXJJZCwgcmVxdWVzdElkLCBzdHJhdGVneSwgY3VycmVudFJlcXVlc3QsIGJsc1ZlcmlmeSk7XG4gICAgICAgIGNhc2UgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzLlJlamVjdGVkOiB7XG4gICAgICAgICAgICBjb25zdCByZWplY3RDb2RlID0gbmV3IFVpbnQ4QXJyYXkobG9va3VwUmVzdWx0VG9CdWZmZXIoY2VydC5sb29rdXAoWy4uLnBhdGgsICdyZWplY3RfY29kZSddKSkpWzBdO1xuICAgICAgICAgICAgY29uc3QgcmVqZWN0TWVzc2FnZSA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShsb29rdXBSZXN1bHRUb0J1ZmZlcihjZXJ0Lmxvb2t1cChbLi4ucGF0aCwgJ3JlamVjdF9tZXNzYWdlJ10pKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbGwgd2FzIHJlamVjdGVkOlxcbmAgK1xuICAgICAgICAgICAgICAgIGAgIFJlcXVlc3QgSUQ6ICR7dG9IZXgocmVxdWVzdElkKX1cXG5gICtcbiAgICAgICAgICAgICAgICBgICBSZWplY3QgY29kZTogJHtyZWplY3RDb2RlfVxcbmAgK1xuICAgICAgICAgICAgICAgIGAgIFJlamVjdCB0ZXh0OiAke3JlamVjdE1lc3NhZ2V9XFxuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSZXF1ZXN0U3RhdHVzUmVzcG9uc2VTdGF0dXMuRG9uZTpcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgX3RlY2huaWNhbGx5XyBub3QgYW4gZXJyb3IsIGJ1dCB3ZSBzdGlsbCBkaWRuJ3Qgc2VlIHRoZSBgUmVwbGllZGAgc3RhdHVzIHNvXG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBrbm93IHRoZSByZXN1bHQgYW5kIGNhbm5vdCBkZWNvZGUgaXQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbGwgd2FzIG1hcmtlZCBhcyBkb25lIGJ1dCB3ZSBuZXZlciBzYXcgdGhlIHJlcGx5OlxcbmAgK1xuICAgICAgICAgICAgICAgIGAgIFJlcXVlc3QgSUQ6ICR7dG9IZXgocmVxdWVzdElkKX1cXG5gKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlYWNoYWJsZScpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/strategy.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/polling/strategy.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   backoff: () => (/* binding */ backoff),\n/* harmony export */   chain: () => (/* binding */ chain),\n/* harmony export */   conditionalDelay: () => (/* binding */ conditionalDelay),\n/* harmony export */   defaultStrategy: () => (/* binding */ defaultStrategy),\n/* harmony export */   maxAttempts: () => (/* binding */ maxAttempts),\n/* harmony export */   once: () => (/* binding */ once),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   timeout: () => (/* binding */ timeout)\n/* harmony export */ });\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n\nconst FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n/**\n * A best practices polling strategy: wait 2 seconds before the first poll, then 1 second\n * with an exponential backoff factor of 1.2. Timeout after 5 minutes.\n */\nfunction defaultStrategy() {\n    return chain(conditionalDelay(once(), 1000), backoff(1000, 1.2), timeout(FIVE_MINUTES_IN_MSEC));\n}\n/**\n * Predicate that returns true once.\n */\nfunction once() {\n    let first = true;\n    return async () => {\n        if (first) {\n            first = false;\n            return true;\n        }\n        return false;\n    };\n}\n/**\n * Delay the polling once.\n * @param condition A predicate that indicates when to delay.\n * @param timeInMsec The amount of time to delay.\n */\nfunction conditionalDelay(condition, timeInMsec) {\n    return async (canisterId, requestId, status) => {\n        if (await condition(canisterId, requestId, status)) {\n            return new Promise(resolve => setTimeout(resolve, timeInMsec));\n        }\n    };\n}\n/**\n * Error out after a maximum number of polling has been done.\n * @param count The maximum attempts to poll.\n */\nfunction maxAttempts(count) {\n    let attempts = count;\n    return async (canisterId, requestId, status) => {\n        if (--attempts <= 0) {\n            throw new Error(`Failed to retrieve a reply for request after ${count} attempts:\\n` +\n                `  Request ID: ${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_0__.toHex)(requestId)}\\n` +\n                `  Request status: ${status}\\n`);\n        }\n    };\n}\n/**\n * Throttle polling.\n * @param throttleInMsec Amount in millisecond to wait between each polling.\n */\nfunction throttle(throttleInMsec) {\n    return () => new Promise(resolve => setTimeout(resolve, throttleInMsec));\n}\n/**\n * Reject a call after a certain amount of time.\n * @param timeInMsec Time in milliseconds before the polling should be rejected.\n */\nfunction timeout(timeInMsec) {\n    const end = Date.now() + timeInMsec;\n    return async (canisterId, requestId, status) => {\n        if (Date.now() > end) {\n            throw new Error(`Request timed out after ${timeInMsec} msec:\\n` +\n                `  Request ID: ${(0,_utils_buffer__WEBPACK_IMPORTED_MODULE_0__.toHex)(requestId)}\\n` +\n                `  Request status: ${status}\\n`);\n        }\n    };\n}\n/**\n * A strategy that throttle, but using an exponential backoff strategy.\n * @param startingThrottleInMsec The throttle in milliseconds to start with.\n * @param backoffFactor The factor to multiple the throttle time between every poll. For\n *   example if using 2, the throttle will double between every run.\n */\nfunction backoff(startingThrottleInMsec, backoffFactor) {\n    let currentThrottling = startingThrottleInMsec;\n    return () => new Promise(resolve => setTimeout(() => {\n        currentThrottling *= backoffFactor;\n        resolve();\n    }, currentThrottling));\n}\n/**\n * Chain multiple polling strategy. This _chains_ the strategies, so if you pass in,\n * say, two throttling strategy of 1 second, it will result in a throttle of 2 seconds.\n * @param strategies A strategy list to chain.\n */\nfunction chain(...strategies) {\n    return async (canisterId, requestId, status) => {\n        for (const a of strategies) {\n            await a(canisterId, requestId, status);\n        }\n    };\n}\n//# sourceMappingURL=strategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcG9sbGluZy9zdHJhdGVneS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxPQUFPO0FBQ25GLGlDQUFpQyxvREFBSyxZQUFZO0FBQ2xELHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxZQUFZO0FBQ25FLGlDQUFpQyxvREFBSyxZQUFZO0FBQ2xELHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcG9sbGluZy9zdHJhdGVneS5qcz8xOTFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvSGV4IH0gZnJvbSAnLi4vdXRpbHMvYnVmZmVyJztcbmNvbnN0IEZJVkVfTUlOVVRFU19JTl9NU0VDID0gNSAqIDYwICogMTAwMDtcbi8qKlxuICogQSBiZXN0IHByYWN0aWNlcyBwb2xsaW5nIHN0cmF0ZWd5OiB3YWl0IDIgc2Vjb25kcyBiZWZvcmUgdGhlIGZpcnN0IHBvbGwsIHRoZW4gMSBzZWNvbmRcbiAqIHdpdGggYW4gZXhwb25lbnRpYWwgYmFja29mZiBmYWN0b3Igb2YgMS4yLiBUaW1lb3V0IGFmdGVyIDUgbWludXRlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRTdHJhdGVneSgpIHtcbiAgICByZXR1cm4gY2hhaW4oY29uZGl0aW9uYWxEZWxheShvbmNlKCksIDEwMDApLCBiYWNrb2ZmKDEwMDAsIDEuMiksIHRpbWVvdXQoRklWRV9NSU5VVEVTX0lOX01TRUMpKTtcbn1cbi8qKlxuICogUHJlZGljYXRlIHRoYXQgcmV0dXJucyB0cnVlIG9uY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbmNlKCkge1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG4vKipcbiAqIERlbGF5IHRoZSBwb2xsaW5nIG9uY2UuXG4gKiBAcGFyYW0gY29uZGl0aW9uIEEgcHJlZGljYXRlIHRoYXQgaW5kaWNhdGVzIHdoZW4gdG8gZGVsYXkuXG4gKiBAcGFyYW0gdGltZUluTXNlYyBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZGVsYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25kaXRpb25hbERlbGF5KGNvbmRpdGlvbiwgdGltZUluTXNlYykge1xuICAgIHJldHVybiBhc3luYyAoY2FuaXN0ZXJJZCwgcmVxdWVzdElkLCBzdGF0dXMpID0+IHtcbiAgICAgICAgaWYgKGF3YWl0IGNvbmRpdGlvbihjYW5pc3RlcklkLCByZXF1ZXN0SWQsIHN0YXR1cykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZUluTXNlYykpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogRXJyb3Igb3V0IGFmdGVyIGEgbWF4aW11bSBudW1iZXIgb2YgcG9sbGluZyBoYXMgYmVlbiBkb25lLlxuICogQHBhcmFtIGNvdW50IFRoZSBtYXhpbXVtIGF0dGVtcHRzIHRvIHBvbGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXhBdHRlbXB0cyhjb3VudCkge1xuICAgIGxldCBhdHRlbXB0cyA9IGNvdW50O1xuICAgIHJldHVybiBhc3luYyAoY2FuaXN0ZXJJZCwgcmVxdWVzdElkLCBzdGF0dXMpID0+IHtcbiAgICAgICAgaWYgKC0tYXR0ZW1wdHMgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmV0cmlldmUgYSByZXBseSBmb3IgcmVxdWVzdCBhZnRlciAke2NvdW50fSBhdHRlbXB0czpcXG5gICtcbiAgICAgICAgICAgICAgICBgICBSZXF1ZXN0IElEOiAke3RvSGV4KHJlcXVlc3RJZCl9XFxuYCArXG4gICAgICAgICAgICAgICAgYCAgUmVxdWVzdCBzdGF0dXM6ICR7c3RhdHVzfVxcbmApO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogVGhyb3R0bGUgcG9sbGluZy5cbiAqIEBwYXJhbSB0aHJvdHRsZUluTXNlYyBBbW91bnQgaW4gbWlsbGlzZWNvbmQgdG8gd2FpdCBiZXR3ZWVuIGVhY2ggcG9sbGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKHRocm90dGxlSW5Nc2VjKSB7XG4gICAgcmV0dXJuICgpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aHJvdHRsZUluTXNlYykpO1xufVxuLyoqXG4gKiBSZWplY3QgYSBjYWxsIGFmdGVyIGEgY2VydGFpbiBhbW91bnQgb2YgdGltZS5cbiAqIEBwYXJhbSB0aW1lSW5Nc2VjIFRpbWUgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSB0aGUgcG9sbGluZyBzaG91bGQgYmUgcmVqZWN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0KHRpbWVJbk1zZWMpIHtcbiAgICBjb25zdCBlbmQgPSBEYXRlLm5vdygpICsgdGltZUluTXNlYztcbiAgICByZXR1cm4gYXN5bmMgKGNhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RhdHVzKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpID4gZW5kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlcXVlc3QgdGltZWQgb3V0IGFmdGVyICR7dGltZUluTXNlY30gbXNlYzpcXG5gICtcbiAgICAgICAgICAgICAgICBgICBSZXF1ZXN0IElEOiAke3RvSGV4KHJlcXVlc3RJZCl9XFxuYCArXG4gICAgICAgICAgICAgICAgYCAgUmVxdWVzdCBzdGF0dXM6ICR7c3RhdHVzfVxcbmApO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQSBzdHJhdGVneSB0aGF0IHRocm90dGxlLCBidXQgdXNpbmcgYW4gZXhwb25lbnRpYWwgYmFja29mZiBzdHJhdGVneS5cbiAqIEBwYXJhbSBzdGFydGluZ1Rocm90dGxlSW5Nc2VjIFRoZSB0aHJvdHRsZSBpbiBtaWxsaXNlY29uZHMgdG8gc3RhcnQgd2l0aC5cbiAqIEBwYXJhbSBiYWNrb2ZmRmFjdG9yIFRoZSBmYWN0b3IgdG8gbXVsdGlwbGUgdGhlIHRocm90dGxlIHRpbWUgYmV0d2VlbiBldmVyeSBwb2xsLiBGb3JcbiAqICAgZXhhbXBsZSBpZiB1c2luZyAyLCB0aGUgdGhyb3R0bGUgd2lsbCBkb3VibGUgYmV0d2VlbiBldmVyeSBydW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYWNrb2ZmKHN0YXJ0aW5nVGhyb3R0bGVJbk1zZWMsIGJhY2tvZmZGYWN0b3IpIHtcbiAgICBsZXQgY3VycmVudFRocm90dGxpbmcgPSBzdGFydGluZ1Rocm90dGxlSW5Nc2VjO1xuICAgIHJldHVybiAoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjdXJyZW50VGhyb3R0bGluZyAqPSBiYWNrb2ZmRmFjdG9yO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfSwgY3VycmVudFRocm90dGxpbmcpKTtcbn1cbi8qKlxuICogQ2hhaW4gbXVsdGlwbGUgcG9sbGluZyBzdHJhdGVneS4gVGhpcyBfY2hhaW5zXyB0aGUgc3RyYXRlZ2llcywgc28gaWYgeW91IHBhc3MgaW4sXG4gKiBzYXksIHR3byB0aHJvdHRsaW5nIHN0cmF0ZWd5IG9mIDEgc2Vjb25kLCBpdCB3aWxsIHJlc3VsdCBpbiBhIHRocm90dGxlIG9mIDIgc2Vjb25kcy5cbiAqIEBwYXJhbSBzdHJhdGVnaWVzIEEgc3RyYXRlZ3kgbGlzdCB0byBjaGFpbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYWluKC4uLnN0cmF0ZWdpZXMpIHtcbiAgICByZXR1cm4gYXN5bmMgKGNhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RhdHVzKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgYSBvZiBzdHJhdGVnaWVzKSB7XG4gICAgICAgICAgICBhd2FpdCBhKGNhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RhdHVzKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJhdGVneS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/polling/strategy.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/public_key.js":
/*!************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/public_key.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519PublicKey: () => (/* binding */ Ed25519PublicKey)\n/* harmony export */ });\n/* harmony import */ var _der__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./der */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/der.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Ed25519PublicKey_rawKey, _Ed25519PublicKey_derKey;\n\nclass Ed25519PublicKey {\n    // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n    constructor(key) {\n        _Ed25519PublicKey_rawKey.set(this, void 0);\n        _Ed25519PublicKey_derKey.set(this, void 0);\n        if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n            throw new Error('An Ed25519 public key must be exactly 32bytes long');\n        }\n        __classPrivateFieldSet(this, _Ed25519PublicKey_rawKey, key, \"f\");\n        __classPrivateFieldSet(this, _Ed25519PublicKey_derKey, Ed25519PublicKey.derEncode(key), \"f\");\n    }\n    static from(key) {\n        return this.fromDer(key.toDer());\n    }\n    static fromRaw(rawKey) {\n        return new Ed25519PublicKey(rawKey);\n    }\n    static fromDer(derKey) {\n        return new Ed25519PublicKey(this.derDecode(derKey));\n    }\n    static derEncode(publicKey) {\n        return (0,_der__WEBPACK_IMPORTED_MODULE_0__.wrapDER)(publicKey, _der__WEBPACK_IMPORTED_MODULE_0__.ED25519_OID).buffer;\n    }\n    static derDecode(key) {\n        const unwrapped = (0,_der__WEBPACK_IMPORTED_MODULE_0__.unwrapDER)(key, _der__WEBPACK_IMPORTED_MODULE_0__.ED25519_OID);\n        if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n            throw new Error('An Ed25519 public key must be exactly 32bytes long');\n        }\n        return unwrapped;\n    }\n    get rawKey() {\n        return __classPrivateFieldGet(this, _Ed25519PublicKey_rawKey, \"f\");\n    }\n    get derKey() {\n        return __classPrivateFieldGet(this, _Ed25519PublicKey_derKey, \"f\");\n    }\n    toDer() {\n        return this.derKey;\n    }\n    toRaw() {\n        return this.rawKey;\n    }\n}\n_Ed25519PublicKey_rawKey = new WeakMap(), _Ed25519PublicKey_derKey = new WeakMap();\n// The length of Ed25519 public keys is always 32 bytes.\nEd25519PublicKey.RAW_KEY_LENGTH = 32;\n//# sourceMappingURL=public_key.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcHVibGljX2tleS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0Q7QUFDakQ7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2Q0FBTyxZQUFZLDZDQUFXO0FBQzdDO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQVMsTUFBTSw2Q0FBVztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcHVibGljX2tleS5qcz82OTJiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfRWQyNTUxOVB1YmxpY0tleV9yYXdLZXksIF9FZDI1NTE5UHVibGljS2V5X2RlcktleTtcbmltcG9ydCB7IEVEMjU1MTlfT0lELCB1bndyYXBERVIsIHdyYXBERVIgfSBmcm9tICcuL2Rlcic7XG5leHBvcnQgY2xhc3MgRWQyNTUxOVB1YmxpY0tleSB7XG4gICAgLy8gYGZyb21SYXdgIGFuZCBgZnJvbURlcmAgc2hvdWxkIGJlIHVzZWQgZm9yIGluc3RhbnRpYXRpb24sIG5vdCB0aGlzIGNvbnN0cnVjdG9yLlxuICAgIGNvbnN0cnVjdG9yKGtleSkge1xuICAgICAgICBfRWQyNTUxOVB1YmxpY0tleV9yYXdLZXkuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9FZDI1NTE5UHVibGljS2V5X2RlcktleS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgaWYgKGtleS5ieXRlTGVuZ3RoICE9PSBFZDI1NTE5UHVibGljS2V5LlJBV19LRVlfTEVOR1RIKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIEVkMjU1MTkgcHVibGljIGtleSBtdXN0IGJlIGV4YWN0bHkgMzJieXRlcyBsb25nJyk7XG4gICAgICAgIH1cbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRWQyNTUxOVB1YmxpY0tleV9yYXdLZXksIGtleSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9FZDI1NTE5UHVibGljS2V5X2RlcktleSwgRWQyNTUxOVB1YmxpY0tleS5kZXJFbmNvZGUoa2V5KSwgXCJmXCIpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbURlcihrZXkudG9EZXIoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUmF3KHJhd0tleSkge1xuICAgICAgICByZXR1cm4gbmV3IEVkMjU1MTlQdWJsaWNLZXkocmF3S2V5KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21EZXIoZGVyS2V5KSB7XG4gICAgICAgIHJldHVybiBuZXcgRWQyNTUxOVB1YmxpY0tleSh0aGlzLmRlckRlY29kZShkZXJLZXkpKTtcbiAgICB9XG4gICAgc3RhdGljIGRlckVuY29kZShwdWJsaWNLZXkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBERVIocHVibGljS2V5LCBFRDI1NTE5X09JRCkuYnVmZmVyO1xuICAgIH1cbiAgICBzdGF0aWMgZGVyRGVjb2RlKGtleSkge1xuICAgICAgICBjb25zdCB1bndyYXBwZWQgPSB1bndyYXBERVIoa2V5LCBFRDI1NTE5X09JRCk7XG4gICAgICAgIGlmICh1bndyYXBwZWQubGVuZ3RoICE9PSB0aGlzLlJBV19LRVlfTEVOR1RIKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIEVkMjU1MTkgcHVibGljIGtleSBtdXN0IGJlIGV4YWN0bHkgMzJieXRlcyBsb25nJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVud3JhcHBlZDtcbiAgICB9XG4gICAgZ2V0IHJhd0tleSgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0VkMjU1MTlQdWJsaWNLZXlfcmF3S2V5LCBcImZcIik7XG4gICAgfVxuICAgIGdldCBkZXJLZXkoKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9FZDI1NTE5UHVibGljS2V5X2RlcktleSwgXCJmXCIpO1xuICAgIH1cbiAgICB0b0RlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVyS2V5O1xuICAgIH1cbiAgICB0b1JhdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3S2V5O1xuICAgIH1cbn1cbl9FZDI1NTE5UHVibGljS2V5X3Jhd0tleSA9IG5ldyBXZWFrTWFwKCksIF9FZDI1NTE5UHVibGljS2V5X2RlcktleSA9IG5ldyBXZWFrTWFwKCk7XG4vLyBUaGUgbGVuZ3RoIG9mIEVkMjU1MTkgcHVibGljIGtleXMgaXMgYWx3YXlzIDMyIGJ5dGVzLlxuRWQyNTUxOVB1YmxpY0tleS5SQVdfS0VZX0xFTkdUSCA9IDMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGljX2tleS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/public_key.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js":
/*!************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   hashOfMap: () => (/* binding */ hashOfMap),\n/* harmony export */   hashValue: () => (/* binding */ hashValue),\n/* harmony export */   requestIdOf: () => (/* binding */ requestIdOf)\n/* harmony export */ });\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/index.js\");\n/* harmony import */ var borc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! borc */ \"(ssr)/../../../../../node_modules/borc/src/index.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/../../../../../node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n\n\n\n\n/**\n * sha256 hash the provided Buffer\n * @param data - input to hash function\n */\nfunction hash(data) {\n    return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.uint8ToBuf)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_3__.sha256.create().update(new Uint8Array(data)).digest());\n}\n/**\n *\n * @param value unknown value\n * @returns ArrayBuffer\n */\nfunction hashValue(value) {\n    if (value instanceof borc__WEBPACK_IMPORTED_MODULE_1__.Tagged) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return hashValue(value.value);\n    }\n    else if (typeof value === 'string') {\n        return hashString(value);\n    }\n    else if (typeof value === 'number') {\n        return hash((0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(value));\n    }\n    else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n        return hash(value);\n    }\n    else if (Array.isArray(value)) {\n        const vals = value.map(hashValue);\n        return hash((0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.concat)(...vals));\n    }\n    else if (value && typeof value === 'object' && value._isPrincipal) {\n        return hash(value.toUint8Array());\n    }\n    else if (typeof value === 'object' &&\n        value !== null &&\n        typeof value.toHash === 'function') {\n        return hashValue(value.toHash());\n        // TODO This should be move to a specific async method as the webauthn flow required\n        // the flow to be synchronous to ensure Safari touch id works.\n        // } else if (value instanceof Promise) {\n        //   return value.then(x => hashValue(x));\n    }\n    else if (typeof value === 'object') {\n        return hashOfMap(value);\n    }\n    else if (typeof value === 'bigint') {\n        // Do this check much later than the other bigint check because this one is much less\n        // type-safe.\n        // So we want to try all the high-assurance type guards before this 'probable' one.\n        return hash((0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(value));\n    }\n    throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {\n        // include so logs/callers can understand the confusing value.\n        // (when stringified in error message, prototype info is lost)\n        value,\n    });\n}\nconst hashString = (value) => {\n    const encoded = new TextEncoder().encode(value);\n    return hash(encoded);\n};\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction requestIdOf(request) {\n    return hashOfMap(request);\n}\n/**\n * Hash a map into an ArrayBuffer using the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param map - Any non-nested object\n * @returns ArrayBuffer\n */\nfunction hashOfMap(map) {\n    const hashed = Object.entries(map)\n        .filter(([, value]) => value !== undefined)\n        .map(([key, value]) => {\n        const hashedKey = hashString(key);\n        const hashedValue = hashValue(value);\n        return [hashedKey, hashedValue];\n    });\n    const traversed = hashed;\n    const sorted = traversed.sort(([k1], [k2]) => {\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.compare)(k1, k2);\n    });\n    const concatenated = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.concat)(...sorted.map(x => (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_2__.concat)(...x)));\n    const result = hash(concatenated);\n    return result;\n}\n//# sourceMappingURL=request_id.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcmVxdWVzdF9pZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUE0QztBQUNwQjtBQUNzQjtBQUNlO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHlEQUFVLENBQUMsd0RBQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCx5QkFBeUIsd0NBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMERBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFEQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwREFBUztBQUM3QjtBQUNBLGtGQUFrRixNQUFNO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZUFBZSxzREFBTztBQUN0QixLQUFLO0FBQ0wseUJBQXlCLHFEQUFNLG9CQUFvQixxREFBTTtBQUN6RDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcmVxdWVzdF9pZC5qcz82M2Q1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxlYkVuY29kZSB9IGZyb20gJ0BkZmluaXR5L2NhbmRpZCc7XG5pbXBvcnQgYm9yYyBmcm9tICdib3JjJztcbmltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMjU2JztcbmltcG9ydCB7IGNvbXBhcmUsIGNvbmNhdCwgdWludDhUb0J1ZiB9IGZyb20gJy4vdXRpbHMvYnVmZmVyJztcbi8qKlxuICogc2hhMjU2IGhhc2ggdGhlIHByb3ZpZGVkIEJ1ZmZlclxuICogQHBhcmFtIGRhdGEgLSBpbnB1dCB0byBoYXNoIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoKGRhdGEpIHtcbiAgICByZXR1cm4gdWludDhUb0J1ZihzaGEyNTYuY3JlYXRlKCkudXBkYXRlKG5ldyBVaW50OEFycmF5KGRhdGEpKS5kaWdlc3QoKSk7XG59XG4vKipcbiAqXG4gKiBAcGFyYW0gdmFsdWUgdW5rbm93biB2YWx1ZVxuICogQHJldHVybnMgQXJyYXlCdWZmZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGJvcmMuVGFnZ2VkKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBoYXNoVmFsdWUodmFsdWUudmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBoYXNoU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gaGFzaChsZWJFbmNvZGUodmFsdWUpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBoYXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgdmFscyA9IHZhbHVlLm1hcChoYXNoVmFsdWUpO1xuICAgICAgICByZXR1cm4gaGFzaChjb25jYXQoLi4udmFscykpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLl9pc1ByaW5jaXBhbCkge1xuICAgICAgICByZXR1cm4gaGFzaCh2YWx1ZS50b1VpbnQ4QXJyYXkoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlLnRvSGFzaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gaGFzaFZhbHVlKHZhbHVlLnRvSGFzaCgpKTtcbiAgICAgICAgLy8gVE9ETyBUaGlzIHNob3VsZCBiZSBtb3ZlIHRvIGEgc3BlY2lmaWMgYXN5bmMgbWV0aG9kIGFzIHRoZSB3ZWJhdXRobiBmbG93IHJlcXVpcmVkXG4gICAgICAgIC8vIHRoZSBmbG93IHRvIGJlIHN5bmNocm9ub3VzIHRvIGVuc3VyZSBTYWZhcmkgdG91Y2ggaWQgd29ya3MuXG4gICAgICAgIC8vIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIC8vICAgcmV0dXJuIHZhbHVlLnRoZW4oeCA9PiBoYXNoVmFsdWUoeCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBoYXNoT2ZNYXAodmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIC8vIERvIHRoaXMgY2hlY2sgbXVjaCBsYXRlciB0aGFuIHRoZSBvdGhlciBiaWdpbnQgY2hlY2sgYmVjYXVzZSB0aGlzIG9uZSBpcyBtdWNoIGxlc3NcbiAgICAgICAgLy8gdHlwZS1zYWZlLlxuICAgICAgICAvLyBTbyB3ZSB3YW50IHRvIHRyeSBhbGwgdGhlIGhpZ2gtYXNzdXJhbmNlIHR5cGUgZ3VhcmRzIGJlZm9yZSB0aGlzICdwcm9iYWJsZScgb25lLlxuICAgICAgICByZXR1cm4gaGFzaChsZWJFbmNvZGUodmFsdWUpKTtcbiAgICB9XG4gICAgdGhyb3cgT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoYEF0dGVtcHQgdG8gaGFzaCBhIHZhbHVlIG9mIHVuc3VwcG9ydGVkIHR5cGU6ICR7dmFsdWV9YCksIHtcbiAgICAgICAgLy8gaW5jbHVkZSBzbyBsb2dzL2NhbGxlcnMgY2FuIHVuZGVyc3RhbmQgdGhlIGNvbmZ1c2luZyB2YWx1ZS5cbiAgICAgICAgLy8gKHdoZW4gc3RyaW5naWZpZWQgaW4gZXJyb3IgbWVzc2FnZSwgcHJvdG90eXBlIGluZm8gaXMgbG9zdClcbiAgICAgICAgdmFsdWUsXG4gICAgfSk7XG59XG5jb25zdCBoYXNoU3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgZW5jb2RlZCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWx1ZSk7XG4gICAgcmV0dXJuIGhhc2goZW5jb2RlZCk7XG59O1xuLyoqXG4gKiBHZXQgdGhlIFJlcXVlc3RJZCBvZiB0aGUgcHJvdmlkZWQgaWMtcmVmIHJlcXVlc3QuXG4gKiBSZXF1ZXN0SWQgaXMgdGhlIHJlc3VsdCBvZiB0aGUgcmVwcmVzZW50YXRpb24taW5kZXBlbmRlbnQtaGFzaCBmdW5jdGlvbi5cbiAqIGh0dHBzOi8vc2RrLmRmaW5pdHkub3JnL2RvY3MvaW50ZXJmYWNlLXNwZWMvaW5kZXguaHRtbCNoYXNoLW9mLW1hcFxuICogQHBhcmFtIHJlcXVlc3QgLSBpYy1yZWYgcmVxdWVzdCB0byBoYXNoIGludG8gUmVxdWVzdElkXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdElkT2YocmVxdWVzdCkge1xuICAgIHJldHVybiBoYXNoT2ZNYXAocmVxdWVzdCk7XG59XG4vKipcbiAqIEhhc2ggYSBtYXAgaW50byBhbiBBcnJheUJ1ZmZlciB1c2luZyB0aGUgcmVwcmVzZW50YXRpb24taW5kZXBlbmRlbnQtaGFzaCBmdW5jdGlvbi5cbiAqIGh0dHBzOi8vc2RrLmRmaW5pdHkub3JnL2RvY3MvaW50ZXJmYWNlLXNwZWMvaW5kZXguaHRtbCNoYXNoLW9mLW1hcFxuICogQHBhcmFtIG1hcCAtIEFueSBub24tbmVzdGVkIG9iamVjdFxuICogQHJldHVybnMgQXJyYXlCdWZmZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hPZk1hcChtYXApIHtcbiAgICBjb25zdCBoYXNoZWQgPSBPYmplY3QuZW50cmllcyhtYXApXG4gICAgICAgIC5maWx0ZXIoKFssIHZhbHVlXSkgPT4gdmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhc2hlZEtleSA9IGhhc2hTdHJpbmcoa2V5KTtcbiAgICAgICAgY29uc3QgaGFzaGVkVmFsdWUgPSBoYXNoVmFsdWUodmFsdWUpO1xuICAgICAgICByZXR1cm4gW2hhc2hlZEtleSwgaGFzaGVkVmFsdWVdO1xuICAgIH0pO1xuICAgIGNvbnN0IHRyYXZlcnNlZCA9IGhhc2hlZDtcbiAgICBjb25zdCBzb3J0ZWQgPSB0cmF2ZXJzZWQuc29ydCgoW2sxXSwgW2syXSkgPT4ge1xuICAgICAgICByZXR1cm4gY29tcGFyZShrMSwgazIpO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbmNhdGVuYXRlZCA9IGNvbmNhdCguLi5zb3J0ZWQubWFwKHggPT4gY29uY2F0KC4uLngpKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gaGFzaChjb25jYXRlbmF0ZWQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0X2lkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/request_id.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/bls.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/utils/bls.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blsVerify: () => (/* binding */ blsVerify),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/bls12-381 */ \"(ssr)/../../../../../node_modules/@noble/curves/esm/bls12-381.js\");\n/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n\n\nlet verify;\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns boolean\n */\nfunction blsVerify(pk, sig, msg) {\n    const primaryKey = typeof pk === 'string' ? pk : (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.toHex)(pk);\n    const signature = typeof sig === 'string' ? sig : (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.toHex)(sig);\n    const message = typeof msg === 'string' ? msg : (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.toHex)(msg);\n    return _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_1__.bls12_381.verifyShortSignature(signature, message, primaryKey);\n}\n//# sourceMappingURL=bls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vdXRpbHMvYmxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7QUFDbkI7QUFDMUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AscURBQXFELDhDQUFLO0FBQzFELHNEQUFzRCw4Q0FBSztBQUMzRCxvREFBb0QsOENBQUs7QUFDekQsV0FBVyw4REFBUztBQUNwQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS91dGlscy9ibHMuanM/ZWQ0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBibHMxMl8zODEgfSBmcm9tICdAbm9ibGUvY3VydmVzL2JsczEyLTM4MSc7XG5pbXBvcnQgeyB0b0hleCB9IGZyb20gJy4vYnVmZmVyJztcbmV4cG9ydCBsZXQgdmVyaWZ5O1xuLyoqXG4gKlxuICogQHBhcmFtIHBrIHByaW1hcnkga2V5OiBVaW50OEFycmF5XG4gKiBAcGFyYW0gc2lnIHNpZ25hdHVyZTogVWludDhBcnJheVxuICogQHBhcmFtIG1zZyBtZXNzYWdlOiBVaW50OEFycmF5XG4gKiBAcmV0dXJucyBib29sZWFuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBibHNWZXJpZnkocGssIHNpZywgbXNnKSB7XG4gICAgY29uc3QgcHJpbWFyeUtleSA9IHR5cGVvZiBwayA9PT0gJ3N0cmluZycgPyBwayA6IHRvSGV4KHBrKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSB0eXBlb2Ygc2lnID09PSAnc3RyaW5nJyA/IHNpZyA6IHRvSGV4KHNpZyk7XG4gICAgY29uc3QgbWVzc2FnZSA9IHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnID8gbXNnIDogdG9IZXgobXNnKTtcbiAgICByZXR1cm4gYmxzMTJfMzgxLnZlcmlmeVNob3J0U2lnbmF0dXJlKHNpZ25hdHVyZSwgbWVzc2FnZSwgcHJpbWFyeUtleSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/bls.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufEquals: () => (/* binding */ bufEquals),\n/* harmony export */   bufFromBufLike: () => (/* binding */ bufFromBufLike),\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   uint8ToBuf: () => (/* binding */ uint8ToBuf)\n/* harmony export */ });\n/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nfunction concat(...buffers) {\n    const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n    let index = 0;\n    for (const b of buffers) {\n        result.set(new Uint8Array(b), index);\n        index += b.byteLength;\n    }\n    return result.buffer;\n}\n/**\n * Transforms a buffer to an hexadecimal string. This will use the buffer as an Uint8Array.\n * @param buffer The buffer to return the hexadecimal string of.\n */\nfunction toHex(buffer) {\n    return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n}\nconst hexRe = new RegExp(/^[0-9a-fA-F]+$/);\n/**\n * Transforms a hexadecimal string into an array buffer.\n * @param hex The hexadecimal string to use.\n */\nfunction fromHex(hex) {\n    if (!hexRe.test(hex)) {\n        throw new Error('Invalid hexadecimal string.');\n    }\n    const buffer = [...hex]\n        .reduce((acc, curr, i) => {\n        acc[(i / 2) | 0] = (acc[(i / 2) | 0] || '') + curr;\n        return acc;\n    }, [])\n        .map(x => Number.parseInt(x, 16));\n    return new Uint8Array(buffer).buffer;\n}\n/**\n *\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns number - negative if b1 < b2, positive if b1 > b2, 0 if b1 === b2\n */\nfunction compare(b1, b2) {\n    if (b1.byteLength !== b2.byteLength) {\n        return b1.byteLength - b2.byteLength;\n    }\n    const u1 = new Uint8Array(b1);\n    const u2 = new Uint8Array(b2);\n    for (let i = 0; i < u1.length; i++) {\n        if (u1[i] !== u2[i]) {\n            return u1[i] - u2[i];\n        }\n    }\n    return 0;\n}\n/**\n * Checks two array buffers for equality.\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns boolean\n */\nfunction bufEquals(b1, b2) {\n    return compare(b1, b2) === 0;\n}\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nfunction uint8ToBuf(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nfunction bufFromBufLike(bufLike) {\n    if (bufLike instanceof Uint8Array) {\n        return uint8ToBuf(bufLike);\n    }\n    if (bufLike instanceof ArrayBuffer) {\n        return bufLike;\n    }\n    if (Array.isArray(bufLike)) {\n        return uint8ToBuf(new Uint8Array(bufLike));\n    }\n    if ('buffer' in bufLike) {\n        return bufFromBufLike(bufLike.buffer);\n    }\n    return uint8ToBuf(new Uint8Array(bufLike));\n}\n//# sourceMappingURL=buffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vdXRpbHMvYnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS91dGlscy9idWZmZXIuanM/Y2Y4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbmNhdGVuYXRlIG11bHRpcGxlIGFycmF5IGJ1ZmZlcnMuXG4gKiBAcGFyYW0gYnVmZmVycyBUaGUgYnVmZmVycyB0byBjb25jYXRlbmF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCguLi5idWZmZXJzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVycy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci5ieXRlTGVuZ3RoLCAwKSk7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IGIgb2YgYnVmZmVycykge1xuICAgICAgICByZXN1bHQuc2V0KG5ldyBVaW50OEFycmF5KGIpLCBpbmRleCk7XG4gICAgICAgIGluZGV4ICs9IGIuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgYSBidWZmZXIgdG8gYW4gaGV4YWRlY2ltYWwgc3RyaW5nLiBUaGlzIHdpbGwgdXNlIHRoZSBidWZmZXIgYXMgYW4gVWludDhBcnJheS5cbiAqIEBwYXJhbSBidWZmZXIgVGhlIGJ1ZmZlciB0byByZXR1cm4gdGhlIGhleGFkZWNpbWFsIHN0cmluZyBvZi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4KGJ1ZmZlcikge1xuICAgIHJldHVybiBbLi4ubmV3IFVpbnQ4QXJyYXkoYnVmZmVyKV0ubWFwKHggPT4geC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG59XG5jb25zdCBoZXhSZSA9IG5ldyBSZWdFeHAoL15bMC05YS1mQS1GXSskLyk7XG4vKipcbiAqIFRyYW5zZm9ybXMgYSBoZXhhZGVjaW1hbCBzdHJpbmcgaW50byBhbiBhcnJheSBidWZmZXIuXG4gKiBAcGFyYW0gaGV4IFRoZSBoZXhhZGVjaW1hbCBzdHJpbmcgdG8gdXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUhleChoZXgpIHtcbiAgICBpZiAoIWhleFJlLnRlc3QoaGV4KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGV4YWRlY2ltYWwgc3RyaW5nLicpO1xuICAgIH1cbiAgICBjb25zdCBidWZmZXIgPSBbLi4uaGV4XVxuICAgICAgICAucmVkdWNlKChhY2MsIGN1cnIsIGkpID0+IHtcbiAgICAgICAgYWNjWyhpIC8gMikgfCAwXSA9IChhY2NbKGkgLyAyKSB8IDBdIHx8ICcnKSArIGN1cnI7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pXG4gICAgICAgIC5tYXAoeCA9PiBOdW1iZXIucGFyc2VJbnQoeCwgMTYpKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKS5idWZmZXI7XG59XG4vKipcbiAqXG4gKiBAcGFyYW0gYjEgYXJyYXkgYnVmZmVyIDFcbiAqIEBwYXJhbSBiMiBhcnJheSBidWZmZXIgMlxuICogQHJldHVybnMgbnVtYmVyIC0gbmVnYXRpdmUgaWYgYjEgPCBiMiwgcG9zaXRpdmUgaWYgYjEgPiBiMiwgMCBpZiBiMSA9PT0gYjJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmUoYjEsIGIyKSB7XG4gICAgaWYgKGIxLmJ5dGVMZW5ndGggIT09IGIyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGIxLmJ5dGVMZW5ndGggLSBiMi5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCB1MSA9IG5ldyBVaW50OEFycmF5KGIxKTtcbiAgICBjb25zdCB1MiA9IG5ldyBVaW50OEFycmF5KGIyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHUxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh1MVtpXSAhPT0gdTJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiB1MVtpXSAtIHUyW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuLyoqXG4gKiBDaGVja3MgdHdvIGFycmF5IGJ1ZmZlcnMgZm9yIGVxdWFsaXR5LlxuICogQHBhcmFtIGIxIGFycmF5IGJ1ZmZlciAxXG4gKiBAcGFyYW0gYjIgYXJyYXkgYnVmZmVyIDJcbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZkVxdWFscyhiMSwgYjIpIHtcbiAgICByZXR1cm4gY29tcGFyZShiMSwgYjIpID09PSAwO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgdHJ1ZSBBcnJheUJ1ZmZlciBmcm9tIGEgVWludDhBcnJheSwgYXMgVWludDhBcnJheS5idWZmZXIgaXMgdW5zYWZlLlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBhcnIgVWludDhBcnJheSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBBcnJheUJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gdWludDhUb0J1ZihhcnIpIHtcbiAgICByZXR1cm4gbmV3IERhdGFWaWV3KGFyci5idWZmZXIsIGFyci5ieXRlT2Zmc2V0LCBhcnIuYnl0ZUxlbmd0aCkuYnVmZmVyO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgdHJ1ZSBBcnJheUJ1ZmZlciBmcm9tIGFuIEFycmF5QnVmZmVyTGlrZSBvYmplY3QuXG4gKiBAcGFyYW0gYnVmTGlrZSBhIGJ1ZmZlci1saWtlIG9iamVjdFxuICogQHJldHVybnMgQXJyYXlCdWZmZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZkZyb21CdWZMaWtlKGJ1Zkxpa2UpIHtcbiAgICBpZiAoYnVmTGlrZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHVpbnQ4VG9CdWYoYnVmTGlrZSk7XG4gICAgfVxuICAgIGlmIChidWZMaWtlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGJ1Zkxpa2U7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGJ1Zkxpa2UpKSB7XG4gICAgICAgIHJldHVybiB1aW50OFRvQnVmKG5ldyBVaW50OEFycmF5KGJ1Zkxpa2UpKTtcbiAgICB9XG4gICAgaWYgKCdidWZmZXInIGluIGJ1Zkxpa2UpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZkZyb21CdWZMaWtlKGJ1Zkxpa2UuYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHVpbnQ4VG9CdWYobmV3IFVpbnQ4QXJyYXkoYnVmTGlrZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/buffer.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js":
/*!********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpirableMap: () => (/* binding */ ExpirableMap)\n/* harmony export */ });\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ExpirableMap_inner, _ExpirableMap_expirationTime, _a, _b;\n/**\n * A map that expires entries after a given time.\n * Defaults to 10 minutes.\n */\nclass ExpirableMap {\n    /**\n     * Create a new ExpirableMap.\n     * @param {ExpirableMapOptions<any, any>} options - options for the map.\n     * @param {Iterable<[any, any]>} options.source - an optional source of entries to initialize the map with.\n     * @param {number} options.expirationTime - the time in milliseconds after which entries will expire.\n     */\n    constructor(options = {}) {\n        // Internals\n        _ExpirableMap_inner.set(this, void 0);\n        _ExpirableMap_expirationTime.set(this, void 0);\n        this[_a] = this.entries.bind(this);\n        this[_b] = 'ExpirableMap';\n        const { source = [], expirationTime = 10 * 60 * 1000 } = options;\n        const currentTime = Date.now();\n        __classPrivateFieldSet(this, _ExpirableMap_inner, new Map([...source].map(([key, value]) => [key, { value, timestamp: currentTime }])), \"f\");\n        __classPrivateFieldSet(this, _ExpirableMap_expirationTime, expirationTime, \"f\");\n    }\n    /**\n     * Prune removes all expired entries.\n     */\n    prune() {\n        const currentTime = Date.now();\n        for (const [key, entry] of __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").entries()) {\n            if (currentTime - entry.timestamp > __classPrivateFieldGet(this, _ExpirableMap_expirationTime, \"f\")) {\n                __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").delete(key);\n            }\n        }\n        return this;\n    }\n    // Implementing the Map interface\n    /**\n     * Set the value for the given key. Prunes expired entries.\n     * @param key for the entry\n     * @param value of the entry\n     * @returns this\n     */\n    set(key, value) {\n        this.prune();\n        const entry = {\n            value,\n            timestamp: Date.now(),\n        };\n        __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").set(key, entry);\n        return this;\n    }\n    /**\n     * Get the value associated with the key, if it exists and has not expired.\n     * @param key K\n     * @returns the value associated with the key, or undefined if the key is not present or has expired.\n     */\n    get(key) {\n        const entry = __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").get(key);\n        if (entry === undefined) {\n            return undefined;\n        }\n        if (Date.now() - entry.timestamp > __classPrivateFieldGet(this, _ExpirableMap_expirationTime, \"f\")) {\n            __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").delete(key);\n            return undefined;\n        }\n        return entry.value;\n    }\n    /**\n     * Clear all entries.\n     */\n    clear() {\n        __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").clear();\n    }\n    /**\n     * Entries returns the entries of the map, without the expiration time.\n     * @returns an iterator over the entries of the map.\n     */\n    entries() {\n        const iterator = __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").entries();\n        const generator = function* () {\n            for (const [key, value] of iterator) {\n                yield [key, value.value];\n            }\n        };\n        return generator();\n    }\n    /**\n     * Values returns the values of the map, without the expiration time.\n     * @returns an iterator over the values of the map.\n     */\n    values() {\n        const iterator = __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").values();\n        const generator = function* () {\n            for (const value of iterator) {\n                yield value.value;\n            }\n        };\n        return generator();\n    }\n    /**\n     * Keys returns the keys of the map\n     * @returns an iterator over the keys of the map.\n     */\n    keys() {\n        return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").keys();\n    }\n    /**\n     * forEach calls the callbackfn on each entry of the map.\n     * @param callbackfn to call on each entry\n     * @param thisArg to use as this when calling the callbackfn\n     */\n    forEach(callbackfn, thisArg) {\n        for (const [key, value] of __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").entries()) {\n            callbackfn.call(thisArg, value.value, key, this);\n        }\n    }\n    /**\n     * has returns true if the key exists and has not expired.\n     * @param key K\n     * @returns true if the key exists and has not expired.\n     */\n    has(key) {\n        return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").has(key);\n    }\n    /**\n     * delete the entry for the given key.\n     * @param key K\n     * @returns true if the key existed and has been deleted.\n     */\n    delete(key) {\n        return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").delete(key);\n    }\n    /**\n     * get size of the map.\n     * @returns the size of the map.\n     */\n    get size() {\n        return __classPrivateFieldGet(this, _ExpirableMap_inner, \"f\").size;\n    }\n}\n_ExpirableMap_inner = new WeakMap(), _ExpirableMap_expirationTime = new WeakMap(), _a = Symbol.iterator, _b = Symbol.toStringTag;\n//# sourceMappingURL=expirableMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/leb.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/utils/leb.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeLeb128: () => (/* binding */ decodeLeb128),\n/* harmony export */   decodeTime: () => (/* binding */ decodeTime)\n/* harmony export */ });\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/index.js\");\n\nconst decodeLeb128 = (buf) => {\n    return (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(new _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.PipeArrayBuffer(buf));\n};\n// time is a LEB128-encoded Nat\nconst decodeTime = (buf) => {\n    const decoded = decodeLeb128(buf);\n    // nanoseconds to milliseconds\n    return new Date(Number(decoded) / 1000000);\n};\n//# sourceMappingURL=leb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vdXRpbHMvbGViLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RDtBQUN0RDtBQUNQLFdBQVcsMERBQVMsS0FBSyw0REFBZTtBQUN4QztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS91dGlscy9sZWIuanM/NTAxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlQXJyYXlCdWZmZXIsIGxlYkRlY29kZSB9IGZyb20gJ0BkZmluaXR5L2NhbmRpZCc7XG5leHBvcnQgY29uc3QgZGVjb2RlTGViMTI4ID0gKGJ1ZikgPT4ge1xuICAgIHJldHVybiBsZWJEZWNvZGUobmV3IFBpcGVBcnJheUJ1ZmZlcihidWYpKTtcbn07XG4vLyB0aW1lIGlzIGEgTEVCMTI4LWVuY29kZWQgTmF0XG5leHBvcnQgY29uc3QgZGVjb2RlVGltZSA9IChidWYpID0+IHtcbiAgICBjb25zdCBkZWNvZGVkID0gZGVjb2RlTGViMTI4KGJ1Zik7XG4gICAgLy8gbmFub3NlY29uZHMgdG8gbWlsbGlzZWNvbmRzXG4gICAgcmV0dXJuIG5ldyBEYXRlKE51bWJlcihkZWNvZGVkKSAvIDEwMDAwMDApO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlYi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/leb.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/random.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/agent/lib/esm/utils/random.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomNumber: () => (/* binding */ randomNumber)\n/* harmony export */ });\n/**\n * Generates a random unsigned 32-bit integer between 0 and 0xffffffff\n * @returns {number} a random number\n */\nconst randomNumber = () => {\n    // determine whether browser crypto is available\n    if (typeof window !== 'undefined' && !!window.crypto && !!window.crypto.getRandomValues) {\n        const array = new Uint32Array(1);\n        window.crypto.getRandomValues(array);\n        return array[0];\n    }\n    // A second check for webcrypto, in case it is loaded under global instead of window\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n        const array = new Uint32Array(1);\n        crypto.getRandomValues(array);\n        return array[0];\n    }\n    // determine whether node crypto is available\n    if (typeof crypto !== 'undefined' && crypto.randomInt) {\n        return crypto.randomInt(0, 0xffffffff);\n    }\n    // fall back to Math.random\n    return Math.floor(Math.random() * 0xffffffff);\n};\n//# sourceMappingURL=random.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vdXRpbHMvcmFuZG9tLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS91dGlscy9yYW5kb20uanM/MWI5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB1bnNpZ25lZCAzMi1iaXQgaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDB4ZmZmZmZmZmZcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGEgcmFuZG9tIG51bWJlclxuICovXG5leHBvcnQgY29uc3QgcmFuZG9tTnVtYmVyID0gKCkgPT4ge1xuICAgIC8vIGRldGVybWluZSB3aGV0aGVyIGJyb3dzZXIgY3J5cHRvIGlzIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhIXdpbmRvdy5jcnlwdG8gJiYgISF3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICAgICAgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXJyYXlbMF07XG4gICAgfVxuICAgIC8vIEEgc2Vjb25kIGNoZWNrIGZvciB3ZWJjcnlwdG8sIGluIGNhc2UgaXQgaXMgbG9hZGVkIHVuZGVyIGdsb2JhbCBpbnN0ZWFkIG9mIHdpbmRvd1xuICAgIGlmICh0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQzMkFycmF5KDEpO1xuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFycmF5WzBdO1xuICAgIH1cbiAgICAvLyBkZXRlcm1pbmUgd2hldGhlciBub2RlIGNyeXB0byBpcyBhdmFpbGFibGVcbiAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbUludCkge1xuICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUludCgwLCAweGZmZmZmZmZmKTtcbiAgICB9XG4gICAgLy8gZmFsbCBiYWNrIHRvIE1hdGgucmFuZG9tXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/utils/random.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/db.js":
/*!**********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/auth-client/lib/esm/db.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdbKeyVal: () => (/* binding */ IdbKeyVal)\n/* harmony export */ });\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb */ \"(ssr)/../../../../../node_modules/idb/build/index.js\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage */ \"(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/storage.js\");\n\n\nconst AUTH_DB_NAME = 'auth-client-db';\nconst OBJECT_STORE_NAME = 'ic-keyval';\nconst _openDbStore = async (dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version) => {\n    // Clear legacy stored delegations\n    if (_storage__WEBPACK_IMPORTED_MODULE_1__.isBrowser && (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(_storage__WEBPACK_IMPORTED_MODULE_1__.KEY_STORAGE_DELEGATION))) {\n        localStorage.removeItem(_storage__WEBPACK_IMPORTED_MODULE_1__.KEY_STORAGE_DELEGATION);\n        localStorage.removeItem(_storage__WEBPACK_IMPORTED_MODULE_1__.KEY_STORAGE_KEY);\n    }\n    return await (0,idb__WEBPACK_IMPORTED_MODULE_0__.openDB)(dbName, version, {\n        upgrade: database => {\n            if (database.objectStoreNames.contains(storeName)) {\n                database.clear(storeName);\n            }\n            database.createObjectStore(storeName);\n        },\n    });\n};\nasync function _getValue(db, storeName, key) {\n    return await db.get(storeName, key);\n}\nasync function _setValue(db, storeName, key, value) {\n    return await db.put(storeName, value, key);\n}\nasync function _removeValue(db, storeName, key) {\n    return await db.delete(storeName, key);\n}\n/**\n * Simple Key Value store\n * Defaults to `'auth-client-db'` with an object store of `'ic-keyval'`\n */\nclass IdbKeyVal {\n    // Do not use - instead prefer create\n    constructor(_db, _storeName) {\n        this._db = _db;\n        this._storeName = _storeName;\n    }\n    /**\n     * @param {DBCreateOptions} options - DBCreateOptions\n     * @param {DBCreateOptions['dbName']} options.dbName name for the indexeddb database\n     * @default\n     * @param {DBCreateOptions['storeName']} options.storeName name for the indexeddb Data Store\n     * @default\n     * @param {DBCreateOptions['version']} options.version version of the database. Increment to safely upgrade\n     * @constructs an {@link IdbKeyVal}\n     */\n    static async create(options) {\n        const { dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version = _storage__WEBPACK_IMPORTED_MODULE_1__.DB_VERSION } = options !== null && options !== void 0 ? options : {};\n        const db = await _openDbStore(dbName, storeName, version);\n        return new IdbKeyVal(db, storeName);\n    }\n    /**\n     * Basic setter\n     * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n     * @param value value to set\n     * @returns void\n     */\n    async set(key, value) {\n        return await _setValue(this._db, this._storeName, key, value);\n    }\n    /**\n     * Basic getter\n     * Pass in a type T for type safety if you know the type the value will have if it is found\n     * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n     * @returns `Promise<T | null>`\n     * @example\n     * await get<string>('exampleKey') -> 'exampleValue'\n     */\n    async get(key) {\n        var _a;\n        return (_a = (await _getValue(this._db, this._storeName, key))) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Remove a key\n     * @param key {@link IDBValidKey}\n     * @returns void\n     */\n    async remove(key) {\n        return await _removeValue(this._db, this._storeName, key);\n    }\n}\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2F1dGgtY2xpZW50L2xpYi9lc20vZGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZCO0FBQzhEO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrQ0FBUyxzRkFBc0YsNERBQXNCO0FBQzdILGdDQUFnQyw0REFBc0I7QUFDdEQsZ0NBQWdDLHFEQUFlO0FBQy9DO0FBQ0EsaUJBQWlCLDJDQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGVBQWUsMkJBQTJCO0FBQzFDO0FBQ0EsZUFBZSw4QkFBOEI7QUFDN0M7QUFDQSxlQUFlLDRCQUE0QjtBQUMzQyx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLGdCQUFnQixnRUFBZ0UsZ0RBQVUsR0FBRztBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2F1dGgtY2xpZW50L2xpYi9lc20vZGIuanM/NTc4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcGVuREIgfSBmcm9tICdpZGInO1xuaW1wb3J0IHsgREJfVkVSU0lPTiwgaXNCcm93c2VyLCBLRVlfU1RPUkFHRV9ERUxFR0FUSU9OLCBLRVlfU1RPUkFHRV9LRVkgfSBmcm9tICcuL3N0b3JhZ2UnO1xuY29uc3QgQVVUSF9EQl9OQU1FID0gJ2F1dGgtY2xpZW50LWRiJztcbmNvbnN0IE9CSkVDVF9TVE9SRV9OQU1FID0gJ2ljLWtleXZhbCc7XG5jb25zdCBfb3BlbkRiU3RvcmUgPSBhc3luYyAoZGJOYW1lID0gQVVUSF9EQl9OQU1FLCBzdG9yZU5hbWUgPSBPQkpFQ1RfU1RPUkVfTkFNRSwgdmVyc2lvbikgPT4ge1xuICAgIC8vIENsZWFyIGxlZ2FjeSBzdG9yZWQgZGVsZWdhdGlvbnNcbiAgICBpZiAoaXNCcm93c2VyICYmIChsb2NhbFN0b3JhZ2UgPT09IG51bGwgfHwgbG9jYWxTdG9yYWdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShLRVlfU1RPUkFHRV9ERUxFR0FUSU9OKSkpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oS0VZX1NUT1JBR0VfREVMRUdBVElPTik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKEtFWV9TVE9SQUdFX0tFWSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBvcGVuREIoZGJOYW1lLCB2ZXJzaW9uLCB7XG4gICAgICAgIHVwZ3JhZGU6IGRhdGFiYXNlID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhYmFzZS5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKHN0b3JlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhYmFzZS5jbGVhcihzdG9yZU5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn07XG5hc3luYyBmdW5jdGlvbiBfZ2V0VmFsdWUoZGIsIHN0b3JlTmFtZSwga2V5KSB7XG4gICAgcmV0dXJuIGF3YWl0IGRiLmdldChzdG9yZU5hbWUsIGtleSk7XG59XG5hc3luYyBmdW5jdGlvbiBfc2V0VmFsdWUoZGIsIHN0b3JlTmFtZSwga2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBhd2FpdCBkYi5wdXQoc3RvcmVOYW1lLCB2YWx1ZSwga2V5KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIF9yZW1vdmVWYWx1ZShkYiwgc3RvcmVOYW1lLCBrZXkpIHtcbiAgICByZXR1cm4gYXdhaXQgZGIuZGVsZXRlKHN0b3JlTmFtZSwga2V5KTtcbn1cbi8qKlxuICogU2ltcGxlIEtleSBWYWx1ZSBzdG9yZVxuICogRGVmYXVsdHMgdG8gYCdhdXRoLWNsaWVudC1kYidgIHdpdGggYW4gb2JqZWN0IHN0b3JlIG9mIGAnaWMta2V5dmFsJ2BcbiAqL1xuZXhwb3J0IGNsYXNzIElkYktleVZhbCB7XG4gICAgLy8gRG8gbm90IHVzZSAtIGluc3RlYWQgcHJlZmVyIGNyZWF0ZVxuICAgIGNvbnN0cnVjdG9yKF9kYiwgX3N0b3JlTmFtZSkge1xuICAgICAgICB0aGlzLl9kYiA9IF9kYjtcbiAgICAgICAgdGhpcy5fc3RvcmVOYW1lID0gX3N0b3JlTmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtEQkNyZWF0ZU9wdGlvbnN9IG9wdGlvbnMgLSBEQkNyZWF0ZU9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0RCQ3JlYXRlT3B0aW9uc1snZGJOYW1lJ119IG9wdGlvbnMuZGJOYW1lIG5hbWUgZm9yIHRoZSBpbmRleGVkZGIgZGF0YWJhc2VcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqIEBwYXJhbSB7REJDcmVhdGVPcHRpb25zWydzdG9yZU5hbWUnXX0gb3B0aW9ucy5zdG9yZU5hbWUgbmFtZSBmb3IgdGhlIGluZGV4ZWRkYiBEYXRhIFN0b3JlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiBAcGFyYW0ge0RCQ3JlYXRlT3B0aW9uc1sndmVyc2lvbiddfSBvcHRpb25zLnZlcnNpb24gdmVyc2lvbiBvZiB0aGUgZGF0YWJhc2UuIEluY3JlbWVudCB0byBzYWZlbHkgdXBncmFkZVxuICAgICAqIEBjb25zdHJ1Y3RzIGFuIHtAbGluayBJZGJLZXlWYWx9XG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgZGJOYW1lID0gQVVUSF9EQl9OQU1FLCBzdG9yZU5hbWUgPSBPQkpFQ1RfU1RPUkVfTkFNRSwgdmVyc2lvbiA9IERCX1ZFUlNJT04gfSA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IF9vcGVuRGJTdG9yZShkYk5hbWUsIHN0b3JlTmFtZSwgdmVyc2lvbik7XG4gICAgICAgIHJldHVybiBuZXcgSWRiS2V5VmFsKGRiLCBzdG9yZU5hbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCYXNpYyBzZXR0ZXJcbiAgICAgKiBAcGFyYW0ge0lEQlZhbGlkS2V5fSBrZXkgc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSB8IEJ1ZmZlclNvdXJjZSB8IElEQlZhbGlkS2V5W11cbiAgICAgKiBAcGFyYW0gdmFsdWUgdmFsdWUgdG8gc2V0XG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqL1xuICAgIGFzeW5jIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBfc2V0VmFsdWUodGhpcy5fZGIsIHRoaXMuX3N0b3JlTmFtZSwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJhc2ljIGdldHRlclxuICAgICAqIFBhc3MgaW4gYSB0eXBlIFQgZm9yIHR5cGUgc2FmZXR5IGlmIHlvdSBrbm93IHRoZSB0eXBlIHRoZSB2YWx1ZSB3aWxsIGhhdmUgaWYgaXQgaXMgZm91bmRcbiAgICAgKiBAcGFyYW0ge0lEQlZhbGlkS2V5fSBrZXkgc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSB8IEJ1ZmZlclNvdXJjZSB8IElEQlZhbGlkS2V5W11cbiAgICAgKiBAcmV0dXJucyBgUHJvbWlzZTxUIHwgbnVsbD5gXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBhd2FpdCBnZXQ8c3RyaW5nPignZXhhbXBsZUtleScpIC0+ICdleGFtcGxlVmFsdWUnXG4gICAgICovXG4gICAgYXN5bmMgZ2V0KGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSAoYXdhaXQgX2dldFZhbHVlKHRoaXMuX2RiLCB0aGlzLl9zdG9yZU5hbWUsIGtleSkpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBrZXlcbiAgICAgKiBAcGFyYW0ga2V5IHtAbGluayBJREJWYWxpZEtleX1cbiAgICAgKiBAcmV0dXJucyB2b2lkXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlKGtleSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgX3JlbW92ZVZhbHVlKHRoaXMuX2RiLCB0aGlzLl9zdG9yZU5hbWUsIGtleSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/db.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/idleManager.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/auth-client/lib/esm/idleManager.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdleManager: () => (/* binding */ IdleManager)\n/* harmony export */ });\nconst events = ['mousedown', 'mousemove', 'keydown', 'touchstart', 'wheel'];\n/**\n * Detects if the user has been idle for a duration of `idleTimeout` ms, and calls `onIdle` and registered callbacks.\n * By default, the IdleManager will log a user out after 10 minutes of inactivity.\n * To override these defaults, you can pass an `onIdle` callback, or configure a custom `idleTimeout` in milliseconds\n */\nclass IdleManager {\n    /**\n     * @protected\n     * @param options {@link IdleManagerOptions}\n     */\n    constructor(options = {}) {\n        var _a;\n        this.callbacks = [];\n        this.idleTimeout = 10 * 60 * 1000;\n        this.timeoutID = undefined;\n        const { onIdle, idleTimeout = 10 * 60 * 1000 } = options || {};\n        this.callbacks = onIdle ? [onIdle] : [];\n        this.idleTimeout = idleTimeout;\n        const _resetTimer = this._resetTimer.bind(this);\n        window.addEventListener('load', _resetTimer, true);\n        events.forEach(function (name) {\n            document.addEventListener(name, _resetTimer, true);\n        });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n        const debounce = (func, wait) => {\n            let timeout;\n            return (...args) => {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                const context = this;\n                const later = function () {\n                    timeout = undefined;\n                    func.apply(context, args);\n                };\n                clearTimeout(timeout);\n                timeout = window.setTimeout(later, wait);\n            };\n        };\n        if (options === null || options === void 0 ? void 0 : options.captureScroll) {\n            // debounce scroll events\n            const scroll = debounce(_resetTimer, (_a = options === null || options === void 0 ? void 0 : options.scrollDebounce) !== null && _a !== void 0 ? _a : 100);\n            window.addEventListener('scroll', scroll, true);\n        }\n        _resetTimer();\n    }\n    /**\n     * Creates an {@link IdleManager}\n     * @param {IdleManagerOptions} options Optional configuration\n     * @see {@link IdleManagerOptions}\n     * @param options.onIdle Callback once user has been idle. Use to prompt for fresh login, and use `Actor.agentOf(your_actor).invalidateIdentity()` to protect the user\n     * @param options.idleTimeout timeout in ms\n     * @param options.captureScroll capture scroll events\n     * @param options.scrollDebounce scroll debounce time in ms\n     */\n    static create(options = {}) {\n        return new this(options);\n    }\n    /**\n     * @param {IdleCB} callback function to be called when user goes idle\n     */\n    registerCallback(callback) {\n        this.callbacks.push(callback);\n    }\n    /**\n     * Cleans up the idle manager and its listeners\n     */\n    exit() {\n        clearTimeout(this.timeoutID);\n        window.removeEventListener('load', this._resetTimer, true);\n        const _resetTimer = this._resetTimer.bind(this);\n        events.forEach(function (name) {\n            document.removeEventListener(name, _resetTimer, true);\n        });\n        this.callbacks.forEach(cb => cb());\n    }\n    /**\n     * Resets the timeouts during cleanup\n     */\n    _resetTimer() {\n        const exit = this.exit.bind(this);\n        window.clearTimeout(this.timeoutID);\n        this.timeoutID = window.setTimeout(exit, this.idleTimeout);\n    }\n}\n//# sourceMappingURL=idleManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2F1dGgtY2xpZW50L2xpYi9lc20vaWRsZU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1Q0FBdUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLGVBQWUsb0JBQW9CO0FBQ25DLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hdXRoLWNsaWVudC9saWIvZXNtL2lkbGVNYW5hZ2VyLmpzPzk5MTgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXZlbnRzID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ2tleWRvd24nLCAndG91Y2hzdGFydCcsICd3aGVlbCddO1xuLyoqXG4gKiBEZXRlY3RzIGlmIHRoZSB1c2VyIGhhcyBiZWVuIGlkbGUgZm9yIGEgZHVyYXRpb24gb2YgYGlkbGVUaW1lb3V0YCBtcywgYW5kIGNhbGxzIGBvbklkbGVgIGFuZCByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqIEJ5IGRlZmF1bHQsIHRoZSBJZGxlTWFuYWdlciB3aWxsIGxvZyBhIHVzZXIgb3V0IGFmdGVyIDEwIG1pbnV0ZXMgb2YgaW5hY3Rpdml0eS5cbiAqIFRvIG92ZXJyaWRlIHRoZXNlIGRlZmF1bHRzLCB5b3UgY2FuIHBhc3MgYW4gYG9uSWRsZWAgY2FsbGJhY2ssIG9yIGNvbmZpZ3VyZSBhIGN1c3RvbSBgaWRsZVRpbWVvdXRgIGluIG1pbGxpc2Vjb25kc1xuICovXG5leHBvcnQgY2xhc3MgSWRsZU1hbmFnZXIge1xuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7QGxpbmsgSWRsZU1hbmFnZXJPcHRpb25zfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuaWRsZVRpbWVvdXQgPSAxMCAqIDYwICogMTAwMDtcbiAgICAgICAgdGhpcy50aW1lb3V0SUQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHsgb25JZGxlLCBpZGxlVGltZW91dCA9IDEwICogNjAgKiAxMDAwIH0gPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IG9uSWRsZSA/IFtvbklkbGVdIDogW107XG4gICAgICAgIHRoaXMuaWRsZVRpbWVvdXQgPSBpZGxlVGltZW91dDtcbiAgICAgICAgY29uc3QgX3Jlc2V0VGltZXIgPSB0aGlzLl9yZXNldFRpbWVyLmJpbmQodGhpcyk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgX3Jlc2V0VGltZXIsIHRydWUpO1xuICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBfcmVzZXRUaW1lciwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1mdW5jdGlvbi10eXBlXG4gICAgICAgIGNvbnN0IGRlYm91bmNlID0gKGZ1bmMsIHdhaXQpID0+IHtcbiAgICAgICAgICAgIGxldCB0aW1lb3V0O1xuICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgY29uc3QgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2FwdHVyZVNjcm9sbCkge1xuICAgICAgICAgICAgLy8gZGVib3VuY2Ugc2Nyb2xsIGV2ZW50c1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsID0gZGVib3VuY2UoX3Jlc2V0VGltZXIsIChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zY3JvbGxEZWJvdW5jZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMTAwKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGwsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIF9yZXNldFRpbWVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4ge0BsaW5rIElkbGVNYW5hZ2VyfVxuICAgICAqIEBwYXJhbSB7SWRsZU1hbmFnZXJPcHRpb25zfSBvcHRpb25zIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAc2VlIHtAbGluayBJZGxlTWFuYWdlck9wdGlvbnN9XG4gICAgICogQHBhcmFtIG9wdGlvbnMub25JZGxlIENhbGxiYWNrIG9uY2UgdXNlciBoYXMgYmVlbiBpZGxlLiBVc2UgdG8gcHJvbXB0IGZvciBmcmVzaCBsb2dpbiwgYW5kIHVzZSBgQWN0b3IuYWdlbnRPZih5b3VyX2FjdG9yKS5pbnZhbGlkYXRlSWRlbnRpdHkoKWAgdG8gcHJvdGVjdCB0aGUgdXNlclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmlkbGVUaW1lb3V0IHRpbWVvdXQgaW4gbXNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jYXB0dXJlU2Nyb2xsIGNhcHR1cmUgc2Nyb2xsIGV2ZW50c1xuICAgICAqIEBwYXJhbSBvcHRpb25zLnNjcm9sbERlYm91bmNlIHNjcm9sbCBkZWJvdW5jZSB0aW1lIGluIG1zXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0lkbGVDQn0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdXNlciBnb2VzIGlkbGVcbiAgICAgKi9cbiAgICByZWdpc3RlckNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgdGhlIGlkbGUgbWFuYWdlciBhbmQgaXRzIGxpc3RlbmVyc1xuICAgICAqL1xuICAgIGV4aXQoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJRCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5fcmVzZXRUaW1lciwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IF9yZXNldFRpbWVyID0gdGhpcy5fcmVzZXRUaW1lci5iaW5kKHRoaXMpO1xuICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBfcmVzZXRUaW1lciwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcy5mb3JFYWNoKGNiID0+IGNiKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHRpbWVvdXRzIGR1cmluZyBjbGVhbnVwXG4gICAgICovXG4gICAgX3Jlc2V0VGltZXIoKSB7XG4gICAgICAgIGNvbnN0IGV4aXQgPSB0aGlzLmV4aXQuYmluZCh0aGlzKTtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJRCk7XG4gICAgICAgIHRoaXMudGltZW91dElEID0gd2luZG93LnNldFRpbWVvdXQoZXhpdCwgdGhpcy5pZGxlVGltZW91dCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRsZU1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/idleManager.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/index.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/auth-client/lib/esm/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthClient: () => (/* binding */ AuthClient),\n/* harmony export */   ERROR_USER_INTERRUPT: () => (/* binding */ ERROR_USER_INTERRUPT),\n/* harmony export */   IdbKeyVal: () => (/* reexport safe */ _db__WEBPACK_IMPORTED_MODULE_4__.IdbKeyVal),\n/* harmony export */   IdbStorage: () => (/* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.IdbStorage),\n/* harmony export */   IdleManager: () => (/* reexport safe */ _idleManager__WEBPACK_IMPORTED_MODULE_2__.IdleManager),\n/* harmony export */   KEY_STORAGE_DELEGATION: () => (/* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION),\n/* harmony export */   KEY_STORAGE_KEY: () => (/* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY),\n/* harmony export */   LocalStorage: () => (/* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_3__.LocalStorage)\n/* harmony export */ });\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js\");\n/* harmony import */ var _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/identity */ \"(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/index.js\");\n/* harmony import */ var _idleManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./idleManager */ \"(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/idleManager.js\");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ \"(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/storage.js\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db */ \"(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/db.js\");\n/** @module AuthClient */\n\n\n\n\n\n\nconst IDENTITY_PROVIDER_DEFAULT = 'https://identity.ic0.app';\nconst IDENTITY_PROVIDER_ENDPOINT = '#authorize';\nconst ECDSA_KEY_LABEL = 'ECDSA';\nconst ED25519_KEY_LABEL = 'Ed25519';\nconst INTERRUPT_CHECK_INTERVAL = 500;\nconst ERROR_USER_INTERRUPT = 'UserInterrupt';\n\n/**\n * Tool to manage authentication and identity\n * @see {@link AuthClient}\n */\nclass AuthClient {\n    constructor(_identity, _key, _chain, _storage, idleManager, _createOptions, \n    // A handle on the IdP window.\n    _idpWindow, \n    // The event handler for processing events from the IdP.\n    _eventHandler) {\n        this._identity = _identity;\n        this._key = _key;\n        this._chain = _chain;\n        this._storage = _storage;\n        this.idleManager = idleManager;\n        this._createOptions = _createOptions;\n        this._idpWindow = _idpWindow;\n        this._eventHandler = _eventHandler;\n        this._registerDefaultIdleCallback();\n    }\n    /**\n     * Create an AuthClient to manage authentication and identity\n     * @constructs\n     * @param {AuthClientCreateOptions} options - Options for creating an {@link AuthClient}\n     * @see {@link AuthClientCreateOptions}\n     * @param options.identity Optional Identity to use as the base\n     * @see {@link SignIdentity}\n     * @param options.storage Storage mechanism for delegration credentials\n     * @see {@link AuthClientStorage}\n     * @param options.keyType Type of key to use for the base key\n     * @param {IdleOptions} options.idleOptions Configures an {@link IdleManager}\n     * @see {@link IdleOptions}\n     * Default behavior is to clear stored identity and reload the page when a user goes idle, unless you set the disableDefaultIdleCallback flag or pass in a custom idle callback.\n     * @example\n     * const authClient = await AuthClient.create({\n     *   idleOptions: {\n     *     disableIdle: true\n     *   }\n     * })\n     */\n    static async create(options = {}) {\n        var _a, _b, _c;\n        const storage = (_a = options.storage) !== null && _a !== void 0 ? _a : new _storage__WEBPACK_IMPORTED_MODULE_3__.IdbStorage();\n        const keyType = (_b = options.keyType) !== null && _b !== void 0 ? _b : ECDSA_KEY_LABEL;\n        let key = null;\n        if (options.identity) {\n            key = options.identity;\n        }\n        else {\n            let maybeIdentityStorage = await storage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n            if (!maybeIdentityStorage && _storage__WEBPACK_IMPORTED_MODULE_3__.isBrowser) {\n                // Attempt to migrate from localstorage\n                try {\n                    const fallbackLocalStorage = new _storage__WEBPACK_IMPORTED_MODULE_3__.LocalStorage();\n                    const localChain = await fallbackLocalStorage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n                    const localKey = await fallbackLocalStorage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n                    // not relevant for Ed25519\n                    if (localChain && localKey && keyType === ECDSA_KEY_LABEL) {\n                        console.log('Discovered an identity stored in localstorage. Migrating to IndexedDB');\n                        await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION, localChain);\n                        await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY, localKey);\n                        maybeIdentityStorage = localChain;\n                        // clean up\n                        await fallbackLocalStorage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n                        await fallbackLocalStorage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n                    }\n                }\n                catch (error) {\n                    console.error('error while attempting to recover localstorage: ' + error);\n                }\n            }\n            if (maybeIdentityStorage) {\n                try {\n                    if (typeof maybeIdentityStorage === 'object') {\n                        if (keyType === ED25519_KEY_LABEL && typeof maybeIdentityStorage === 'string') {\n                            key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Ed25519KeyIdentity.fromJSON(maybeIdentityStorage);\n                        }\n                        else {\n                            key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.ECDSAKeyIdentity.fromKeyPair(maybeIdentityStorage);\n                        }\n                    }\n                    else if (typeof maybeIdentityStorage === 'string') {\n                        // This is a legacy identity, which is a serialized Ed25519KeyIdentity.\n                        key = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Ed25519KeyIdentity.fromJSON(maybeIdentityStorage);\n                    }\n                }\n                catch (_d) {\n                    // Ignore this, this means that the localStorage value isn't a valid Ed25519KeyIdentity or ECDSAKeyIdentity\n                    // serialization.\n                }\n            }\n        }\n        let identity = new _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.AnonymousIdentity();\n        let chain = null;\n        if (key) {\n            try {\n                const chainStorage = await storage.get(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n                if (typeof chainStorage === 'object' && chainStorage !== null) {\n                    throw new Error('Delegation chain is incorrectly stored. A delegation chain should be stored as a string.');\n                }\n                if (options.identity) {\n                    identity = options.identity;\n                }\n                else if (chainStorage) {\n                    chain = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationChain.fromJSON(chainStorage);\n                    // Verify that the delegation isn't expired.\n                    if (!(0,_dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.isDelegationValid)(chain)) {\n                        await _deleteStorage(storage);\n                        key = null;\n                    }\n                    else {\n                        // If the key is a public key, then we create a PartialDelegationIdentity.\n                        if ('toDer' in key) {\n                            identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.PartialDelegationIdentity.fromDelegation(key, chain);\n                            // otherwise, we create a DelegationIdentity.\n                        }\n                        else {\n                            identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationIdentity.fromDelegation(key, chain);\n                        }\n                    }\n                }\n            }\n            catch (e) {\n                console.error(e);\n                // If there was a problem loading the chain, delete the key.\n                await _deleteStorage(storage);\n                key = null;\n            }\n        }\n        let idleManager = undefined;\n        if ((_c = options.idleOptions) === null || _c === void 0 ? void 0 : _c.disableIdle) {\n            idleManager = undefined;\n        }\n        // if there is a delegation chain or provided identity, setup idleManager\n        else if (chain || options.identity) {\n            idleManager = _idleManager__WEBPACK_IMPORTED_MODULE_2__.IdleManager.create(options.idleOptions);\n        }\n        if (!key) {\n            // Create a new key (whether or not one was in storage).\n            if (keyType === ED25519_KEY_LABEL) {\n                key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Ed25519KeyIdentity.generate();\n                await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY, JSON.stringify(key.toJSON()));\n            }\n            else {\n                if (options.storage && keyType === ECDSA_KEY_LABEL) {\n                    console.warn(`You are using a custom storage provider that may not support CryptoKey storage. If you are using a custom storage provider that does not support CryptoKey storage, you should use '${ED25519_KEY_LABEL}' as the key type, as it can serialize to a string`);\n                }\n                key = await _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.ECDSAKeyIdentity.generate();\n                await storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY, key.getKeyPair());\n            }\n        }\n        return new this(identity, key, chain, storage, idleManager, options);\n    }\n    _registerDefaultIdleCallback() {\n        var _a, _b;\n        const idleOptions = (_a = this._createOptions) === null || _a === void 0 ? void 0 : _a.idleOptions;\n        /**\n         * Default behavior is to clear stored identity and reload the page.\n         * By either setting the disableDefaultIdleCallback flag or passing in a custom idle callback, we will ignore this config\n         */\n        if (!(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.onIdle) && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableDefaultIdleCallback)) {\n            (_b = this.idleManager) === null || _b === void 0 ? void 0 : _b.registerCallback(() => {\n                this.logout();\n                location.reload();\n            });\n        }\n    }\n    async _handleSuccess(message, onSuccess) {\n        var _a, _b;\n        const delegations = message.delegations.map(signedDelegation => {\n            return {\n                delegation: new _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.Delegation(signedDelegation.delegation.pubkey, signedDelegation.delegation.expiration, signedDelegation.delegation.targets),\n                signature: signedDelegation.signature.buffer,\n            };\n        });\n        const delegationChain = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationChain.fromDelegations(delegations, message.userPublicKey.buffer);\n        const key = this._key;\n        if (!key) {\n            return;\n        }\n        this._chain = delegationChain;\n        if ('toDer' in key) {\n            this._identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.PartialDelegationIdentity.fromDelegation(key, this._chain);\n        }\n        else {\n            this._identity = _dfinity_identity__WEBPACK_IMPORTED_MODULE_1__.DelegationIdentity.fromDelegation(key, this._chain);\n        }\n        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();\n        const idleOptions = (_b = this._createOptions) === null || _b === void 0 ? void 0 : _b.idleOptions;\n        // create the idle manager on a successful login if we haven't disabled it\n        // and it doesn't already exist.\n        if (!this.idleManager && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableIdle)) {\n            this.idleManager = _idleManager__WEBPACK_IMPORTED_MODULE_2__.IdleManager.create(idleOptions);\n            this._registerDefaultIdleCallback();\n        }\n        this._removeEventListener();\n        delete this._idpWindow;\n        if (this._chain) {\n            await this._storage.set(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION, JSON.stringify(this._chain.toJSON()));\n        }\n        // onSuccess should be the last thing to do to avoid consumers\n        // interfering by navigating or refreshing the page\n        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(message);\n    }\n    getIdentity() {\n        return this._identity;\n    }\n    async isAuthenticated() {\n        return !this.getIdentity().getPrincipal().isAnonymous() && this._chain !== null;\n    }\n    /**\n     * AuthClient Login -\n     * Opens up a new window to authenticate with Internet Identity\n     * @param {AuthClientLoginOptions} options - Options for logging in\n     * @param options.identityProvider Identity provider\n     * @param options.maxTimeToLive Expiration of the authentication in nanoseconds\n     * @param options.allowPinAuthentication If present, indicates whether or not the Identity Provider should allow the user to authenticate and/or register using a temporary key/PIN identity. Authenticating dapps may want to prevent users from using Temporary keys/PIN identities because Temporary keys/PIN identities are less secure than Passkeys (webauthn credentials) and because Temporary keys/PIN identities generally only live in a browser database (which may get cleared by the browser/OS).\n     * @param options.derivationOrigin Origin for Identity Provider to use while generating the delegated identity\n     * @param options.windowOpenerFeatures Configures the opened authentication window\n     * @param options.onSuccess Callback once login has completed\n     * @param options.onError Callback in case authentication fails\n     * @example\n     * const authClient = await AuthClient.create();\n     * authClient.login({\n     *  identityProvider: 'http://<canisterID>.127.0.0.1:8000',\n     *  maxTimeToLive: BigInt (7) * BigInt(24) * BigInt(3_600_000_000_000), // 1 week\n     *  windowOpenerFeatures: \"toolbar=0,location=0,menubar=0,width=500,height=500,left=100,top=100\",\n     *  onSuccess: () => {\n     *    console.log('Login Successful!');\n     *  },\n     *  onError: (error) => {\n     *    console.error('Login Failed: ', error);\n     *  }\n     * });\n     */\n    async login(options) {\n        var _a, _b, _c, _d;\n        // Set default maxTimeToLive to 8 hours\n        const defaultTimeToLive = /* hours */ BigInt(8) * /* nanoseconds */ BigInt(3600000000000);\n        // Create the URL of the IDP. (e.g. https://XXXX/#authorize)\n        const identityProviderUrl = new URL(((_a = options === null || options === void 0 ? void 0 : options.identityProvider) === null || _a === void 0 ? void 0 : _a.toString()) || IDENTITY_PROVIDER_DEFAULT);\n        // Set the correct hash if it isn't already set.\n        identityProviderUrl.hash = IDENTITY_PROVIDER_ENDPOINT;\n        // If `login` has been called previously, then close/remove any previous windows\n        // and event listeners.\n        (_b = this._idpWindow) === null || _b === void 0 ? void 0 : _b.close();\n        this._removeEventListener();\n        // Add an event listener to handle responses.\n        this._eventHandler = this._getEventHandler(identityProviderUrl, Object.assign({ maxTimeToLive: (_c = options === null || options === void 0 ? void 0 : options.maxTimeToLive) !== null && _c !== void 0 ? _c : defaultTimeToLive }, options));\n        window.addEventListener('message', this._eventHandler);\n        // Open a new window with the IDP provider.\n        this._idpWindow =\n            (_d = window.open(identityProviderUrl.toString(), 'idpWindow', options === null || options === void 0 ? void 0 : options.windowOpenerFeatures)) !== null && _d !== void 0 ? _d : undefined;\n        // Check if the _idpWindow is closed by user.\n        const checkInterruption = () => {\n            // The _idpWindow is opened and not yet closed by the client\n            if (this._idpWindow) {\n                if (this._idpWindow.closed) {\n                    this._handleFailure(ERROR_USER_INTERRUPT, options === null || options === void 0 ? void 0 : options.onError);\n                }\n                else {\n                    setTimeout(checkInterruption, INTERRUPT_CHECK_INTERVAL);\n                }\n            }\n        };\n        checkInterruption();\n    }\n    _getEventHandler(identityProviderUrl, options) {\n        return async (event) => {\n            var _a, _b, _c;\n            if (event.origin !== identityProviderUrl.origin) {\n                console.warn(`WARNING: expected origin '${identityProviderUrl.origin}', got '${event.origin}' (ignoring)`);\n                return;\n            }\n            const message = event.data;\n            switch (message.kind) {\n                case 'authorize-ready': {\n                    // IDP is ready. Send a message to request authorization.\n                    const request = Object.assign({ kind: 'authorize-client', sessionPublicKey: new Uint8Array((_a = this._key) === null || _a === void 0 ? void 0 : _a.getPublicKey().toDer()), maxTimeToLive: options === null || options === void 0 ? void 0 : options.maxTimeToLive, allowPinAuthentication: options === null || options === void 0 ? void 0 : options.allowPinAuthentication, derivationOrigin: (_b = options === null || options === void 0 ? void 0 : options.derivationOrigin) === null || _b === void 0 ? void 0 : _b.toString() }, options === null || options === void 0 ? void 0 : options.customValues);\n                    (_c = this._idpWindow) === null || _c === void 0 ? void 0 : _c.postMessage(request, identityProviderUrl.origin);\n                    break;\n                }\n                case 'authorize-client-success':\n                    // Create the delegation chain and store it.\n                    try {\n                        await this._handleSuccess(message, options === null || options === void 0 ? void 0 : options.onSuccess);\n                    }\n                    catch (err) {\n                        this._handleFailure(err.message, options === null || options === void 0 ? void 0 : options.onError);\n                    }\n                    break;\n                case 'authorize-client-failure':\n                    this._handleFailure(message.text, options === null || options === void 0 ? void 0 : options.onError);\n                    break;\n                default:\n                    break;\n            }\n        };\n    }\n    _handleFailure(errorMessage, onError) {\n        var _a;\n        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();\n        onError === null || onError === void 0 ? void 0 : onError(errorMessage);\n        this._removeEventListener();\n        delete this._idpWindow;\n    }\n    _removeEventListener() {\n        if (this._eventHandler) {\n            window.removeEventListener('message', this._eventHandler);\n        }\n        this._eventHandler = undefined;\n    }\n    async logout(options = {}) {\n        await _deleteStorage(this._storage);\n        // Reset this auth client to a non-authenticated state.\n        this._identity = new _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.AnonymousIdentity();\n        this._chain = null;\n        if (options.returnTo) {\n            try {\n                window.history.pushState({}, '', options.returnTo);\n            }\n            catch (_a) {\n                window.location.href = options.returnTo;\n            }\n        }\n    }\n}\nasync function _deleteStorage(storage) {\n    await storage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_KEY);\n    await storage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_STORAGE_DELEGATION);\n    await storage.remove(_storage__WEBPACK_IMPORTED_MODULE_3__.KEY_VECTOR);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/storage.js":
/*!***************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/auth-client/lib/esm/storage.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DB_VERSION: () => (/* binding */ DB_VERSION),\n/* harmony export */   IdbStorage: () => (/* binding */ IdbStorage),\n/* harmony export */   KEY_STORAGE_DELEGATION: () => (/* binding */ KEY_STORAGE_DELEGATION),\n/* harmony export */   KEY_STORAGE_KEY: () => (/* binding */ KEY_STORAGE_KEY),\n/* harmony export */   KEY_VECTOR: () => (/* binding */ KEY_VECTOR),\n/* harmony export */   LocalStorage: () => (/* binding */ LocalStorage),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser)\n/* harmony export */ });\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db */ \"(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/db.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _IdbStorage_options;\n\nconst KEY_STORAGE_KEY = 'identity';\nconst KEY_STORAGE_DELEGATION = 'delegation';\nconst KEY_VECTOR = 'iv';\n// Increment if any fields are modified\nconst DB_VERSION = 1;\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Legacy implementation of AuthClientStorage, for use where IndexedDb is not available\n */\nclass LocalStorage {\n    constructor(prefix = 'ic-', _localStorage) {\n        this.prefix = prefix;\n        this._localStorage = _localStorage;\n    }\n    get(key) {\n        return Promise.resolve(this._getLocalStorage().getItem(this.prefix + key));\n    }\n    set(key, value) {\n        this._getLocalStorage().setItem(this.prefix + key, value);\n        return Promise.resolve();\n    }\n    remove(key) {\n        this._getLocalStorage().removeItem(this.prefix + key);\n        return Promise.resolve();\n    }\n    _getLocalStorage() {\n        if (this._localStorage) {\n            return this._localStorage;\n        }\n        const ls = typeof window === 'undefined'\n            ? typeof global === 'undefined'\n                ? typeof self === 'undefined'\n                    ? undefined\n                    : self.localStorage\n                : global.localStorage\n            : window.localStorage;\n        if (!ls) {\n            throw new Error('Could not find local storage.');\n        }\n        return ls;\n    }\n}\n/**\n * IdbStorage is an interface for simple storage of string key-value pairs built on {@link IdbKeyVal}\n *\n * It replaces {@link LocalStorage}\n * @see implements {@link AuthClientStorage}\n */\nclass IdbStorage {\n    /**\n     * @param options - DBCreateOptions\n     * @param options.dbName - name for the indexeddb database\n     * @param options.storeName - name for the indexeddb Data Store\n     * @param options.version - version of the database. Increment to safely upgrade\n     * @constructs an {@link IdbStorage}\n     * @example\n     * ```typescript\n     * const storage = new IdbStorage({ dbName: 'my-db', storeName: 'my-store', version: 2 });\n     * ```\n     */\n    constructor(options) {\n        _IdbStorage_options.set(this, void 0);\n        __classPrivateFieldSet(this, _IdbStorage_options, options !== null && options !== void 0 ? options : {}, \"f\");\n    }\n    get _db() {\n        return new Promise(resolve => {\n            if (this.initializedDb) {\n                resolve(this.initializedDb);\n                return;\n            }\n            _db__WEBPACK_IMPORTED_MODULE_0__.IdbKeyVal.create(__classPrivateFieldGet(this, _IdbStorage_options, \"f\")).then(db => {\n                this.initializedDb = db;\n                resolve(db);\n            });\n        });\n    }\n    async get(key) {\n        const db = await this._db;\n        return await db.get(key);\n        // return (await db.get<string>(key)) ?? null;\n    }\n    async set(key, value) {\n        const db = await this._db;\n        await db.set(key, value);\n    }\n    async remove(key) {\n        const db = await this._db;\n        await db.remove(key);\n    }\n}\n_IdbStorage_options = new WeakMap();\n//# sourceMappingURL=storage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2F1dGgtY2xpZW50L2xpYi9lc20vc3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDaUM7QUFDMUI7QUFDQTtBQUNBO0FBQ1A7QUFDTztBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckY7QUFDQSxnQkFBZ0I7QUFDaEIsb0JBQW9CO0FBQ3BCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSx3Q0FBd0Msb0RBQW9EO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0dBQStHO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQ0FBUztBQUNyQjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYXV0aC1jbGllbnQvbGliL2VzbS9zdG9yYWdlLmpzPzFiY2MiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9JZGJTdG9yYWdlX29wdGlvbnM7XG5pbXBvcnQgeyBJZGJLZXlWYWwgfSBmcm9tICcuL2RiJztcbmV4cG9ydCBjb25zdCBLRVlfU1RPUkFHRV9LRVkgPSAnaWRlbnRpdHknO1xuZXhwb3J0IGNvbnN0IEtFWV9TVE9SQUdFX0RFTEVHQVRJT04gPSAnZGVsZWdhdGlvbic7XG5leHBvcnQgY29uc3QgS0VZX1ZFQ1RPUiA9ICdpdic7XG4vLyBJbmNyZW1lbnQgaWYgYW55IGZpZWxkcyBhcmUgbW9kaWZpZWRcbmV4cG9ydCBjb25zdCBEQl9WRVJTSU9OID0gMTtcbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbi8qKlxuICogTGVnYWN5IGltcGxlbWVudGF0aW9uIG9mIEF1dGhDbGllbnRTdG9yYWdlLCBmb3IgdXNlIHdoZXJlIEluZGV4ZWREYiBpcyBub3QgYXZhaWxhYmxlXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHByZWZpeCA9ICdpYy0nLCBfbG9jYWxTdG9yYWdlKSB7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgICAgICB0aGlzLl9sb2NhbFN0b3JhZ2UgPSBfbG9jYWxTdG9yYWdlO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fZ2V0TG9jYWxTdG9yYWdlKCkuZ2V0SXRlbSh0aGlzLnByZWZpeCArIGtleSkpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9nZXRMb2NhbFN0b3JhZ2UoKS5zZXRJdGVtKHRoaXMucHJlZml4ICsga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmVtb3ZlKGtleSkge1xuICAgICAgICB0aGlzLl9nZXRMb2NhbFN0b3JhZ2UoKS5yZW1vdmVJdGVtKHRoaXMucHJlZml4ICsga2V5KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBfZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5fbG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxTdG9yYWdlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxzID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgID8gdHlwZW9mIGdsb2JhbCA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICA/IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYubG9jYWxTdG9yYWdlXG4gICAgICAgICAgICAgICAgOiBnbG9iYWwubG9jYWxTdG9yYWdlXG4gICAgICAgICAgICA6IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgICAgIGlmICghbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgbG9jYWwgc3RvcmFnZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbHM7XG4gICAgfVxufVxuLyoqXG4gKiBJZGJTdG9yYWdlIGlzIGFuIGludGVyZmFjZSBmb3Igc2ltcGxlIHN0b3JhZ2Ugb2Ygc3RyaW5nIGtleS12YWx1ZSBwYWlycyBidWlsdCBvbiB7QGxpbmsgSWRiS2V5VmFsfVxuICpcbiAqIEl0IHJlcGxhY2VzIHtAbGluayBMb2NhbFN0b3JhZ2V9XG4gKiBAc2VlIGltcGxlbWVudHMge0BsaW5rIEF1dGhDbGllbnRTdG9yYWdlfVxuICovXG5leHBvcnQgY2xhc3MgSWRiU3RvcmFnZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBEQkNyZWF0ZU9wdGlvbnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5kYk5hbWUgLSBuYW1lIGZvciB0aGUgaW5kZXhlZGRiIGRhdGFiYXNlXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc3RvcmVOYW1lIC0gbmFtZSBmb3IgdGhlIGluZGV4ZWRkYiBEYXRhIFN0b3JlXG4gICAgICogQHBhcmFtIG9wdGlvbnMudmVyc2lvbiAtIHZlcnNpb24gb2YgdGhlIGRhdGFiYXNlLiBJbmNyZW1lbnQgdG8gc2FmZWx5IHVwZ3JhZGVcbiAgICAgKiBAY29uc3RydWN0cyBhbiB7QGxpbmsgSWRiU3RvcmFnZX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBzdG9yYWdlID0gbmV3IElkYlN0b3JhZ2UoeyBkYk5hbWU6ICdteS1kYicsIHN0b3JlTmFtZTogJ215LXN0b3JlJywgdmVyc2lvbjogMiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIF9JZGJTdG9yYWdlX29wdGlvbnMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0lkYlN0b3JhZ2Vfb3B0aW9ucywgb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge30sIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0IF9kYigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWREYikge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5pbml0aWFsaXplZERiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJZGJLZXlWYWwuY3JlYXRlKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0lkYlN0b3JhZ2Vfb3B0aW9ucywgXCJmXCIpKS50aGVuKGRiID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkRGIgPSBkYjtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGRiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuX2RiO1xuICAgICAgICByZXR1cm4gYXdhaXQgZGIuZ2V0KGtleSk7XG4gICAgICAgIC8vIHJldHVybiAoYXdhaXQgZGIuZ2V0PHN0cmluZz4oa2V5KSkgPz8gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLl9kYjtcbiAgICAgICAgYXdhaXQgZGIuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICBhc3luYyByZW1vdmUoa2V5KSB7XG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5fZGI7XG4gICAgICAgIGF3YWl0IGRiLnJlbW92ZShrZXkpO1xuICAgIH1cbn1cbl9JZGJTdG9yYWdlX29wdGlvbnMgPSBuZXcgV2Vha01hcCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RvcmFnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/auth-client/lib/esm/storage.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/candid-core.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/candid-core.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputBox: () => (/* binding */ InputBox),\n/* harmony export */   InputForm: () => (/* binding */ InputForm),\n/* harmony export */   OptionForm: () => (/* binding */ OptionForm),\n/* harmony export */   RecordForm: () => (/* binding */ RecordForm),\n/* harmony export */   TupleForm: () => (/* binding */ TupleForm),\n/* harmony export */   VariantForm: () => (/* binding */ VariantForm),\n/* harmony export */   VecForm: () => (/* binding */ VecForm)\n/* harmony export */ });\nclass InputBox {\n    constructor(idl, ui) {\n        this.idl = idl;\n        this.ui = ui;\n        this.label = null;\n        this.value = undefined;\n        const status = document.createElement('span');\n        status.className = 'status';\n        this.status = status;\n        if (ui.input) {\n            ui.input.addEventListener('blur', () => {\n                if (ui.input.value === '') {\n                    return;\n                }\n                this.parse();\n            });\n            ui.input.addEventListener('input', () => {\n                status.style.display = 'none';\n                ui.input.classList.remove('reject');\n            });\n        }\n    }\n    isRejected() {\n        return this.value === undefined;\n    }\n    parse(config = {}) {\n        if (this.ui.form) {\n            const value = this.ui.form.parse(config);\n            this.value = value;\n            return value;\n        }\n        if (this.ui.input) {\n            const input = this.ui.input;\n            try {\n                const value = this.ui.parse(this.idl, config, input.value);\n                if (!this.idl.covariant(value)) {\n                    throw new Error(`${input.value} is not of type ${this.idl.display()}`);\n                }\n                this.status.style.display = 'none';\n                this.value = value;\n                return value;\n            }\n            catch (err) {\n                input.classList.add('reject');\n                this.status.style.display = 'block';\n                this.status.innerHTML = 'InputError: ' + err.message;\n                this.value = undefined;\n                return undefined;\n            }\n        }\n        return null;\n    }\n    render(dom) {\n        const container = document.createElement('span');\n        if (this.label) {\n            const label = document.createElement('label');\n            label.innerText = this.label;\n            container.appendChild(label);\n        }\n        if (this.ui.input) {\n            container.appendChild(this.ui.input);\n            container.appendChild(this.status);\n        }\n        if (this.ui.form) {\n            this.ui.form.render(container);\n        }\n        dom.appendChild(container);\n    }\n}\nclass InputForm {\n    constructor(ui) {\n        this.ui = ui;\n        this.form = [];\n    }\n    renderForm(dom) {\n        if (this.ui.container) {\n            this.form.forEach(e => e.render(this.ui.container));\n            dom.appendChild(this.ui.container);\n        }\n        else {\n            this.form.forEach(e => e.render(dom));\n        }\n    }\n    render(dom) {\n        if (this.ui.open && this.ui.event) {\n            dom.appendChild(this.ui.open);\n            const form = this;\n            // eslint-disable-next-line\n            form.ui.open.addEventListener(form.ui.event, () => {\n                // Remove old form\n                if (form.ui.container) {\n                    form.ui.container.innerHTML = '';\n                }\n                else {\n                    const oldContainer = form.ui.open.nextElementSibling;\n                    if (oldContainer) {\n                        oldContainer.parentNode.removeChild(oldContainer);\n                    }\n                }\n                // Render form\n                form.generateForm();\n                form.renderForm(dom);\n            });\n        }\n        else {\n            this.generateForm();\n            this.renderForm(dom);\n        }\n    }\n}\nclass RecordForm extends InputForm {\n    constructor(fields, ui) {\n        super(ui);\n        this.fields = fields;\n        this.ui = ui;\n    }\n    generateForm() {\n        this.form = this.fields.map(([key, type]) => {\n            const input = this.ui.render(type);\n            // eslint-disable-next-line\n            if (this.ui.labelMap && this.ui.labelMap.hasOwnProperty(key)) {\n                input.label = this.ui.labelMap[key] + ' ';\n            }\n            else {\n                input.label = key + ' ';\n            }\n            return input;\n        });\n    }\n    parse(config) {\n        const v = {};\n        this.fields.forEach(([key, _], i) => {\n            const value = this.form[i].parse(config);\n            v[key] = value;\n        });\n        if (this.form.some(input => input.isRejected())) {\n            return undefined;\n        }\n        return v;\n    }\n}\nclass TupleForm extends InputForm {\n    constructor(components, ui) {\n        super(ui);\n        this.components = components;\n        this.ui = ui;\n    }\n    generateForm() {\n        this.form = this.components.map(type => {\n            const input = this.ui.render(type);\n            return input;\n        });\n    }\n    parse(config) {\n        const v = [];\n        this.components.forEach((_, i) => {\n            const value = this.form[i].parse(config);\n            v.push(value);\n        });\n        if (this.form.some(input => input.isRejected())) {\n            return undefined;\n        }\n        return v;\n    }\n}\nclass VariantForm extends InputForm {\n    constructor(fields, ui) {\n        super(ui);\n        this.fields = fields;\n        this.ui = ui;\n    }\n    generateForm() {\n        const index = this.ui.open.selectedIndex;\n        const [_, type] = this.fields[index];\n        const variant = this.ui.render(type);\n        this.form = [variant];\n    }\n    parse(config) {\n        const select = this.ui.open;\n        const selected = select.options[select.selectedIndex].value;\n        const value = this.form[0].parse(config);\n        if (value === undefined) {\n            return undefined;\n        }\n        const v = {};\n        v[selected] = value;\n        return v;\n    }\n}\nclass OptionForm extends InputForm {\n    constructor(ty, ui) {\n        super(ui);\n        this.ty = ty;\n        this.ui = ui;\n    }\n    generateForm() {\n        if (this.ui.open.checked) {\n            const opt = this.ui.render(this.ty);\n            this.form = [opt];\n        }\n        else {\n            this.form = [];\n        }\n    }\n    parse(config) {\n        if (this.form.length === 0) {\n            return [];\n        }\n        else {\n            const value = this.form[0].parse(config);\n            if (value === undefined) {\n                return undefined;\n            }\n            return [value];\n        }\n    }\n}\nclass VecForm extends InputForm {\n    constructor(ty, ui) {\n        super(ui);\n        this.ty = ty;\n        this.ui = ui;\n    }\n    generateForm() {\n        const len = +this.ui.open.value;\n        this.form = [];\n        for (let i = 0; i < len; i++) {\n            const t = this.ui.render(this.ty);\n            this.form.push(t);\n        }\n    }\n    parse(config) {\n        const value = this.form.map(input => {\n            return input.parse(config);\n        });\n        if (this.form.some(input => input.isRejected())) {\n            return undefined;\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=candid-core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/candid-core.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/candid-ui.js":
/*!************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/candid-ui.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Render: () => (/* binding */ Render),\n/* harmony export */   inputBox: () => (/* binding */ inputBox),\n/* harmony export */   optForm: () => (/* binding */ optForm),\n/* harmony export */   recordForm: () => (/* binding */ recordForm),\n/* harmony export */   renderInput: () => (/* binding */ renderInput),\n/* harmony export */   renderValue: () => (/* binding */ renderValue),\n/* harmony export */   tupleForm: () => (/* binding */ tupleForm),\n/* harmony export */   variantForm: () => (/* binding */ variantForm),\n/* harmony export */   vecForm: () => (/* binding */ vecForm)\n/* harmony export */ });\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./idl */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/idl.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _candid_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./candid-core */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/candid-core.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\nconst InputConfig = { parse: parsePrimitive };\nconst FormConfig = { render: renderInput };\nconst inputBox = (t, config) => {\n    return new _candid_core__WEBPACK_IMPORTED_MODULE_2__.InputBox(t, Object.assign(Object.assign({}, InputConfig), config));\n};\nconst recordForm = (fields, config) => {\n    return new _candid_core__WEBPACK_IMPORTED_MODULE_2__.RecordForm(fields, Object.assign(Object.assign({}, FormConfig), config));\n};\nconst tupleForm = (components, config) => {\n    return new _candid_core__WEBPACK_IMPORTED_MODULE_2__.TupleForm(components, Object.assign(Object.assign({}, FormConfig), config));\n};\nconst variantForm = (fields, config) => {\n    return new _candid_core__WEBPACK_IMPORTED_MODULE_2__.VariantForm(fields, Object.assign(Object.assign({}, FormConfig), config));\n};\nconst optForm = (ty, config) => {\n    return new _candid_core__WEBPACK_IMPORTED_MODULE_2__.OptionForm(ty, Object.assign(Object.assign({}, FormConfig), config));\n};\nconst vecForm = (ty, config) => {\n    return new _candid_core__WEBPACK_IMPORTED_MODULE_2__.VecForm(ty, Object.assign(Object.assign({}, FormConfig), config));\n};\nclass Render extends _idl__WEBPACK_IMPORTED_MODULE_0__.Visitor {\n    visitType(t, d) {\n        const input = document.createElement('input');\n        input.classList.add('argument');\n        input.placeholder = t.display();\n        return inputBox(t, { input });\n    }\n    visitNull(t, d) {\n        return inputBox(t, {});\n    }\n    visitRecord(t, fields, d) {\n        let config = {};\n        if (fields.length > 1) {\n            const container = document.createElement('div');\n            container.classList.add('popup-form');\n            config = { container };\n        }\n        const form = recordForm(fields, config);\n        return inputBox(t, { form });\n    }\n    visitTuple(t, components, d) {\n        let config = {};\n        if (components.length > 1) {\n            const container = document.createElement('div');\n            container.classList.add('popup-form');\n            config = { container };\n        }\n        const form = tupleForm(components, config);\n        return inputBox(t, { form });\n    }\n    visitVariant(t, fields, d) {\n        const select = document.createElement('select');\n        for (const [key, type] of fields) {\n            const option = new Option(key);\n            select.add(option);\n        }\n        select.selectedIndex = -1;\n        select.classList.add('open');\n        const config = { open: select, event: 'change' };\n        const form = variantForm(fields, config);\n        return inputBox(t, { form });\n    }\n    visitOpt(t, ty, d) {\n        const checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        checkbox.classList.add('open');\n        const form = optForm(ty, { open: checkbox, event: 'change' });\n        return inputBox(t, { form });\n    }\n    visitVec(t, ty, d) {\n        const len = document.createElement('input');\n        len.type = 'number';\n        len.min = '0';\n        len.max = '100';\n        len.style.width = '8rem';\n        len.placeholder = 'len';\n        len.classList.add('open');\n        const container = document.createElement('div');\n        container.classList.add('popup-form');\n        const form = vecForm(ty, { open: len, event: 'change', container });\n        return inputBox(t, { form });\n    }\n    visitRec(t, ty, d) {\n        return renderInput(ty);\n    }\n}\nclass Parse extends _idl__WEBPACK_IMPORTED_MODULE_0__.Visitor {\n    visitNull(t, v) {\n        return null;\n    }\n    visitBool(t, v) {\n        if (v === 'true') {\n            return true;\n        }\n        if (v === 'false') {\n            return false;\n        }\n        throw new Error(`Cannot parse ${v} as boolean`);\n    }\n    visitText(t, v) {\n        return v;\n    }\n    visitFloat(t, v) {\n        return parseFloat(v);\n    }\n    visitFixedInt(t, v) {\n        if (t._bits <= 32) {\n            return parseInt(v, 10);\n        }\n        else {\n            return BigInt(v);\n        }\n    }\n    visitFixedNat(t, v) {\n        if (t._bits <= 32) {\n            return parseInt(v, 10);\n        }\n        else {\n            return BigInt(v);\n        }\n    }\n    visitNumber(t, v) {\n        return BigInt(v);\n    }\n    visitPrincipal(t, v) {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__.Principal.fromText(v);\n    }\n    visitService(t, v) {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__.Principal.fromText(v);\n    }\n    visitFunc(t, v) {\n        const x = v.split('.', 2);\n        return [_dfinity_principal__WEBPACK_IMPORTED_MODULE_1__.Principal.fromText(x[0]), x[1]];\n    }\n}\nclass Random extends _idl__WEBPACK_IMPORTED_MODULE_0__.Visitor {\n    visitNull(t, v) {\n        return null;\n    }\n    visitBool(t, v) {\n        return Math.random() < 0.5;\n    }\n    visitText(t, v) {\n        return Math.random().toString(36).substring(6);\n    }\n    visitFloat(t, v) {\n        return Math.random();\n    }\n    visitInt(t, v) {\n        return BigInt(this.generateNumber(true));\n    }\n    visitNat(t, v) {\n        return BigInt(this.generateNumber(false));\n    }\n    visitFixedInt(t, v) {\n        const x = this.generateNumber(true);\n        if (t._bits <= 32) {\n            return x;\n        }\n        else {\n            return BigInt(v);\n        }\n    }\n    visitFixedNat(t, v) {\n        const x = this.generateNumber(false);\n        if (t._bits <= 32) {\n            return x;\n        }\n        else {\n            return BigInt(v);\n        }\n    }\n    generateNumber(signed) {\n        const num = Math.floor(Math.random() * 100);\n        if (signed && Math.random() < 0.5) {\n            return -num;\n        }\n        else {\n            return num;\n        }\n    }\n}\nfunction parsePrimitive(t, config, d) {\n    if (config.random && d === '') {\n        return t.accept(new Random(), d);\n    }\n    else {\n        return t.accept(new Parse(), d);\n    }\n}\n/**\n *\n * @param t an IDL type\n * @returns an input for that type\n */\nfunction renderInput(t) {\n    return t.accept(new Render(), null);\n}\n/**\n *\n * @param t an IDL Type\n * @param input an InputBox\n * @param value any\n * @returns rendering that value to the provided input\n */\nfunction renderValue(t, input, value) {\n    return t.accept(new RenderValue(), { input, value });\n}\nclass RenderValue extends _idl__WEBPACK_IMPORTED_MODULE_0__.Visitor {\n    visitType(t, d) {\n        d.input.ui.input.value = t.valueToString(d.value);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    visitNull(t, d) { }\n    visitText(t, d) {\n        d.input.ui.input.value = d.value;\n    }\n    visitRec(t, ty, d) {\n        renderValue(ty, d.input, d.value);\n    }\n    visitOpt(t, ty, d) {\n        if (d.value.length === 0) {\n            return;\n        }\n        else {\n            const form = d.input.ui.form;\n            const open = form.ui.open;\n            open.checked = true;\n            open.dispatchEvent(new Event(form.ui.event));\n            renderValue(ty, form.form[0], d.value[0]);\n        }\n    }\n    visitRecord(t, fields, d) {\n        const form = d.input.ui.form;\n        fields.forEach(([key, type], i) => {\n            renderValue(type, form.form[i], d.value[key]);\n        });\n    }\n    visitTuple(t, components, d) {\n        const form = d.input.ui.form;\n        components.forEach((type, i) => {\n            renderValue(type, form.form[i], d.value[i]);\n        });\n    }\n    visitVariant(t, fields, d) {\n        const form = d.input.ui.form;\n        const selected = Object.entries(d.value)[0];\n        fields.forEach(([key, type], i) => {\n            if (key === selected[0]) {\n                const open = form.ui.open;\n                open.selectedIndex = i;\n                open.dispatchEvent(new Event(form.ui.event));\n                renderValue(type, form.form[0], selected[1]);\n            }\n        });\n    }\n    visitVec(t, ty, d) {\n        const form = d.input.ui.form;\n        const len = d.value.length;\n        const open = form.ui.open;\n        open.value = len;\n        open.dispatchEvent(new Event(form.ui.event));\n        d.value.forEach((v, i) => {\n            renderValue(ty, form.form[i], v);\n        });\n    }\n}\n//# sourceMappingURL=candid-ui.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/candid-ui.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/idl.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/idl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bool: () => (/* binding */ Bool),\n/* harmony export */   BoolClass: () => (/* binding */ BoolClass),\n/* harmony export */   ConstructType: () => (/* binding */ ConstructType),\n/* harmony export */   Empty: () => (/* binding */ Empty),\n/* harmony export */   EmptyClass: () => (/* binding */ EmptyClass),\n/* harmony export */   FixedIntClass: () => (/* binding */ FixedIntClass),\n/* harmony export */   FixedNatClass: () => (/* binding */ FixedNatClass),\n/* harmony export */   Float32: () => (/* binding */ Float32),\n/* harmony export */   Float64: () => (/* binding */ Float64),\n/* harmony export */   FloatClass: () => (/* binding */ FloatClass),\n/* harmony export */   Func: () => (/* binding */ Func),\n/* harmony export */   FuncClass: () => (/* binding */ FuncClass),\n/* harmony export */   Int: () => (/* binding */ Int),\n/* harmony export */   Int16: () => (/* binding */ Int16),\n/* harmony export */   Int32: () => (/* binding */ Int32),\n/* harmony export */   Int64: () => (/* binding */ Int64),\n/* harmony export */   Int8: () => (/* binding */ Int8),\n/* harmony export */   IntClass: () => (/* binding */ IntClass),\n/* harmony export */   Nat: () => (/* binding */ Nat),\n/* harmony export */   Nat16: () => (/* binding */ Nat16),\n/* harmony export */   Nat32: () => (/* binding */ Nat32),\n/* harmony export */   Nat64: () => (/* binding */ Nat64),\n/* harmony export */   Nat8: () => (/* binding */ Nat8),\n/* harmony export */   NatClass: () => (/* binding */ NatClass),\n/* harmony export */   Null: () => (/* binding */ Null),\n/* harmony export */   NullClass: () => (/* binding */ NullClass),\n/* harmony export */   Opt: () => (/* binding */ Opt),\n/* harmony export */   OptClass: () => (/* binding */ OptClass),\n/* harmony export */   PrimitiveType: () => (/* binding */ PrimitiveType),\n/* harmony export */   Principal: () => (/* binding */ Principal),\n/* harmony export */   PrincipalClass: () => (/* binding */ PrincipalClass),\n/* harmony export */   Rec: () => (/* binding */ Rec),\n/* harmony export */   RecClass: () => (/* binding */ RecClass),\n/* harmony export */   Record: () => (/* binding */ Record),\n/* harmony export */   RecordClass: () => (/* binding */ RecordClass),\n/* harmony export */   Reserved: () => (/* binding */ Reserved),\n/* harmony export */   ReservedClass: () => (/* binding */ ReservedClass),\n/* harmony export */   Service: () => (/* binding */ Service),\n/* harmony export */   ServiceClass: () => (/* binding */ ServiceClass),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TextClass: () => (/* binding */ TextClass),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   TupleClass: () => (/* binding */ TupleClass),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   Unknown: () => (/* binding */ Unknown),\n/* harmony export */   UnknownClass: () => (/* binding */ UnknownClass),\n/* harmony export */   Variant: () => (/* binding */ Variant),\n/* harmony export */   VariantClass: () => (/* binding */ VariantClass),\n/* harmony export */   Vec: () => (/* binding */ Vec),\n/* harmony export */   VecClass: () => (/* binding */ VecClass),\n/* harmony export */   Visitor: () => (/* binding */ Visitor),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/buffer.js\");\n/* harmony import */ var _utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/hash */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/hash.js\");\n/* harmony import */ var _utils_leb128__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/leb128 */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/leb128.js\");\n/* harmony import */ var _utils_bigint_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/bigint-math */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\nconst magicNumber = 'DIDL';\nconst toReadableString_max = 400; // will not display arguments after 400chars. Makes sure 2mb blobs don't get inside the error\nfunction zipWith(xs, ys, f) {\n    return xs.map((x, i) => f(x, ys[i]));\n}\n/**\n * An IDL Type Table, which precedes the data in the stream.\n */\nclass TypeTable {\n    constructor() {\n        // List of types. Needs to be an array as the index needs to be stable.\n        this._typs = [];\n        this._idx = new Map();\n    }\n    has(obj) {\n        return this._idx.has(obj.name);\n    }\n    add(type, buf) {\n        const idx = this._typs.length;\n        this._idx.set(type.name, idx);\n        this._typs.push(buf);\n    }\n    merge(obj, knot) {\n        const idx = this._idx.get(obj.name);\n        const knotIdx = this._idx.get(knot);\n        if (idx === undefined) {\n            throw new Error('Missing type index for ' + obj);\n        }\n        if (knotIdx === undefined) {\n            throw new Error('Missing type index for ' + knot);\n        }\n        this._typs[idx] = this._typs[knotIdx];\n        // Delete the type.\n        this._typs.splice(knotIdx, 1);\n        this._idx.delete(knot);\n    }\n    encode() {\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(this._typs.length);\n        const buf = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...this._typs);\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(len, buf);\n    }\n    indexOf(typeName) {\n        if (!this._idx.has(typeName)) {\n            throw new Error('Missing type index for ' + typeName);\n        }\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(this._idx.get(typeName) || 0);\n    }\n}\nclass Visitor {\n    visitType(t, data) {\n        throw new Error('Not implemented');\n    }\n    visitPrimitive(t, data) {\n        return this.visitType(t, data);\n    }\n    visitEmpty(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitBool(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitNull(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitReserved(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitText(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitNumber(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitInt(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitNat(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitFloat(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitFixedInt(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitFixedNat(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitPrincipal(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitConstruct(t, data) {\n        return this.visitType(t, data);\n    }\n    visitVec(t, ty, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitOpt(t, ty, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitRecord(t, fields, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitTuple(t, components, data) {\n        const fields = components.map((ty, i) => [`_${i}_`, ty]);\n        return this.visitRecord(t, fields, data);\n    }\n    visitVariant(t, fields, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitRec(t, ty, data) {\n        return this.visitConstruct(ty, data);\n    }\n    visitFunc(t, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitService(t, data) {\n        return this.visitConstruct(t, data);\n    }\n}\n/**\n * Represents an IDL type.\n */\nclass Type {\n    /* Display type name */\n    display() {\n        return this.name;\n    }\n    valueToString(x) {\n        return toReadableString(x);\n    }\n    /* Implement `T` in the IDL spec, only needed for non-primitive types */\n    buildTypeTable(typeTable) {\n        if (!typeTable.has(this)) {\n            this._buildTypeTableImpl(typeTable);\n        }\n    }\n}\nclass PrimitiveType extends Type {\n    checkType(t) {\n        if (this.name !== t.name) {\n            throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n        }\n        return t;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _buildTypeTableImpl(typeTable) {\n        // No type table encoding for Primitive types.\n        return;\n    }\n}\nclass ConstructType extends Type {\n    checkType(t) {\n        if (t instanceof RecClass) {\n            const ty = t.getType();\n            if (typeof ty === 'undefined') {\n                throw new Error('type mismatch with uninitialized type');\n            }\n            return ty;\n        }\n        throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n    }\n    encodeType(typeTable) {\n        return typeTable.indexOf(this.name);\n    }\n}\n/**\n * Represents an IDL Empty, a type which has no inhabitants.\n * Since no values exist for this type, it cannot be serialised or deserialised.\n * Result types like `Result<Text, Empty>` should always succeed.\n */\nclass EmptyClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitEmpty(this, d);\n    }\n    covariant(x) {\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue() {\n        throw new Error('Empty cannot appear as a function argument');\n    }\n    valueToString() {\n        throw new Error('Empty cannot appear as a value');\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-17 /* IDLTypeIds.Empty */);\n    }\n    decodeValue() {\n        throw new Error('Empty cannot appear as an output');\n    }\n    get name() {\n        return 'empty';\n    }\n}\n/**\n * Represents an IDL Unknown, a placeholder type for deserialization only.\n * When decoding a value as Unknown, all fields will be retained but the names are only available in\n * hashed form.\n * A deserialized unknown will offer it's actual type by calling the `type()` function.\n * Unknown cannot be serialized and attempting to do so will throw an error.\n */\nclass UnknownClass extends Type {\n    checkType(t) {\n        throw new Error('Method not implemented for unknown.');\n    }\n    accept(v, d) {\n        throw v.visitType(this, d);\n    }\n    covariant(x) {\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue() {\n        throw new Error('Unknown cannot appear as a function argument');\n    }\n    valueToString() {\n        throw new Error('Unknown cannot appear as a value');\n    }\n    encodeType() {\n        throw new Error('Unknown cannot be serialized');\n    }\n    decodeValue(b, t) {\n        let decodedValue = t.decodeValue(b, t);\n        if (Object(decodedValue) !== decodedValue) {\n            // decodedValue is primitive. Box it, otherwise we cannot add the type() function.\n            // The type() function is important for primitives because otherwise we cannot tell apart the\n            // different number types.\n            decodedValue = Object(decodedValue);\n        }\n        let typeFunc;\n        if (t instanceof RecClass) {\n            typeFunc = () => t.getType();\n        }\n        else {\n            typeFunc = () => t;\n        }\n        // Do not use 'decodedValue.type = typeFunc' because this would lead to an enumerable property\n        // 'type' which means it would be serialized if the value would be candid encoded again.\n        // This in turn leads to problems if the decoded value is a variant because these values are\n        // only allowed to have a single property.\n        Object.defineProperty(decodedValue, 'type', {\n            value: typeFunc,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        });\n        return decodedValue;\n    }\n    _buildTypeTableImpl() {\n        throw new Error('Unknown cannot be serialized');\n    }\n    get name() {\n        return 'Unknown';\n    }\n}\n/**\n * Represents an IDL Bool\n */\nclass BoolClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitBool(this, d);\n    }\n    covariant(x) {\n        if (typeof x === 'boolean')\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return new Uint8Array([x ? 1 : 0]);\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-2 /* IDLTypeIds.Bool */);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        switch ((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeReadUint8)(b)) {\n            case 0:\n                return false;\n            case 1:\n                return true;\n            default:\n                throw new Error('Boolean value out of range');\n        }\n    }\n    get name() {\n        return 'bool';\n    }\n}\n/**\n * Represents an IDL Null\n */\nclass NullClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitNull(this, d);\n    }\n    covariant(x) {\n        if (x === null)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue() {\n        return new ArrayBuffer(0);\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-1 /* IDLTypeIds.Null */);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        return null;\n    }\n    get name() {\n        return 'null';\n    }\n}\n/**\n * Represents an IDL Reserved\n */\nclass ReservedClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitReserved(this, d);\n    }\n    covariant(x) {\n        return true;\n    }\n    encodeValue() {\n        return new ArrayBuffer(0);\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-16 /* IDLTypeIds.Reserved */);\n    }\n    decodeValue(b, t) {\n        if (t.name !== this.name) {\n            t.decodeValue(b, t);\n        }\n        return null;\n    }\n    get name() {\n        return 'reserved';\n    }\n}\n/**\n * Represents an IDL Text\n */\nclass TextClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitText(this, d);\n    }\n    covariant(x) {\n        if (typeof x === 'string')\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = new TextEncoder().encode(x);\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(buf.byteLength);\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(len, buf);\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-15 /* IDLTypeIds.Text */);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(b);\n        const buf = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeRead)(b, Number(len));\n        const decoder = new TextDecoder('utf8', { fatal: true });\n        return decoder.decode(buf);\n    }\n    get name() {\n        return 'text';\n    }\n    valueToString(x) {\n        return '\"' + x + '\"';\n    }\n}\n/**\n * Represents an IDL Int\n */\nclass IntClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitInt(this, d);\n    }\n    covariant(x) {\n        // We allow encoding of JavaScript plain numbers.\n        // But we will always decode to bigint.\n        if (typeof x === 'bigint' || Number.isInteger(x))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(x);\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-4 /* IDLTypeIds.Int */);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(b);\n    }\n    get name() {\n        return 'int';\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL Nat\n */\nclass NatClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitNat(this, d);\n    }\n    covariant(x) {\n        // We allow encoding of JavaScript plain numbers.\n        // But we will always decode to bigint.\n        if ((typeof x === 'bigint' && x >= BigInt(0)) || (Number.isInteger(x) && x >= 0))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(x);\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-3 /* IDLTypeIds.Nat */);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(b);\n    }\n    get name() {\n        return 'nat';\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL Float\n */\nclass FloatClass extends PrimitiveType {\n    constructor(_bits) {\n        super();\n        this._bits = _bits;\n        if (_bits !== 32 && _bits !== 64) {\n            throw new Error('not a valid float type');\n        }\n    }\n    accept(v, d) {\n        return v.visitFloat(this, d);\n    }\n    covariant(x) {\n        if (typeof x === 'number' || x instanceof Number)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = new ArrayBuffer(this._bits / 8);\n        const view = new DataView(buf);\n        if (this._bits === 32) {\n            view.setFloat32(0, x, true);\n        }\n        else {\n            view.setFloat64(0, x, true);\n        }\n        return buf;\n    }\n    encodeType() {\n        const opcode = this._bits === 32 ? -13 /* IDLTypeIds.Float32 */ : -14 /* IDLTypeIds.Float64 */;\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(opcode);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const bytes = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeRead)(b, this._bits / 8);\n        const view = new DataView(bytes);\n        if (this._bits === 32) {\n            return view.getFloat32(0, true);\n        }\n        else {\n            return view.getFloat64(0, true);\n        }\n    }\n    get name() {\n        return 'float' + this._bits;\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL fixed-width Int(n)\n */\nclass FixedIntClass extends PrimitiveType {\n    constructor(_bits) {\n        super();\n        this._bits = _bits;\n    }\n    accept(v, d) {\n        return v.visitFixedInt(this, d);\n    }\n    covariant(x) {\n        const min = (0,_utils_bigint_math__WEBPACK_IMPORTED_MODULE_4__.iexp2)(this._bits - 1) * BigInt(-1);\n        const max = (0,_utils_bigint_math__WEBPACK_IMPORTED_MODULE_4__.iexp2)(this._bits - 1) - BigInt(1);\n        let ok = false;\n        if (typeof x === 'bigint') {\n            ok = x >= min && x <= max;\n        }\n        else if (Number.isInteger(x)) {\n            const v = BigInt(x);\n            ok = v >= min && v <= max;\n        }\n        else {\n            ok = false;\n        }\n        if (ok)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.writeIntLE)(x, this._bits / 8);\n    }\n    encodeType() {\n        const offset = Math.log2(this._bits) - 3;\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-9 - offset);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const num = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.readIntLE)(b, this._bits / 8);\n        if (this._bits <= 32) {\n            return Number(num);\n        }\n        else {\n            return num;\n        }\n    }\n    get name() {\n        return `int${this._bits}`;\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL fixed-width Nat(n)\n */\nclass FixedNatClass extends PrimitiveType {\n    constructor(_bits) {\n        super();\n        this._bits = _bits;\n    }\n    accept(v, d) {\n        return v.visitFixedNat(this, d);\n    }\n    covariant(x) {\n        const max = (0,_utils_bigint_math__WEBPACK_IMPORTED_MODULE_4__.iexp2)(this._bits);\n        let ok = false;\n        if (typeof x === 'bigint' && x >= BigInt(0)) {\n            ok = x < max;\n        }\n        else if (Number.isInteger(x) && x >= 0) {\n            const v = BigInt(x);\n            ok = v < max;\n        }\n        else {\n            ok = false;\n        }\n        if (ok)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.writeUIntLE)(x, this._bits / 8);\n    }\n    encodeType() {\n        const offset = Math.log2(this._bits) - 3;\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-5 - offset);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const num = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.readUIntLE)(b, this._bits / 8);\n        if (this._bits <= 32) {\n            return Number(num);\n        }\n        else {\n            return num;\n        }\n    }\n    get name() {\n        return `nat${this._bits}`;\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL Array\n *\n * Arrays of fixed-sized nat/int type (e.g. nat8), are encoded from and decoded to TypedArrays (e.g. Uint8Array).\n * Arrays of float or other non-primitive types are encoded/decoded as untyped array in Javascript.\n * @param {Type} t\n */\nclass VecClass extends ConstructType {\n    constructor(_type) {\n        super();\n        this._type = _type;\n        // If true, this vector is really a blob and we can just use memcpy.\n        //\n        // NOTE:\n        // With support of encoding/dencoding of TypedArrays, this optimization is\n        // only used when plain array of bytes are passed as encoding input in order\n        // to be backward compatible.\n        this._blobOptimization = false;\n        if (_type instanceof FixedNatClass && _type._bits === 8) {\n            this._blobOptimization = true;\n        }\n    }\n    accept(v, d) {\n        return v.visitVec(this, this._type, d);\n    }\n    covariant(x) {\n        // Special case for ArrayBuffer\n        const bits = this._type instanceof FixedNatClass\n            ? this._type._bits\n            : this._type instanceof FixedIntClass\n                ? this._type._bits\n                : 0;\n        if ((ArrayBuffer.isView(x) && bits == x.BYTES_PER_ELEMENT * 8) ||\n            (Array.isArray(x) &&\n                x.every((v, idx) => {\n                    try {\n                        return this._type.covariant(v);\n                    }\n                    catch (e) {\n                        throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${idx} -> ${e.message}`);\n                    }\n                })))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(x.length);\n        if (this._blobOptimization) {\n            return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(len, new Uint8Array(x));\n        }\n        if (ArrayBuffer.isView(x)) {\n            return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(len, new Uint8Array(x.buffer));\n        }\n        const buf = new _utils_buffer__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(new ArrayBuffer(len.byteLength + x.length), 0);\n        buf.write(len);\n        for (const d of x) {\n            const encoded = this._type.encodeValue(d);\n            buf.write(new Uint8Array(encoded));\n        }\n        return buf.buffer;\n    }\n    _buildTypeTableImpl(typeTable) {\n        this._type.buildTypeTable(typeTable);\n        const opCode = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-19 /* IDLTypeIds.Vector */);\n        const buffer = this._type.encodeType(typeTable);\n        typeTable.add(this, (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, buffer));\n    }\n    decodeValue(b, t) {\n        const vec = this.checkType(t);\n        if (!(vec instanceof VecClass)) {\n            throw new Error('Not a vector type');\n        }\n        const len = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(b));\n        if (this._type instanceof FixedNatClass) {\n            if (this._type._bits == 8) {\n                return new Uint8Array(b.read(len));\n            }\n            if (this._type._bits == 16) {\n                return new Uint16Array(b.read(len * 2));\n            }\n            if (this._type._bits == 32) {\n                return new Uint32Array(b.read(len * 4));\n            }\n            if (this._type._bits == 64) {\n                return new BigUint64Array(b.read(len * 8));\n            }\n        }\n        if (this._type instanceof FixedIntClass) {\n            if (this._type._bits == 8) {\n                return new Int8Array(b.read(len));\n            }\n            if (this._type._bits == 16) {\n                return new Int16Array(b.read(len * 2));\n            }\n            if (this._type._bits == 32) {\n                return new Int32Array(b.read(len * 4));\n            }\n            if (this._type._bits == 64) {\n                return new BigInt64Array(b.read(len * 8));\n            }\n        }\n        const rets = [];\n        for (let i = 0; i < len; i++) {\n            rets.push(this._type.decodeValue(b, vec._type));\n        }\n        return rets;\n    }\n    get name() {\n        return `vec ${this._type.name}`;\n    }\n    display() {\n        return `vec ${this._type.display()}`;\n    }\n    valueToString(x) {\n        const elements = x.map(e => this._type.valueToString(e));\n        return 'vec {' + elements.join('; ') + '}';\n    }\n}\n/**\n * Represents an IDL Option\n * @param {Type} t\n */\nclass OptClass extends ConstructType {\n    constructor(_type) {\n        super();\n        this._type = _type;\n    }\n    accept(v, d) {\n        return v.visitOpt(this, this._type, d);\n    }\n    covariant(x) {\n        try {\n            if (Array.isArray(x) && (x.length === 0 || (x.length === 1 && this._type.covariant(x[0]))))\n                return true;\n        }\n        catch (e) {\n            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)} \\n\\n-> ${e.message}`);\n        }\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        if (x.length === 0) {\n            return new Uint8Array([0]);\n        }\n        else {\n            return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), this._type.encodeValue(x[0]));\n        }\n    }\n    _buildTypeTableImpl(typeTable) {\n        this._type.buildTypeTable(typeTable);\n        const opCode = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-18 /* IDLTypeIds.Opt */);\n        const buffer = this._type.encodeType(typeTable);\n        typeTable.add(this, (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, buffer));\n    }\n    decodeValue(b, t) {\n        const opt = this.checkType(t);\n        if (!(opt instanceof OptClass)) {\n            throw new Error('Not an option type');\n        }\n        switch ((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeReadUint8)(b)) {\n            case 0:\n                return [];\n            case 1:\n                return [this._type.decodeValue(b, opt._type)];\n            default:\n                throw new Error('Not an option value');\n        }\n    }\n    get name() {\n        return `opt ${this._type.name}`;\n    }\n    display() {\n        return `opt ${this._type.display()}`;\n    }\n    valueToString(x) {\n        if (x.length === 0) {\n            return 'null';\n        }\n        else {\n            return `opt ${this._type.valueToString(x[0])}`;\n        }\n    }\n}\n/**\n * Represents an IDL Record\n * @param {object} [fields] - mapping of function name to Type\n */\nclass RecordClass extends ConstructType {\n    constructor(fields = {}) {\n        super();\n        this._fields = Object.entries(fields).sort((a, b) => (0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(a[0]) - (0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(b[0]));\n    }\n    accept(v, d) {\n        return v.visitRecord(this, this._fields, d);\n    }\n    tryAsTuple() {\n        const res = [];\n        for (let i = 0; i < this._fields.length; i++) {\n            const [key, type] = this._fields[i];\n            if (key !== `_${i}_`) {\n                return null;\n            }\n            res.push(type);\n        }\n        return res;\n    }\n    covariant(x) {\n        if (typeof x === 'object' &&\n            this._fields.every(([k, t]) => {\n                // eslint-disable-next-line\n                if (!x.hasOwnProperty(k)) {\n                    throw new Error(`Record is missing key \"${k}\".`);\n                }\n                try {\n                    return t.covariant(x[k]);\n                }\n                catch (e) {\n                    throw new Error(`Invalid ${this.display()} argument: \\n\\nfield ${k} -> ${e.message}`);\n                }\n            }))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const values = this._fields.map(([key]) => x[key]);\n        const bufs = zipWith(this._fields, values, ([, c], d) => c.encodeValue(d));\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...bufs);\n    }\n    _buildTypeTableImpl(T) {\n        this._fields.forEach(([_, value]) => value.buildTypeTable(T));\n        const opCode = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-20 /* IDLTypeIds.Record */);\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(this._fields.length);\n        const fields = this._fields.map(([key, value]) => (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)((0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(key)), value.encodeType(T)));\n        T.add(this, (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, len, (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...fields)));\n    }\n    decodeValue(b, t) {\n        const record = this.checkType(t);\n        if (!(record instanceof RecordClass)) {\n            throw new Error('Not a record type');\n        }\n        const x = {};\n        let expectedRecordIdx = 0;\n        let actualRecordIdx = 0;\n        while (actualRecordIdx < record._fields.length) {\n            const [hash, type] = record._fields[actualRecordIdx];\n            if (expectedRecordIdx >= this._fields.length) {\n                // skip unexpected left over fields present on the wire\n                type.decodeValue(b, type);\n                actualRecordIdx++;\n                continue;\n            }\n            const [expectKey, expectType] = this._fields[expectedRecordIdx];\n            const expectedId = (0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(this._fields[expectedRecordIdx][0]);\n            const actualId = (0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(hash);\n            if (expectedId === actualId) {\n                // the current field on the wire matches the expected field\n                x[expectKey] = expectType.decodeValue(b, type);\n                expectedRecordIdx++;\n                actualRecordIdx++;\n            }\n            else if (actualId > expectedId) {\n                // The expected field does not exist on the wire\n                if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n                    x[expectKey] = [];\n                    expectedRecordIdx++;\n                }\n                else {\n                    throw new Error('Cannot find required field ' + expectKey);\n                }\n            }\n            else {\n                // The field on the wire does not exist in the output type, so we can skip it\n                type.decodeValue(b, type);\n                actualRecordIdx++;\n            }\n        }\n        // initialize left over expected optional fields\n        for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)) {\n            if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n                // TODO this assumes null value in opt is represented as []\n                x[expectKey] = [];\n            }\n            else {\n                throw new Error('Cannot find required field ' + expectKey);\n            }\n        }\n        return x;\n    }\n    get name() {\n        const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n        return `record {${fields.join('; ')}}`;\n    }\n    display() {\n        const fields = this._fields.map(([key, value]) => key + ':' + value.display());\n        return `record {${fields.join('; ')}}`;\n    }\n    valueToString(x) {\n        const values = this._fields.map(([key]) => x[key]);\n        const fields = zipWith(this._fields, values, ([k, c], d) => k + '=' + c.valueToString(d));\n        return `record {${fields.join('; ')}}`;\n    }\n}\n/**\n * Represents Tuple, a syntactic sugar for Record.\n * @param {Type} components\n */\nclass TupleClass extends RecordClass {\n    constructor(_components) {\n        const x = {};\n        _components.forEach((e, i) => (x['_' + i + '_'] = e));\n        super(x);\n        this._components = _components;\n    }\n    accept(v, d) {\n        return v.visitTuple(this, this._components, d);\n    }\n    covariant(x) {\n        // `>=` because tuples can be covariant when encoded.\n        if (Array.isArray(x) &&\n            x.length >= this._fields.length &&\n            this._components.every((t, i) => {\n                try {\n                    return t.covariant(x[i]);\n                }\n                catch (e) {\n                    throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${i} -> ${e.message}`);\n                }\n            }))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const bufs = zipWith(this._components, x, (c, d) => c.encodeValue(d));\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...bufs);\n    }\n    decodeValue(b, t) {\n        const tuple = this.checkType(t);\n        if (!(tuple instanceof TupleClass)) {\n            throw new Error('not a tuple type');\n        }\n        if (tuple._components.length < this._components.length) {\n            throw new Error('tuple mismatch');\n        }\n        const res = [];\n        for (const [i, wireType] of tuple._components.entries()) {\n            if (i >= this._components.length) {\n                // skip value\n                wireType.decodeValue(b, wireType);\n            }\n            else {\n                res.push(this._components[i].decodeValue(b, wireType));\n            }\n        }\n        return res;\n    }\n    display() {\n        const fields = this._components.map(value => value.display());\n        return `record {${fields.join('; ')}}`;\n    }\n    valueToString(values) {\n        const fields = zipWith(this._components, values, (c, d) => c.valueToString(d));\n        return `record {${fields.join('; ')}}`;\n    }\n}\n/**\n * Represents an IDL Variant\n * @param {object} [fields] - mapping of function name to Type\n */\nclass VariantClass extends ConstructType {\n    constructor(fields = {}) {\n        super();\n        this._fields = Object.entries(fields).sort((a, b) => (0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(a[0]) - (0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(b[0]));\n    }\n    accept(v, d) {\n        return v.visitVariant(this, this._fields, d);\n    }\n    covariant(x) {\n        if (typeof x === 'object' &&\n            Object.entries(x).length === 1 &&\n            this._fields.every(([k, v]) => {\n                try {\n                    // eslint-disable-next-line\n                    return !x.hasOwnProperty(k) || v.covariant(x[k]);\n                }\n                catch (e) {\n                    throw new Error(`Invalid ${this.display()} argument: \\n\\nvariant ${k} -> ${e.message}`);\n                }\n            }))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        for (let i = 0; i < this._fields.length; i++) {\n            const [name, type] = this._fields[i];\n            // eslint-disable-next-line\n            if (x.hasOwnProperty(name)) {\n                const idx = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(i);\n                const buf = type.encodeValue(x[name]);\n                return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(idx, buf);\n            }\n        }\n        throw Error('Variant has no data: ' + x);\n    }\n    _buildTypeTableImpl(typeTable) {\n        this._fields.forEach(([, type]) => {\n            type.buildTypeTable(typeTable);\n        });\n        const opCode = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-21 /* IDLTypeIds.Variant */);\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(this._fields.length);\n        const fields = this._fields.map(([key, value]) => (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)((0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(key)), value.encodeType(typeTable)));\n        typeTable.add(this, (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, len, ...fields));\n    }\n    decodeValue(b, t) {\n        const variant = this.checkType(t);\n        if (!(variant instanceof VariantClass)) {\n            throw new Error('Not a variant type');\n        }\n        const idx = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(b));\n        if (idx >= variant._fields.length) {\n            throw Error('Invalid variant index: ' + idx);\n        }\n        const [wireHash, wireType] = variant._fields[idx];\n        for (const [key, expectType] of this._fields) {\n            if ((0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(wireHash) === (0,_utils_hash__WEBPACK_IMPORTED_MODULE_2__.idlLabelToId)(key)) {\n                const value = expectType.decodeValue(b, wireType);\n                return { [key]: value };\n            }\n        }\n        throw new Error('Cannot find field hash ' + wireHash);\n    }\n    get name() {\n        const fields = this._fields.map(([key, type]) => key + ':' + type.name);\n        return `variant {${fields.join('; ')}}`;\n    }\n    display() {\n        const fields = this._fields.map(([key, type]) => key + (type.name === 'null' ? '' : `:${type.display()}`));\n        return `variant {${fields.join('; ')}}`;\n    }\n    valueToString(x) {\n        for (const [name, type] of this._fields) {\n            // eslint-disable-next-line\n            if (x.hasOwnProperty(name)) {\n                const value = type.valueToString(x[name]);\n                if (value === 'null') {\n                    return `variant {${name}}`;\n                }\n                else {\n                    return `variant {${name}=${value}}`;\n                }\n            }\n        }\n        throw new Error('Variant has no data: ' + x);\n    }\n}\n/**\n * Represents a reference to an IDL type, used for defining recursive data\n * types.\n */\nclass RecClass extends ConstructType {\n    constructor() {\n        super(...arguments);\n        this._id = RecClass._counter++;\n        this._type = undefined;\n    }\n    accept(v, d) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return v.visitRec(this, this._type, d);\n    }\n    fill(t) {\n        this._type = t;\n    }\n    getType() {\n        return this._type;\n    }\n    covariant(x) {\n        if (this._type ? this._type.covariant(x) : false)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return this._type.encodeValue(x);\n    }\n    _buildTypeTableImpl(typeTable) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        typeTable.add(this, new Uint8Array([]));\n        this._type.buildTypeTable(typeTable);\n        typeTable.merge(this, this._type.name);\n    }\n    decodeValue(b, t) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return this._type.decodeValue(b, t);\n    }\n    get name() {\n        return `rec_${this._id}`;\n    }\n    display() {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return `μ${this.name}.${this._type.name}`;\n    }\n    valueToString(x) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return this._type.valueToString(x);\n    }\n}\nRecClass._counter = 0;\nfunction decodePrincipalId(b) {\n    const x = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeReadUint8)(b);\n    if (x !== 1) {\n        throw new Error('Cannot decode principal');\n    }\n    const len = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(b));\n    return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(new Uint8Array((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeRead)(b, len)));\n}\n/**\n * Represents an IDL principal reference\n */\nclass PrincipalClass extends PrimitiveType {\n    accept(v, d) {\n        return v.visitPrincipal(this, d);\n    }\n    covariant(x) {\n        if (x && x._isPrincipal)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = x.toUint8Array();\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(buf.byteLength);\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), len, buf);\n    }\n    encodeType() {\n        return (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-24 /* IDLTypeIds.Principal */);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        return decodePrincipalId(b);\n    }\n    get name() {\n        return 'principal';\n    }\n    valueToString(x) {\n        return `${this.name} \"${x.toText()}\"`;\n    }\n}\n/**\n * Represents an IDL function reference.\n * @param argTypes Argument types.\n * @param retTypes Return types.\n * @param annotations Function annotations.\n */\nclass FuncClass extends ConstructType {\n    constructor(argTypes, retTypes, annotations = []) {\n        super();\n        this.argTypes = argTypes;\n        this.retTypes = retTypes;\n        this.annotations = annotations;\n    }\n    static argsToString(types, v) {\n        if (types.length !== v.length) {\n            throw new Error('arity mismatch');\n        }\n        return '(' + types.map((t, i) => t.valueToString(v[i])).join(', ') + ')';\n    }\n    accept(v, d) {\n        return v.visitFunc(this, d);\n    }\n    covariant(x) {\n        if (Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string')\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue([principal, methodName]) {\n        const buf = principal.toUint8Array();\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(buf.byteLength);\n        const canister = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), len, buf);\n        const method = new TextEncoder().encode(methodName);\n        const methodLen = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(method.byteLength);\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), canister, methodLen, method);\n    }\n    _buildTypeTableImpl(T) {\n        this.argTypes.forEach(arg => arg.buildTypeTable(T));\n        this.retTypes.forEach(arg => arg.buildTypeTable(T));\n        const opCode = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-22 /* IDLTypeIds.Func */);\n        const argLen = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(this.argTypes.length);\n        const args = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...this.argTypes.map(arg => arg.encodeType(T)));\n        const retLen = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(this.retTypes.length);\n        const rets = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...this.retTypes.map(arg => arg.encodeType(T)));\n        const annLen = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(this.annotations.length);\n        const anns = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...this.annotations.map(a => this.encodeAnnotation(a)));\n        T.add(this, (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, argLen, args, retLen, rets, annLen, anns));\n    }\n    decodeValue(b) {\n        const x = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeReadUint8)(b);\n        if (x !== 1) {\n            throw new Error('Cannot decode function reference');\n        }\n        const canister = decodePrincipalId(b);\n        const mLen = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(b));\n        const buf = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeRead)(b, mLen);\n        const decoder = new TextDecoder('utf8', { fatal: true });\n        const method = decoder.decode(buf);\n        return [canister, method];\n    }\n    get name() {\n        const args = this.argTypes.map(arg => arg.name).join(', ');\n        const rets = this.retTypes.map(arg => arg.name).join(', ');\n        const annon = ' ' + this.annotations.join(' ');\n        return `(${args}) -> (${rets})${annon}`;\n    }\n    valueToString([principal, str]) {\n        return `func \"${principal.toText()}\".${str}`;\n    }\n    display() {\n        const args = this.argTypes.map(arg => arg.display()).join(', ');\n        const rets = this.retTypes.map(arg => arg.display()).join(', ');\n        const annon = ' ' + this.annotations.join(' ');\n        return `(${args}) → (${rets})${annon}`;\n    }\n    encodeAnnotation(ann) {\n        if (ann === 'query') {\n            return new Uint8Array([1]);\n        }\n        else if (ann === 'oneway') {\n            return new Uint8Array([2]);\n        }\n        else if (ann === 'composite_query') {\n            return new Uint8Array([3]);\n        }\n        else {\n            throw new Error('Illegal function annotation');\n        }\n    }\n}\nclass ServiceClass extends ConstructType {\n    constructor(fields) {\n        super();\n        this._fields = Object.entries(fields).sort((a, b) => {\n            if (a[0] < b[0]) {\n                return -1;\n            }\n            if (a[0] > b[0]) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n    accept(v, d) {\n        return v.visitService(this, d);\n    }\n    covariant(x) {\n        if (x && x._isPrincipal)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = x.toUint8Array();\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(buf.length);\n        return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), len, buf);\n    }\n    _buildTypeTableImpl(T) {\n        this._fields.forEach(([_, func]) => func.buildTypeTable(T));\n        const opCode = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebEncode)(-23 /* IDLTypeIds.Service */);\n        const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(this._fields.length);\n        const meths = this._fields.map(([label, func]) => {\n            const labelBuf = new TextEncoder().encode(label);\n            const labelLen = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(labelBuf.length);\n            return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(labelLen, labelBuf, func.encodeType(T));\n        });\n        T.add(this, (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, len, ...meths));\n    }\n    decodeValue(b) {\n        return decodePrincipalId(b);\n    }\n    get name() {\n        const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n        return `service {${fields.join('; ')}}`;\n    }\n    valueToString(x) {\n        return `service \"${x.toText()}\"`;\n    }\n}\n/**\n * Takes an unknown value and returns a string representation of it.\n * @param x - unknown value\n * @returns {string} string representation of the value\n */\nfunction toReadableString(x) {\n    const str = JSON.stringify(x, (_key, value) => typeof value === 'bigint' ? `BigInt(${value})` : value);\n    return str && str.length > toReadableString_max\n        ? str.substring(0, toReadableString_max - 3) + '...'\n        : str;\n}\n/**\n * Encode a array of values\n * @param argTypes - array of Types\n * @param args - array of values\n * @returns {ArrayBuffer} serialised value\n */\nfunction encode(argTypes, args) {\n    if (args.length < argTypes.length) {\n        throw Error('Wrong number of message arguments');\n    }\n    const typeTable = new TypeTable();\n    argTypes.forEach(t => t.buildTypeTable(typeTable));\n    const magic = new TextEncoder().encode(magicNumber);\n    const table = typeTable.encode();\n    const len = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebEncode)(args.length);\n    const typs = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...argTypes.map(t => t.encodeType(typeTable)));\n    const vals = (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(...zipWith(argTypes, args, (t, x) => {\n        try {\n            t.covariant(x);\n        }\n        catch (e) {\n            const err = new Error(e.message + '\\n\\n');\n            throw err;\n        }\n        return t.encodeValue(x);\n    }));\n    return (0,_utils_buffer__WEBPACK_IMPORTED_MODULE_1__.concat)(magic, table, len, typs, vals);\n}\n/**\n * Decode a binary value\n * @param retTypes - Types expected in the buffer.\n * @param bytes - hex-encoded string, or buffer.\n * @returns Value deserialised to JS type\n */\nfunction decode(retTypes, bytes) {\n    const b = new _utils_buffer__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(bytes);\n    if (bytes.byteLength < magicNumber.length) {\n        throw new Error('Message length smaller than magic number');\n    }\n    const magicBuffer = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeRead)(b, magicNumber.length);\n    const magic = new TextDecoder().decode(magicBuffer);\n    if (magic !== magicNumber) {\n        throw new Error('Wrong magic number: ' + JSON.stringify(magic));\n    }\n    function readTypeTable(pipe) {\n        const typeTable = [];\n        const len = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n        for (let i = 0; i < len; i++) {\n            const ty = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(pipe));\n            switch (ty) {\n                case -18 /* IDLTypeIds.Opt */:\n                case -19 /* IDLTypeIds.Vector */: {\n                    const t = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(pipe));\n                    typeTable.push([ty, t]);\n                    break;\n                }\n                case -20 /* IDLTypeIds.Record */:\n                case -21 /* IDLTypeIds.Variant */: {\n                    const fields = [];\n                    let objectLength = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                    let prevHash;\n                    while (objectLength--) {\n                        const hash = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                        if (hash >= Math.pow(2, 32)) {\n                            throw new Error('field id out of 32-bit range');\n                        }\n                        if (typeof prevHash === 'number' && prevHash >= hash) {\n                            throw new Error('field id collision or not sorted');\n                        }\n                        prevHash = hash;\n                        const t = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(pipe));\n                        fields.push([hash, t]);\n                    }\n                    typeTable.push([ty, fields]);\n                    break;\n                }\n                case -22 /* IDLTypeIds.Func */: {\n                    const args = [];\n                    let argLength = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                    while (argLength--) {\n                        args.push(Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(pipe)));\n                    }\n                    const returnValues = [];\n                    let returnValuesLength = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                    while (returnValuesLength--) {\n                        returnValues.push(Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(pipe)));\n                    }\n                    const annotations = [];\n                    let annotationLength = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                    while (annotationLength--) {\n                        const annotation = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                        switch (annotation) {\n                            case 1: {\n                                annotations.push('query');\n                                break;\n                            }\n                            case 2: {\n                                annotations.push('oneway');\n                                break;\n                            }\n                            case 3: {\n                                annotations.push('composite_query');\n                                break;\n                            }\n                            default:\n                                throw new Error('unknown annotation');\n                        }\n                    }\n                    typeTable.push([ty, [args, returnValues, annotations]]);\n                    break;\n                }\n                case -23 /* IDLTypeIds.Service */: {\n                    let servLength = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                    const methods = [];\n                    while (servLength--) {\n                        const nameLength = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n                        const funcName = new TextDecoder().decode((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.safeRead)(pipe, nameLength));\n                        const funcType = (0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(pipe);\n                        methods.push([funcName, funcType]);\n                    }\n                    typeTable.push([ty, methods]);\n                    break;\n                }\n                default:\n                    throw new Error('Illegal op_code: ' + ty);\n            }\n        }\n        const rawList = [];\n        const length = Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.lebDecode)(pipe));\n        for (let i = 0; i < length; i++) {\n            rawList.push(Number((0,_utils_leb128__WEBPACK_IMPORTED_MODULE_3__.slebDecode)(pipe)));\n        }\n        return [typeTable, rawList];\n    }\n    const [rawTable, rawTypes] = readTypeTable(b);\n    if (rawTypes.length < retTypes.length) {\n        throw new Error('Wrong number of return values');\n    }\n    const table = rawTable.map(_ => Rec());\n    function getType(t) {\n        if (t < -24) {\n            throw new Error('future value not supported');\n        }\n        if (t < 0) {\n            switch (t) {\n                case -1:\n                    return Null;\n                case -2:\n                    return Bool;\n                case -3:\n                    return Nat;\n                case -4:\n                    return Int;\n                case -5:\n                    return Nat8;\n                case -6:\n                    return Nat16;\n                case -7:\n                    return Nat32;\n                case -8:\n                    return Nat64;\n                case -9:\n                    return Int8;\n                case -10:\n                    return Int16;\n                case -11:\n                    return Int32;\n                case -12:\n                    return Int64;\n                case -13:\n                    return Float32;\n                case -14:\n                    return Float64;\n                case -15:\n                    return Text;\n                case -16:\n                    return Reserved;\n                case -17:\n                    return Empty;\n                case -24:\n                    return Principal;\n                default:\n                    throw new Error('Illegal op_code: ' + t);\n            }\n        }\n        if (t >= rawTable.length) {\n            throw new Error('type index out of range');\n        }\n        return table[t];\n    }\n    function buildType(entry) {\n        switch (entry[0]) {\n            case -19 /* IDLTypeIds.Vector */: {\n                const ty = getType(entry[1]);\n                return Vec(ty);\n            }\n            case -18 /* IDLTypeIds.Opt */: {\n                const ty = getType(entry[1]);\n                return Opt(ty);\n            }\n            case -20 /* IDLTypeIds.Record */: {\n                const fields = {};\n                for (const [hash, ty] of entry[1]) {\n                    const name = `_${hash}_`;\n                    fields[name] = getType(ty);\n                }\n                const record = Record(fields);\n                const tuple = record.tryAsTuple();\n                if (Array.isArray(tuple)) {\n                    return Tuple(...tuple);\n                }\n                else {\n                    return record;\n                }\n            }\n            case -21 /* IDLTypeIds.Variant */: {\n                const fields = {};\n                for (const [hash, ty] of entry[1]) {\n                    const name = `_${hash}_`;\n                    fields[name] = getType(ty);\n                }\n                return Variant(fields);\n            }\n            case -22 /* IDLTypeIds.Func */: {\n                const [args, returnValues, annotations] = entry[1];\n                return Func(args.map((t) => getType(t)), returnValues.map((t) => getType(t)), annotations);\n            }\n            case -23 /* IDLTypeIds.Service */: {\n                const rec = {};\n                const methods = entry[1];\n                for (const [name, typeRef] of methods) {\n                    let type = getType(typeRef);\n                    if (type instanceof RecClass) {\n                        // unpack reference type\n                        type = type.getType();\n                    }\n                    if (!(type instanceof FuncClass)) {\n                        throw new Error('Illegal service definition: services can only contain functions');\n                    }\n                    rec[name] = type;\n                }\n                return Service(rec);\n            }\n            default:\n                throw new Error('Illegal op_code: ' + entry[0]);\n        }\n    }\n    rawTable.forEach((entry, i) => {\n        // Process function type first, so that we can construct the correct service type\n        if (entry[0] === -22 /* IDLTypeIds.Func */) {\n            const t = buildType(entry);\n            table[i].fill(t);\n        }\n    });\n    rawTable.forEach((entry, i) => {\n        if (entry[0] !== -22 /* IDLTypeIds.Func */) {\n            const t = buildType(entry);\n            table[i].fill(t);\n        }\n    });\n    const types = rawTypes.map(t => getType(t));\n    const output = retTypes.map((t, i) => {\n        return t.decodeValue(b, types[i]);\n    });\n    // skip unused values\n    for (let ind = retTypes.length; ind < types.length; ind++) {\n        types[ind].decodeValue(b, types[ind]);\n    }\n    if (b.byteLength > 0) {\n        throw new Error('decode: Left-over bytes');\n    }\n    return output;\n}\n// Export Types instances.\nconst Empty = new EmptyClass();\nconst Reserved = new ReservedClass();\n/**\n * Client-only type for deserializing unknown data. Not supported by Candid, and its use is discouraged.\n */\nconst Unknown = new UnknownClass();\nconst Bool = new BoolClass();\nconst Null = new NullClass();\nconst Text = new TextClass();\nconst Int = new IntClass();\nconst Nat = new NatClass();\nconst Float32 = new FloatClass(32);\nconst Float64 = new FloatClass(64);\nconst Int8 = new FixedIntClass(8);\nconst Int16 = new FixedIntClass(16);\nconst Int32 = new FixedIntClass(32);\nconst Int64 = new FixedIntClass(64);\nconst Nat8 = new FixedNatClass(8);\nconst Nat16 = new FixedNatClass(16);\nconst Nat32 = new FixedNatClass(32);\nconst Nat64 = new FixedNatClass(64);\nconst Principal = new PrincipalClass();\n/**\n *\n * @param types array of any types\n * @returns TupleClass from those types\n */\nfunction Tuple(...types) {\n    return new TupleClass(types);\n}\n/**\n *\n * @param t IDL Type\n * @returns VecClass from that type\n */\nfunction Vec(t) {\n    return new VecClass(t);\n}\n/**\n *\n * @param t IDL Type\n * @returns OptClass of Type\n */\nfunction Opt(t) {\n    return new OptClass(t);\n}\n/**\n *\n * @param t Record of string and IDL Type\n * @returns RecordClass of string and Type\n */\nfunction Record(t) {\n    return new RecordClass(t);\n}\n/**\n *\n * @param fields Record of string and IDL Type\n * @returns VariantClass\n */\nfunction Variant(fields) {\n    return new VariantClass(fields);\n}\n/**\n *\n * @returns new RecClass\n */\nfunction Rec() {\n    return new RecClass();\n}\n/**\n *\n * @param args array of IDL Types\n * @param ret array of IDL Types\n * @param annotations array of strings, [] by default\n * @returns new FuncClass\n */\nfunction Func(args, ret, annotations = []) {\n    return new FuncClass(args, ret, annotations);\n}\n/**\n *\n * @param t Record of string and FuncClass\n * @returns ServiceClass\n */\nfunction Service(t) {\n    return new ServiceClass(t);\n}\n//# sourceMappingURL=idl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/idl.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/index.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IDL: () => (/* reexport module object */ _idl__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   InputBox: () => (/* reexport safe */ _candid_core__WEBPACK_IMPORTED_MODULE_1__.InputBox),\n/* harmony export */   InputForm: () => (/* reexport safe */ _candid_core__WEBPACK_IMPORTED_MODULE_1__.InputForm),\n/* harmony export */   OptionForm: () => (/* reexport safe */ _candid_core__WEBPACK_IMPORTED_MODULE_1__.OptionForm),\n/* harmony export */   PipeArrayBuffer: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_5__.PipeArrayBuffer),\n/* harmony export */   RecordForm: () => (/* reexport safe */ _candid_core__WEBPACK_IMPORTED_MODULE_1__.RecordForm),\n/* harmony export */   Render: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.Render),\n/* harmony export */   TupleForm: () => (/* reexport safe */ _candid_core__WEBPACK_IMPORTED_MODULE_1__.TupleForm),\n/* harmony export */   VariantForm: () => (/* reexport safe */ _candid_core__WEBPACK_IMPORTED_MODULE_1__.VariantForm),\n/* harmony export */   VecForm: () => (/* reexport safe */ _candid_core__WEBPACK_IMPORTED_MODULE_1__.VecForm),\n/* harmony export */   bufFromBufLike: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_5__.bufFromBufLike),\n/* harmony export */   concat: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_5__.concat),\n/* harmony export */   fromHexString: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_5__.fromHexString),\n/* harmony export */   idlLabelToId: () => (/* reexport safe */ _utils_hash__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId),\n/* harmony export */   inputBox: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.inputBox),\n/* harmony export */   lebDecode: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.lebDecode),\n/* harmony export */   lebEncode: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.lebEncode),\n/* harmony export */   optForm: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.optForm),\n/* harmony export */   readIntLE: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.readIntLE),\n/* harmony export */   readUIntLE: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.readUIntLE),\n/* harmony export */   recordForm: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.recordForm),\n/* harmony export */   renderInput: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.renderInput),\n/* harmony export */   renderValue: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.renderValue),\n/* harmony export */   safeRead: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.safeRead),\n/* harmony export */   safeReadUint8: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.safeReadUint8),\n/* harmony export */   slebDecode: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.slebDecode),\n/* harmony export */   slebEncode: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.slebEncode),\n/* harmony export */   toHexString: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_5__.toHexString),\n/* harmony export */   tupleForm: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.tupleForm),\n/* harmony export */   uint8ToBuf: () => (/* reexport safe */ _utils_buffer__WEBPACK_IMPORTED_MODULE_5__.uint8ToBuf),\n/* harmony export */   variantForm: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.variantForm),\n/* harmony export */   vecForm: () => (/* reexport safe */ _candid_ui__WEBPACK_IMPORTED_MODULE_0__.vecForm),\n/* harmony export */   writeIntLE: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.writeIntLE),\n/* harmony export */   writeUIntLE: () => (/* reexport safe */ _utils_leb128__WEBPACK_IMPORTED_MODULE_4__.writeUIntLE)\n/* harmony export */ });\n/* harmony import */ var _candid_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./candid-ui */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/candid-ui.js\");\n/* harmony import */ var _candid_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./candid-core */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/candid-core.js\");\n/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./idl */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/idl.js\");\n/* harmony import */ var _utils_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/hash */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/hash.js\");\n/* harmony import */ var _utils_leb128__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/leb128 */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/leb128.js\");\n/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/buffer */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/buffer.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/types.js\");\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0U7QUFDRDtBQUNBO0FBQ0U7QUFDQTtBQUNQO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvY2FuZGlkL2xpYi9lc20vaW5kZXguanM/YWExMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2NhbmRpZC11aSc7XG5leHBvcnQgKiBmcm9tICcuL2NhbmRpZC1jb3JlJztcbmV4cG9ydCAqIGFzIElETCBmcm9tICcuL2lkbCc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzL2hhc2gnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9sZWIxMjgnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9idWZmZXInO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/types.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7QUFBVTtBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvY2FuZGlkL2xpYi9lc20vdHlwZXMuanM/NWUzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js":
/*!********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iexp2: () => (/* binding */ iexp2),\n/* harmony export */   ilog2: () => (/* binding */ ilog2)\n/* harmony export */ });\n/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n * @param n bigint or integer\n * @returns integer\n */\nfunction ilog2(n) {\n    const nBig = BigInt(n);\n    if (n <= 0) {\n        throw new RangeError('Input must be positive');\n    }\n    return nBig.toString(2).length - 1;\n}\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n * @param n bigint or integer\n * @returns bigint\n */\nfunction iexp2(n) {\n    const nBig = BigInt(n);\n    if (n < 0) {\n        throw new RangeError('Input must be non-negative');\n    }\n    return BigInt(1) << nBig;\n}\n//# sourceMappingURL=bigint-math.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL3V0aWxzL2JpZ2ludC1tYXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL3V0aWxzL2JpZ2ludC1tYXRoLmpzP2M3MTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFcXVpdmFsZW50IHRvIGBNYXRoLmxvZzIobilgIHdpdGggc3VwcG9ydCBmb3IgYEJpZ0ludGAgdmFsdWVzXG4gKiBAcGFyYW0gbiBiaWdpbnQgb3IgaW50ZWdlclxuICogQHJldHVybnMgaW50ZWdlclxuICovXG5leHBvcnQgZnVuY3Rpb24gaWxvZzIobikge1xuICAgIGNvbnN0IG5CaWcgPSBCaWdJbnQobik7XG4gICAgaWYgKG4gPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5wdXQgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICAgIH1cbiAgICByZXR1cm4gbkJpZy50b1N0cmluZygyKS5sZW5ndGggLSAxO1xufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIGAyICoqIG5gIHdpdGggc3VwcG9ydCBmb3IgYEJpZ0ludGAgdmFsdWVzXG4gKiAobmVjZXNzYXJ5IGZvciBicm93c2VyIHByZXByb2Nlc3NvcnMgd2hpY2ggcmVwbGFjZSB0aGUgYCoqYCBvcGVyYXRvciB3aXRoIGBNYXRoLnBvd2ApXG4gKiBAcGFyYW0gbiBiaWdpbnQgb3IgaW50ZWdlclxuICogQHJldHVybnMgYmlnaW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZXhwMihuKSB7XG4gICAgY29uc3QgbkJpZyA9IEJpZ0ludChuKTtcbiAgICBpZiAobiA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0lucHV0IG11c3QgYmUgbm9uLW5lZ2F0aXZlJyk7XG4gICAgfVxuICAgIHJldHVybiBCaWdJbnQoMSkgPDwgbkJpZztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpZ2ludC1tYXRoLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/buffer.js":
/*!***************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/utils/buffer.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PipeArrayBuffer: () => (/* binding */ PipeArrayBuffer),\n/* harmony export */   bufFromBufLike: () => (/* binding */ bufFromBufLike),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   fromHexString: () => (/* binding */ fromHexString),\n/* harmony export */   toHexString: () => (/* binding */ toHexString),\n/* harmony export */   uint8ToBuf: () => (/* binding */ uint8ToBuf)\n/* harmony export */ });\n/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nfunction concat(...buffers) {\n    const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n    let index = 0;\n    for (const b of buffers) {\n        result.set(new Uint8Array(b), index);\n        index += b.byteLength;\n    }\n    return result;\n}\n/**\n * Returns an hexadecimal representation of an array buffer.\n * @param bytes The array buffer.\n */\nfunction toHexString(bytes) {\n    return new Uint8Array(bytes).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n/**\n * Return an array buffer from its hexadecimal representation.\n * @param hexString The hexadecimal string.\n */\nfunction fromHexString(hexString) {\n    var _a;\n    return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16)));\n}\n/**\n * A class that abstracts a pipe-like ArrayBuffer.\n */\nclass PipeArrayBuffer {\n    /**\n     * Creates a new instance of a pipe\n     * @param buffer an optional buffer to start with\n     * @param length an optional amount of bytes to use for the length.\n     */\n    constructor(buffer, length = (buffer === null || buffer === void 0 ? void 0 : buffer.byteLength) || 0) {\n        this._buffer = bufFromBufLike(buffer || new ArrayBuffer(0));\n        this._view = new Uint8Array(this._buffer, 0, length);\n    }\n    get buffer() {\n        // Return a copy of the buffer.\n        return bufFromBufLike(this._view.slice());\n    }\n    get byteLength() {\n        return this._view.byteLength;\n    }\n    /**\n     * Read `num` number of bytes from the front of the pipe.\n     * @param num The number of bytes to read.\n     */\n    read(num) {\n        const result = this._view.subarray(0, num);\n        this._view = this._view.subarray(num);\n        return result.slice().buffer;\n    }\n    readUint8() {\n        const result = this._view[0];\n        this._view = this._view.subarray(1);\n        return result;\n    }\n    /**\n     * Write a buffer to the end of the pipe.\n     * @param buf The bytes to write.\n     */\n    write(buf) {\n        const b = new Uint8Array(buf);\n        const offset = this._view.byteLength;\n        if (this._view.byteOffset + this._view.byteLength + b.byteLength >= this._buffer.byteLength) {\n            // Alloc grow the view to include the new bytes.\n            this.alloc(b.byteLength);\n        }\n        else {\n            // Update the view to include the new bytes.\n            this._view = new Uint8Array(this._buffer, this._view.byteOffset, this._view.byteLength + b.byteLength);\n        }\n        this._view.set(b, offset);\n    }\n    /**\n     * Whether or not there is more data to read from the buffer\n     */\n    get end() {\n        return this._view.byteLength === 0;\n    }\n    /**\n     * Allocate a fixed amount of memory in the buffer. This does not affect the view.\n     * @param amount A number of bytes to add to the buffer.\n     */\n    alloc(amount) {\n        // Add a little bit of exponential growth.\n        const b = new ArrayBuffer(((this._buffer.byteLength + amount) * 1.2) | 0);\n        const v = new Uint8Array(b, 0, this._view.byteLength + amount);\n        v.set(this._view);\n        this._buffer = b;\n        this._view = v;\n    }\n}\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nfunction uint8ToBuf(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nfunction bufFromBufLike(bufLike) {\n    if (bufLike instanceof Uint8Array) {\n        return uint8ToBuf(bufLike);\n    }\n    if (bufLike instanceof ArrayBuffer) {\n        return bufLike;\n    }\n    if (Array.isArray(bufLike)) {\n        return uint8ToBuf(new Uint8Array(bufLike));\n    }\n    if ('buffer' in bufLike) {\n        return bufFromBufLike(bufLike.buffer);\n    }\n    return uint8ToBuf(new Uint8Array(bufLike));\n}\n//# sourceMappingURL=buffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL3V0aWxzL2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0RBQW9ELElBQUk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL3V0aWxzL2J1ZmZlci5qcz9jMjU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29uY2F0ZW5hdGUgbXVsdGlwbGUgYXJyYXkgYnVmZmVycy5cbiAqIEBwYXJhbSBidWZmZXJzIFRoZSBidWZmZXJzIHRvIGNvbmNhdGVuYXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KC4uLmJ1ZmZlcnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShidWZmZXJzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyLmJ5dGVMZW5ndGgsIDApKTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvciAoY29uc3QgYiBvZiBidWZmZXJzKSB7XG4gICAgICAgIHJlc3VsdC5zZXQobmV3IFVpbnQ4QXJyYXkoYiksIGluZGV4KTtcbiAgICAgICAgaW5kZXggKz0gYi5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFycmF5IGJ1ZmZlci5cbiAqIEBwYXJhbSBieXRlcyBUaGUgYXJyYXkgYnVmZmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9IZXhTdHJpbmcoYnl0ZXMpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpLnJlZHVjZSgoc3RyLCBieXRlKSA9PiBzdHIgKyBieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpLCAnJyk7XG59XG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBidWZmZXIgZnJvbSBpdHMgaGV4YWRlY2ltYWwgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0gaGV4U3RyaW5nIFRoZSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSGV4U3RyaW5nKGhleFN0cmluZykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoKChfYSA9IGhleFN0cmluZy5tYXRjaCgvLnsxLDJ9L2cpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkubWFwKGJ5dGUgPT4gcGFyc2VJbnQoYnl0ZSwgMTYpKSk7XG59XG4vKipcbiAqIEEgY2xhc3MgdGhhdCBhYnN0cmFjdHMgYSBwaXBlLWxpa2UgQXJyYXlCdWZmZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBQaXBlQXJyYXlCdWZmZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBwaXBlXG4gICAgICogQHBhcmFtIGJ1ZmZlciBhbiBvcHRpb25hbCBidWZmZXIgdG8gc3RhcnQgd2l0aFxuICAgICAqIEBwYXJhbSBsZW5ndGggYW4gb3B0aW9uYWwgYW1vdW50IG9mIGJ5dGVzIHRvIHVzZSBmb3IgdGhlIGxlbmd0aC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihidWZmZXIsIGxlbmd0aCA9IChidWZmZXIgPT09IG51bGwgfHwgYnVmZmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidWZmZXIuYnl0ZUxlbmd0aCkgfHwgMCkge1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBidWZGcm9tQnVmTGlrZShidWZmZXIgfHwgbmV3IEFycmF5QnVmZmVyKDApKTtcbiAgICAgICAgdGhpcy5fdmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlciwgMCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZ2V0IGJ1ZmZlcigpIHtcbiAgICAgICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgYnVmZmVyLlxuICAgICAgICByZXR1cm4gYnVmRnJvbUJ1Zkxpa2UodGhpcy5fdmlldy5zbGljZSgpKTtcbiAgICB9XG4gICAgZ2V0IGJ5dGVMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3LmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYG51bWAgbnVtYmVyIG9mIGJ5dGVzIGZyb20gdGhlIGZyb250IG9mIHRoZSBwaXBlLlxuICAgICAqIEBwYXJhbSBudW0gVGhlIG51bWJlciBvZiBieXRlcyB0byByZWFkLlxuICAgICAqL1xuICAgIHJlYWQobnVtKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3ZpZXcuc3ViYXJyYXkoMCwgbnVtKTtcbiAgICAgICAgdGhpcy5fdmlldyA9IHRoaXMuX3ZpZXcuc3ViYXJyYXkobnVtKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zbGljZSgpLmJ1ZmZlcjtcbiAgICB9XG4gICAgcmVhZFVpbnQ4KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl92aWV3WzBdO1xuICAgICAgICB0aGlzLl92aWV3ID0gdGhpcy5fdmlldy5zdWJhcnJheSgxKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBidWZmZXIgdG8gdGhlIGVuZCBvZiB0aGUgcGlwZS5cbiAgICAgKiBAcGFyYW0gYnVmIFRoZSBieXRlcyB0byB3cml0ZS5cbiAgICAgKi9cbiAgICB3cml0ZShidWYpIHtcbiAgICAgICAgY29uc3QgYiA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuX3ZpZXcuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXcuYnl0ZU9mZnNldCArIHRoaXMuX3ZpZXcuYnl0ZUxlbmd0aCArIGIuYnl0ZUxlbmd0aCA+PSB0aGlzLl9idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgLy8gQWxsb2MgZ3JvdyB0aGUgdmlldyB0byBpbmNsdWRlIHRoZSBuZXcgYnl0ZXMuXG4gICAgICAgICAgICB0aGlzLmFsbG9jKGIuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZpZXcgdG8gaW5jbHVkZSB0aGUgbmV3IGJ5dGVzLlxuICAgICAgICAgICAgdGhpcy5fdmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlciwgdGhpcy5fdmlldy5ieXRlT2Zmc2V0LCB0aGlzLl92aWV3LmJ5dGVMZW5ndGggKyBiLmJ5dGVMZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZpZXcuc2V0KGIsIG9mZnNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZXJlIGlzIG1vcmUgZGF0YSB0byByZWFkIGZyb20gdGhlIGJ1ZmZlclxuICAgICAqL1xuICAgIGdldCBlbmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3LmJ5dGVMZW5ndGggPT09IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsbG9jYXRlIGEgZml4ZWQgYW1vdW50IG9mIG1lbW9yeSBpbiB0aGUgYnVmZmVyLiBUaGlzIGRvZXMgbm90IGFmZmVjdCB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0gYW1vdW50IEEgbnVtYmVyIG9mIGJ5dGVzIHRvIGFkZCB0byB0aGUgYnVmZmVyLlxuICAgICAqL1xuICAgIGFsbG9jKGFtb3VudCkge1xuICAgICAgICAvLyBBZGQgYSBsaXR0bGUgYml0IG9mIGV4cG9uZW50aWFsIGdyb3d0aC5cbiAgICAgICAgY29uc3QgYiA9IG5ldyBBcnJheUJ1ZmZlcigoKHRoaXMuX2J1ZmZlci5ieXRlTGVuZ3RoICsgYW1vdW50KSAqIDEuMikgfCAwKTtcbiAgICAgICAgY29uc3QgdiA9IG5ldyBVaW50OEFycmF5KGIsIDAsIHRoaXMuX3ZpZXcuYnl0ZUxlbmd0aCArIGFtb3VudCk7XG4gICAgICAgIHYuc2V0KHRoaXMuX3ZpZXcpO1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBiO1xuICAgICAgICB0aGlzLl92aWV3ID0gdjtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgYSB0cnVlIEFycmF5QnVmZmVyIGZyb20gYSBVaW50OEFycmF5LCBhcyBVaW50OEFycmF5LmJ1ZmZlciBpcyB1bnNhZmUuXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGFyciBVaW50OEFycmF5IHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIEFycmF5QnVmZmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1aW50OFRvQnVmKGFycikge1xuICAgIHJldHVybiBuZXcgRGF0YVZpZXcoYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlTGVuZ3RoKS5idWZmZXI7XG59XG4vKipcbiAqIFJldHVybnMgYSB0cnVlIEFycmF5QnVmZmVyIGZyb20gYW4gQXJyYXlCdWZmZXJMaWtlIG9iamVjdC5cbiAqIEBwYXJhbSBidWZMaWtlIGEgYnVmZmVyLWxpa2Ugb2JqZWN0XG4gKiBAcmV0dXJucyBBcnJheUJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVmRnJvbUJ1Zkxpa2UoYnVmTGlrZSkge1xuICAgIGlmIChidWZMaWtlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gdWludDhUb0J1ZihidWZMaWtlKTtcbiAgICB9XG4gICAgaWYgKGJ1Zkxpa2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gYnVmTGlrZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYnVmTGlrZSkpIHtcbiAgICAgICAgcmV0dXJuIHVpbnQ4VG9CdWYobmV3IFVpbnQ4QXJyYXkoYnVmTGlrZSkpO1xuICAgIH1cbiAgICBpZiAoJ2J1ZmZlcicgaW4gYnVmTGlrZSkge1xuICAgICAgICByZXR1cm4gYnVmRnJvbUJ1Zkxpa2UoYnVmTGlrZS5idWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdWludDhUb0J1ZihuZXcgVWludDhBcnJheShidWZMaWtlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/buffer.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/hash.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/utils/hash.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   idlLabelToId: () => (/* binding */ idlLabelToId)\n/* harmony export */ });\n/**\n * Hashes a string to a number. Algorithm can be found here:\n * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf\n * @param s - string to hash\n * @returns number representing hashed string\n */\nfunction idlHash(s) {\n    const utf8encoder = new TextEncoder();\n    const array = utf8encoder.encode(s);\n    let h = 0;\n    for (const c of array) {\n        h = (h * 223 + c) % 2 ** 32;\n    }\n    return h;\n}\n/**\n *\n * @param label string\n * @returns number representing hashed label\n */\nfunction idlLabelToId(label) {\n    if (/^_\\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {\n        const num = +label.slice(1, -1);\n        if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {\n            return num;\n        }\n    }\n    return idlHash(label);\n}\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL3V0aWxzL2hhc2guanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2NhbmRpZC9saWIvZXNtL3V0aWxzL2hhc2guanM/NThjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhhc2hlcyBhIHN0cmluZyB0byBhIG51bWJlci4gQWxnb3JpdGhtIGNhbiBiZSBmb3VuZCBoZXJlOlxuICogaHR0cHM6Ly9jYW1sLmlucmlhLmZyL3B1Yi9wYXBlcnMvZ2FycmlndWUtcG9seW1vcnBoaWNfdmFyaWFudHMtbWw5OC5wZGZcbiAqIEBwYXJhbSBzIC0gc3RyaW5nIHRvIGhhc2hcbiAqIEByZXR1cm5zIG51bWJlciByZXByZXNlbnRpbmcgaGFzaGVkIHN0cmluZ1xuICovXG5mdW5jdGlvbiBpZGxIYXNoKHMpIHtcbiAgICBjb25zdCB1dGY4ZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgIGNvbnN0IGFycmF5ID0gdXRmOGVuY29kZXIuZW5jb2RlKHMpO1xuICAgIGxldCBoID0gMDtcbiAgICBmb3IgKGNvbnN0IGMgb2YgYXJyYXkpIHtcbiAgICAgICAgaCA9IChoICogMjIzICsgYykgJSAyICoqIDMyO1xuICAgIH1cbiAgICByZXR1cm4gaDtcbn1cbi8qKlxuICpcbiAqIEBwYXJhbSBsYWJlbCBzdHJpbmdcbiAqIEByZXR1cm5zIG51bWJlciByZXByZXNlbnRpbmcgaGFzaGVkIGxhYmVsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGxMYWJlbFRvSWQobGFiZWwpIHtcbiAgICBpZiAoL15fXFxkK18kLy50ZXN0KGxhYmVsKSB8fCAvXl8weFswLTlhLWZBLUZdK18kLy50ZXN0KGxhYmVsKSkge1xuICAgICAgICBjb25zdCBudW0gPSArbGFiZWwuc2xpY2UoMSwgLTEpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzU2FmZUludGVnZXIobnVtKSAmJiBudW0gPj0gMCAmJiBudW0gPCAyICoqIDMyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZGxIYXNoKGxhYmVsKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/hash.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/leb128.js":
/*!***************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/candid/lib/esm/utils/leb128.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lebDecode: () => (/* binding */ lebDecode),\n/* harmony export */   lebEncode: () => (/* binding */ lebEncode),\n/* harmony export */   readIntLE: () => (/* binding */ readIntLE),\n/* harmony export */   readUIntLE: () => (/* binding */ readUIntLE),\n/* harmony export */   safeRead: () => (/* binding */ safeRead),\n/* harmony export */   safeReadUint8: () => (/* binding */ safeReadUint8),\n/* harmony export */   slebDecode: () => (/* binding */ slebDecode),\n/* harmony export */   slebEncode: () => (/* binding */ slebEncode),\n/* harmony export */   writeIntLE: () => (/* binding */ writeIntLE),\n/* harmony export */   writeUIntLE: () => (/* binding */ writeUIntLE)\n/* harmony export */ });\n/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/buffer.js\");\n/* eslint-disable no-constant-condition */\n// Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer\n//       implementation, which isn't compatible with the NPM buffer package\n//       which we use everywhere else. This means that we have to transform\n//       one into the other, hence why every function that returns a Buffer\n//       actually return `new Buffer(pipe.buffer)`.\n// TODO: The best solution would be to have our own buffer type around\n//       Uint8Array which is standard.\n\nfunction eob() {\n    throw new Error('unexpected end of buffer');\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param num number\n * @returns Buffer\n */\nfunction safeRead(pipe, num) {\n    if (pipe.byteLength < num) {\n        eob();\n    }\n    return pipe.read(num);\n}\n/**\n * @param pipe - PipeArrayBuffer simulating buffer-pipe api\n */\nfunction safeReadUint8(pipe) {\n    const byte = pipe.readUint8();\n    if (byte === undefined) {\n        eob();\n    }\n    return byte;\n}\n/**\n * Encode a positive number (or bigint) into a Buffer. The number will be floored to the\n * nearest integer.\n * @param value The number to encode.\n */\nfunction lebEncode(value) {\n    if (typeof value === 'number') {\n        value = BigInt(value);\n    }\n    if (value < BigInt(0)) {\n        throw new Error('Cannot leb encode negative values.');\n    }\n    const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n    const pipe = new _buffer__WEBPACK_IMPORTED_MODULE_0__.PipeArrayBuffer(new ArrayBuffer(byteLength), 0);\n    while (true) {\n        const i = Number(value & BigInt(0x7f));\n        value /= BigInt(0x80);\n        if (value === BigInt(0)) {\n            pipe.write(new Uint8Array([i]));\n            break;\n        }\n        else {\n            pipe.write(new Uint8Array([i | 0x80]));\n        }\n    }\n    return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number will always be positive (does not\n * support signed leb encoding).\n * @param pipe A Buffer containing the leb encoded bits.\n */\nfunction lebDecode(pipe) {\n    let weight = BigInt(1);\n    let value = BigInt(0);\n    let byte;\n    do {\n        byte = safeReadUint8(pipe);\n        value += BigInt(byte & 0x7f).valueOf() * weight;\n        weight *= BigInt(128);\n    } while (byte >= 0x80);\n    return value;\n}\n/**\n * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number\n * will be floored to the nearest integer.\n * @param value The number to encode.\n */\nfunction slebEncode(value) {\n    if (typeof value === 'number') {\n        value = BigInt(value);\n    }\n    const isNeg = value < BigInt(0);\n    if (isNeg) {\n        value = -value - BigInt(1);\n    }\n    const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n    const pipe = new _buffer__WEBPACK_IMPORTED_MODULE_0__.PipeArrayBuffer(new ArrayBuffer(byteLength), 0);\n    while (true) {\n        const i = getLowerBytes(value);\n        value /= BigInt(0x80);\n        // prettier-ignore\n        if ((isNeg && value === BigInt(0) && (i & 0x40) !== 0)\n            || (!isNeg && value === BigInt(0) && (i & 0x40) === 0)) {\n            pipe.write(new Uint8Array([i]));\n            break;\n        }\n        else {\n            pipe.write(new Uint8Array([i | 0x80]));\n        }\n    }\n    function getLowerBytes(num) {\n        const bytes = num % BigInt(0x80);\n        if (isNeg) {\n            // We swap the bits here again, and remove 1 to do two's complement.\n            return Number(BigInt(0x80) - bytes - BigInt(1));\n        }\n        else {\n            return Number(bytes);\n        }\n    }\n    return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative\n * signed-leb encoding.\n * @param pipe A Buffer containing the signed leb encoded bits.\n */\nfunction slebDecode(pipe) {\n    // Get the size of the buffer, then cut a buffer of that size.\n    const pipeView = new Uint8Array(pipe.buffer);\n    let len = 0;\n    for (; len < pipeView.byteLength; len++) {\n        if (pipeView[len] < 0x80) {\n            // If it's a positive number, we reuse lebDecode.\n            if ((pipeView[len] & 0x40) === 0) {\n                return lebDecode(pipe);\n            }\n            break;\n        }\n    }\n    const bytes = new Uint8Array(safeRead(pipe, len + 1));\n    let value = BigInt(0);\n    for (let i = bytes.byteLength - 1; i >= 0; i--) {\n        value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);\n    }\n    return -value - BigInt(1);\n}\n/**\n *\n * @param value bigint or number\n * @param byteLength number\n * @returns Buffer\n */\nfunction writeUIntLE(value, byteLength) {\n    if (BigInt(value) < BigInt(0)) {\n        throw new Error('Cannot write negative values.');\n    }\n    return writeIntLE(value, byteLength);\n}\n/**\n *\n * @param value - bigint or number\n * @param byteLength - number\n * @returns ArrayBuffer\n */\nfunction writeIntLE(value, byteLength) {\n    value = BigInt(value);\n    const pipe = new _buffer__WEBPACK_IMPORTED_MODULE_0__.PipeArrayBuffer(new ArrayBuffer(Math.min(1, byteLength)), 0);\n    let i = 0;\n    let mul = BigInt(256);\n    let sub = BigInt(0);\n    let byte = Number(value % mul);\n    pipe.write(new Uint8Array([byte]));\n    while (++i < byteLength) {\n        if (value < 0 && sub === BigInt(0) && byte !== 0) {\n            sub = BigInt(1);\n        }\n        byte = Number((value / mul - sub) % BigInt(256));\n        pipe.write(new Uint8Array([byte]));\n        mul *= BigInt(256);\n    }\n    return pipe.buffer;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nfunction readUIntLE(pipe, byteLength) {\n    let val = BigInt(safeReadUint8(pipe));\n    let mul = BigInt(1);\n    let i = 0;\n    while (++i < byteLength) {\n        mul *= BigInt(256);\n        const byte = BigInt(safeReadUint8(pipe));\n        val = val + mul * byte;\n    }\n    return val;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nfunction readIntLE(pipe, byteLength) {\n    let val = readUIntLE(pipe, byteLength);\n    const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));\n    if (val >= mul) {\n        val -= mul * BigInt(2);\n    }\n    return val;\n}\n//# sourceMappingURL=leb128.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/utils/leb128.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/delegation.js":
/*!************************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/identity/lib/esm/identity/delegation.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Delegation: () => (/* binding */ Delegation),\n/* harmony export */   DelegationChain: () => (/* binding */ DelegationChain),\n/* harmony export */   DelegationIdentity: () => (/* binding */ DelegationIdentity),\n/* harmony export */   PartialDelegationIdentity: () => (/* binding */ PartialDelegationIdentity),\n/* harmony export */   isDelegationValid: () => (/* binding */ isDelegationValid)\n/* harmony export */ });\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! simple-cbor */ \"(ssr)/../../../../../node_modules/simple-cbor/src/index.js\");\n/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(simple_cbor__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _partial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./partial */ \"(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/partial.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar _PartialDelegationIdentity_delegation;\n\n\n\n\nconst domainSeparator = new TextEncoder().encode('\\x1Aic-request-auth-delegation');\nconst requestDomainSeparator = new TextEncoder().encode('\\x0Aic-request');\nfunction _parseBlob(value) {\n    if (typeof value !== 'string' || value.length < 64) {\n        throw new Error('Invalid public key.');\n    }\n    return (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.fromHex)(value);\n}\n/**\n * A single delegation object that is signed by a private key. This is constructed by\n * `DelegationChain.create()`.\n *\n * {@see DelegationChain}\n */\nclass Delegation {\n    constructor(pubkey, expiration, targets) {\n        this.pubkey = pubkey;\n        this.expiration = expiration;\n        this.targets = targets;\n    }\n    toCBOR() {\n        // Expiration field needs to be encoded as a u64 specifically.\n        return simple_cbor__WEBPACK_IMPORTED_MODULE_2__.value.map(Object.assign({ pubkey: simple_cbor__WEBPACK_IMPORTED_MODULE_2__.value.bytes(this.pubkey), expiration: simple_cbor__WEBPACK_IMPORTED_MODULE_2__.value.u64(this.expiration.toString(16), 16) }, (this.targets && {\n            targets: simple_cbor__WEBPACK_IMPORTED_MODULE_2__.value.array(this.targets.map(t => simple_cbor__WEBPACK_IMPORTED_MODULE_2__.value.bytes(t.toUint8Array()))),\n        })));\n    }\n    toJSON() {\n        // every string should be hex and once-de-hexed,\n        // discoverable what it is (e.g. de-hex to get JSON with a 'type' property, or de-hex to DER\n        // with an OID). After de-hex, if it's not obvious what it is, it's an ArrayBuffer.\n        return Object.assign({ expiration: this.expiration.toString(16), pubkey: (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(this.pubkey) }, (this.targets && { targets: this.targets.map(p => p.toHex()) }));\n    }\n}\n/**\n * Sign a single delegation object for a period of time.\n * @param from The identity that lends its delegation.\n * @param to The identity that receives the delegation.\n * @param expiration An expiration date for this delegation.\n * @param targets Limit this delegation to the target principals.\n */\nasync function _createSingleDelegation(from, to, expiration, targets) {\n    const delegation = new Delegation(to.toDer(), BigInt(+expiration) * BigInt(1000000), // In nanoseconds.\n    targets);\n    // The signature is calculated by signing the concatenation of the domain separator\n    // and the message.\n    // Note: To ensure Safari treats this as a user gesture, ensure to not use async methods\n    // besides the actualy webauthn functionality (such as `sign`). Safari will de-register\n    // a user gesture if you await an async call thats not fetch, xhr, or setTimeout.\n    const challenge = new Uint8Array([\n        ...domainSeparator,\n        ...new Uint8Array((0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.requestIdOf)(delegation)),\n    ]);\n    const signature = await from.sign(challenge);\n    return {\n        delegation,\n        signature,\n    };\n}\n/**\n * A chain of delegations. This is JSON Serializable.\n * This is the object to serialize and pass to a DelegationIdentity. It does not keep any\n * private keys.\n */\nclass DelegationChain {\n    constructor(delegations, publicKey) {\n        this.delegations = delegations;\n        this.publicKey = publicKey;\n    }\n    /**\n     * Create a delegation chain between two (or more) keys. By default, the expiration time\n     * will be very short (15 minutes).\n     *\n     * To build a chain of more than 2 identities, this function needs to be called multiple times,\n     * passing the previous delegation chain into the options argument. For example:\n     * @example\n     * const rootKey = createKey();\n     * const middleKey = createKey();\n     * const bottomeKey = createKey();\n     *\n     * const rootToMiddle = await DelegationChain.create(\n     *   root, middle.getPublicKey(), Date.parse('2100-01-01'),\n     * );\n     * const middleToBottom = await DelegationChain.create(\n     *   middle, bottom.getPublicKey(), Date.parse('2100-01-01'), { previous: rootToMiddle },\n     * );\n     *\n     * // We can now use a delegation identity that uses the delegation above:\n     * const identity = DelegationIdentity.fromDelegation(bottomKey, middleToBottom);\n     * @param from The identity that will delegate.\n     * @param to The identity that gets delegated. It can now sign messages as if it was the\n     *           identity above.\n     * @param expiration The length the delegation is valid. By default, 15 minutes from calling\n     *                   this function.\n     * @param options A set of options for this delegation. expiration and previous\n     * @param options.previous - Another DelegationChain that this chain should start with.\n     * @param options.targets - targets that scope the delegation (e.g. Canister Principals)\n     */\n    static async create(from, to, expiration = new Date(Date.now() + 15 * 60 * 1000), options = {}) {\n        var _a, _b;\n        const delegation = await _createSingleDelegation(from, to, expiration, options.targets);\n        return new DelegationChain([...(((_a = options.previous) === null || _a === void 0 ? void 0 : _a.delegations) || []), delegation], ((_b = options.previous) === null || _b === void 0 ? void 0 : _b.publicKey) || from.getPublicKey().toDer());\n    }\n    /**\n     * Creates a DelegationChain object from a JSON string.\n     * @param json The JSON string to parse.\n     */\n    static fromJSON(json) {\n        const { publicKey, delegations } = typeof json === 'string' ? JSON.parse(json) : json;\n        if (!Array.isArray(delegations)) {\n            throw new Error('Invalid delegations.');\n        }\n        const parsedDelegations = delegations.map(signedDelegation => {\n            const { delegation, signature } = signedDelegation;\n            const { pubkey, expiration, targets } = delegation;\n            if (targets !== undefined && !Array.isArray(targets)) {\n                throw new Error('Invalid targets.');\n            }\n            return {\n                delegation: new Delegation(_parseBlob(pubkey), BigInt('0x' + expiration), // expiration in JSON is an hexa string (See toJSON() below).\n                targets &&\n                    targets.map((t) => {\n                        if (typeof t !== 'string') {\n                            throw new Error('Invalid target.');\n                        }\n                        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__.Principal.fromHex(t);\n                    })),\n                signature: _parseBlob(signature),\n            };\n        });\n        return new this(parsedDelegations, _parseBlob(publicKey));\n    }\n    /**\n     * Creates a DelegationChain object from a list of delegations and a DER-encoded public key.\n     * @param delegations The list of delegations.\n     * @param publicKey The DER-encoded public key of the key-pair signing the first delegation.\n     */\n    static fromDelegations(delegations, publicKey) {\n        return new this(delegations, publicKey);\n    }\n    toJSON() {\n        return {\n            delegations: this.delegations.map(signedDelegation => {\n                const { delegation, signature } = signedDelegation;\n                const { targets } = delegation;\n                return {\n                    delegation: Object.assign({ expiration: delegation.expiration.toString(16), pubkey: (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(delegation.pubkey) }, (targets && {\n                        targets: targets.map(t => t.toHex()),\n                    })),\n                    signature: (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(signature),\n                };\n            }),\n            publicKey: (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(this.publicKey),\n        };\n    }\n}\n/**\n * An Identity that adds delegation to a request. Everywhere in this class, the name\n * innerKey refers to the SignIdentity that is being used to sign the requests, while\n * originalKey is the identity that is being borrowed. More identities can be used\n * in the middle to delegate.\n */\nclass DelegationIdentity extends _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.SignIdentity {\n    constructor(_inner, _delegation) {\n        super();\n        this._inner = _inner;\n        this._delegation = _delegation;\n    }\n    /**\n     * Create a delegation without having access to delegateKey.\n     * @param key The key used to sign the reqyests.\n     * @param delegation A delegation object created using `createDelegation`.\n     */\n    static fromDelegation(key, delegation) {\n        return new this(key, delegation);\n    }\n    getDelegation() {\n        return this._delegation;\n    }\n    getPublicKey() {\n        return {\n            derKey: this._delegation.publicKey,\n            toDer: () => this._delegation.publicKey,\n        };\n    }\n    sign(blob) {\n        return this._inner.sign(blob);\n    }\n    async transformRequest(request) {\n        const { body } = request, fields = __rest(request, [\"body\"]);\n        const requestId = await (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.requestIdOf)(body);\n        return Object.assign(Object.assign({}, fields), { body: {\n                content: body,\n                sender_sig: await this.sign(new Uint8Array([...requestDomainSeparator, ...new Uint8Array(requestId)])),\n                sender_delegation: this._delegation.delegations,\n                sender_pubkey: this._delegation.publicKey,\n            } });\n    }\n}\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nclass PartialDelegationIdentity extends _partial__WEBPACK_IMPORTED_MODULE_3__.PartialIdentity {\n    constructor(inner, delegation) {\n        super(inner);\n        _PartialDelegationIdentity_delegation.set(this, void 0);\n        __classPrivateFieldSet(this, _PartialDelegationIdentity_delegation, delegation, \"f\");\n    }\n    /**\n     * The Delegation Chain of this identity.\n     */\n    get delegation() {\n        return __classPrivateFieldGet(this, _PartialDelegationIdentity_delegation, \"f\");\n    }\n    /**\n     * Create a {@link PartialDelegationIdentity} from a {@link PublicKey} and a {@link DelegationChain}.\n     * @param key The {@link PublicKey} to delegate to.\n     * @param delegation a {@link DelegationChain} targeting the inner key.\n     * @constructs PartialDelegationIdentity\n     */\n    static fromDelegation(key, delegation) {\n        return new PartialDelegationIdentity(key, delegation);\n    }\n}\n_PartialDelegationIdentity_delegation = new WeakMap();\n/**\n * Analyze a DelegationChain and validate that it's valid, ie. not expired and apply to the\n * scope.\n * @param chain The chain to validate.\n * @param checks Various checks to validate on the chain.\n */\nfunction isDelegationValid(chain, checks) {\n    // Verify that the no delegation is expired. If any are in the chain, returns false.\n    for (const { delegation } of chain.delegations) {\n        // prettier-ignore\n        if (+new Date(Number(delegation.expiration / BigInt(1000000))) <= +Date.now()) {\n            return false;\n        }\n    }\n    // Check the scopes.\n    const scopes = [];\n    const maybeScope = checks === null || checks === void 0 ? void 0 : checks.scope;\n    if (maybeScope) {\n        if (Array.isArray(maybeScope)) {\n            scopes.push(...maybeScope.map(s => (typeof s === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__.Principal.fromText(s) : s)));\n        }\n        else {\n            scopes.push(typeof maybeScope === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__.Principal.fromText(maybeScope) : maybeScope);\n        }\n    }\n    for (const s of scopes) {\n        const scope = s.toText();\n        for (const { delegation } of chain.delegations) {\n            if (delegation.targets === undefined) {\n                continue;\n            }\n            let none = true;\n            for (const target of delegation.targets) {\n                if (target.toText() === scope) {\n                    none = false;\n                    break;\n                }\n            }\n            if (none) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=delegation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2lkZW50aXR5L2xpYi9lc20vaWRlbnRpdHkvZGVsZWdhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQUksSUFBSSxTQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGNBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRFO0FBQzdCO0FBQ1g7QUFDUTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVEQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4Q0FBVSxxQkFBcUIsUUFBUSw4Q0FBVSxpQ0FBaUMsOENBQVUsd0NBQXdDO0FBQ25KLHFCQUFxQiw4Q0FBVSw2QkFBNkIsOENBQVU7QUFDdEUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0RBQWtELHFEQUFLLGVBQWUscUJBQXFCLDJDQUEyQztBQUNySztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwyREFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLHdCQUF3QjtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QyxvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHlEQUFTO0FBQ3hDLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRCx3QkFBd0IsVUFBVTtBQUNsQztBQUNBLGdEQUFnRCx3REFBd0QscURBQUsscUJBQXFCO0FBQ2xJO0FBQ0EscUJBQXFCO0FBQ3JCLCtCQUErQixxREFBSztBQUNwQztBQUNBLGFBQWE7QUFDYix1QkFBdUIscURBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08saUNBQWlDLHdEQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQ0FBZ0MsMkRBQVc7QUFDM0MsNkNBQTZDLGFBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHdDQUF3QyxxREFBZTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUNBQWlDLFFBQVEsaUJBQWlCLE9BQU8sc0JBQXNCO0FBQ3hHLHVCQUF1QixpQkFBaUI7QUFDeEMsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5REFBUztBQUNqRjtBQUNBO0FBQ0EseURBQXlELHlEQUFTO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvaWRlbnRpdHkvbGliL2VzbS9pZGVudGl0eS9kZWxlZ2F0aW9uLmpzP2I0YjEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xudmFyIF9QYXJ0aWFsRGVsZWdhdGlvbklkZW50aXR5X2RlbGVnYXRpb247XG5pbXBvcnQgeyBmcm9tSGV4LCByZXF1ZXN0SWRPZiwgU2lnbklkZW50aXR5LCB0b0hleCwgfSBmcm9tICdAZGZpbml0eS9hZ2VudCc7XG5pbXBvcnQgeyBQcmluY2lwYWwgfSBmcm9tICdAZGZpbml0eS9wcmluY2lwYWwnO1xuaW1wb3J0ICogYXMgY2JvciBmcm9tICdzaW1wbGUtY2Jvcic7XG5pbXBvcnQgeyBQYXJ0aWFsSWRlbnRpdHkgfSBmcm9tICcuL3BhcnRpYWwnO1xuY29uc3QgZG9tYWluU2VwYXJhdG9yID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKCdcXHgxQWljLXJlcXVlc3QtYXV0aC1kZWxlZ2F0aW9uJyk7XG5jb25zdCByZXF1ZXN0RG9tYWluU2VwYXJhdG9yID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKCdcXHgwQWljLXJlcXVlc3QnKTtcbmZ1bmN0aW9uIF9wYXJzZUJsb2IodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCB2YWx1ZS5sZW5ndGggPCA2NCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHVibGljIGtleS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21IZXgodmFsdWUpO1xufVxuLyoqXG4gKiBBIHNpbmdsZSBkZWxlZ2F0aW9uIG9iamVjdCB0aGF0IGlzIHNpZ25lZCBieSBhIHByaXZhdGUga2V5LiBUaGlzIGlzIGNvbnN0cnVjdGVkIGJ5XG4gKiBgRGVsZWdhdGlvbkNoYWluLmNyZWF0ZSgpYC5cbiAqXG4gKiB7QHNlZSBEZWxlZ2F0aW9uQ2hhaW59XG4gKi9cbmV4cG9ydCBjbGFzcyBEZWxlZ2F0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJrZXksIGV4cGlyYXRpb24sIHRhcmdldHMpIHtcbiAgICAgICAgdGhpcy5wdWJrZXkgPSBwdWJrZXk7XG4gICAgICAgIHRoaXMuZXhwaXJhdGlvbiA9IGV4cGlyYXRpb247XG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IHRhcmdldHM7XG4gICAgfVxuICAgIHRvQ0JPUigpIHtcbiAgICAgICAgLy8gRXhwaXJhdGlvbiBmaWVsZCBuZWVkcyB0byBiZSBlbmNvZGVkIGFzIGEgdTY0IHNwZWNpZmljYWxseS5cbiAgICAgICAgcmV0dXJuIGNib3IudmFsdWUubWFwKE9iamVjdC5hc3NpZ24oeyBwdWJrZXk6IGNib3IudmFsdWUuYnl0ZXModGhpcy5wdWJrZXkpLCBleHBpcmF0aW9uOiBjYm9yLnZhbHVlLnU2NCh0aGlzLmV4cGlyYXRpb24udG9TdHJpbmcoMTYpLCAxNikgfSwgKHRoaXMudGFyZ2V0cyAmJiB7XG4gICAgICAgICAgICB0YXJnZXRzOiBjYm9yLnZhbHVlLmFycmF5KHRoaXMudGFyZ2V0cy5tYXAodCA9PiBjYm9yLnZhbHVlLmJ5dGVzKHQudG9VaW50OEFycmF5KCkpKSksXG4gICAgICAgIH0pKSk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgLy8gZXZlcnkgc3RyaW5nIHNob3VsZCBiZSBoZXggYW5kIG9uY2UtZGUtaGV4ZWQsXG4gICAgICAgIC8vIGRpc2NvdmVyYWJsZSB3aGF0IGl0IGlzIChlLmcuIGRlLWhleCB0byBnZXQgSlNPTiB3aXRoIGEgJ3R5cGUnIHByb3BlcnR5LCBvciBkZS1oZXggdG8gREVSXG4gICAgICAgIC8vIHdpdGggYW4gT0lEKS4gQWZ0ZXIgZGUtaGV4LCBpZiBpdCdzIG5vdCBvYnZpb3VzIHdoYXQgaXQgaXMsIGl0J3MgYW4gQXJyYXlCdWZmZXIuXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgZXhwaXJhdGlvbjogdGhpcy5leHBpcmF0aW9uLnRvU3RyaW5nKDE2KSwgcHVia2V5OiB0b0hleCh0aGlzLnB1YmtleSkgfSwgKHRoaXMudGFyZ2V0cyAmJiB7IHRhcmdldHM6IHRoaXMudGFyZ2V0cy5tYXAocCA9PiBwLnRvSGV4KCkpIH0pKTtcbiAgICB9XG59XG4vKipcbiAqIFNpZ24gYSBzaW5nbGUgZGVsZWdhdGlvbiBvYmplY3QgZm9yIGEgcGVyaW9kIG9mIHRpbWUuXG4gKiBAcGFyYW0gZnJvbSBUaGUgaWRlbnRpdHkgdGhhdCBsZW5kcyBpdHMgZGVsZWdhdGlvbi5cbiAqIEBwYXJhbSB0byBUaGUgaWRlbnRpdHkgdGhhdCByZWNlaXZlcyB0aGUgZGVsZWdhdGlvbi5cbiAqIEBwYXJhbSBleHBpcmF0aW9uIEFuIGV4cGlyYXRpb24gZGF0ZSBmb3IgdGhpcyBkZWxlZ2F0aW9uLlxuICogQHBhcmFtIHRhcmdldHMgTGltaXQgdGhpcyBkZWxlZ2F0aW9uIHRvIHRoZSB0YXJnZXQgcHJpbmNpcGFscy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2NyZWF0ZVNpbmdsZURlbGVnYXRpb24oZnJvbSwgdG8sIGV4cGlyYXRpb24sIHRhcmdldHMpIHtcbiAgICBjb25zdCBkZWxlZ2F0aW9uID0gbmV3IERlbGVnYXRpb24odG8udG9EZXIoKSwgQmlnSW50KCtleHBpcmF0aW9uKSAqIEJpZ0ludCgxMDAwMDAwKSwgLy8gSW4gbmFub3NlY29uZHMuXG4gICAgdGFyZ2V0cyk7XG4gICAgLy8gVGhlIHNpZ25hdHVyZSBpcyBjYWxjdWxhdGVkIGJ5IHNpZ25pbmcgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlIGRvbWFpbiBzZXBhcmF0b3JcbiAgICAvLyBhbmQgdGhlIG1lc3NhZ2UuXG4gICAgLy8gTm90ZTogVG8gZW5zdXJlIFNhZmFyaSB0cmVhdHMgdGhpcyBhcyBhIHVzZXIgZ2VzdHVyZSwgZW5zdXJlIHRvIG5vdCB1c2UgYXN5bmMgbWV0aG9kc1xuICAgIC8vIGJlc2lkZXMgdGhlIGFjdHVhbHkgd2ViYXV0aG4gZnVuY3Rpb25hbGl0eSAoc3VjaCBhcyBgc2lnbmApLiBTYWZhcmkgd2lsbCBkZS1yZWdpc3RlclxuICAgIC8vIGEgdXNlciBnZXN0dXJlIGlmIHlvdSBhd2FpdCBhbiBhc3luYyBjYWxsIHRoYXRzIG5vdCBmZXRjaCwgeGhyLCBvciBzZXRUaW1lb3V0LlxuICAgIGNvbnN0IGNoYWxsZW5nZSA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgLi4uZG9tYWluU2VwYXJhdG9yLFxuICAgICAgICAuLi5uZXcgVWludDhBcnJheShyZXF1ZXN0SWRPZihkZWxlZ2F0aW9uKSksXG4gICAgXSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgZnJvbS5zaWduKGNoYWxsZW5nZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsZWdhdGlvbixcbiAgICAgICAgc2lnbmF0dXJlLFxuICAgIH07XG59XG4vKipcbiAqIEEgY2hhaW4gb2YgZGVsZWdhdGlvbnMuIFRoaXMgaXMgSlNPTiBTZXJpYWxpemFibGUuXG4gKiBUaGlzIGlzIHRoZSBvYmplY3QgdG8gc2VyaWFsaXplIGFuZCBwYXNzIHRvIGEgRGVsZWdhdGlvbklkZW50aXR5LiBJdCBkb2VzIG5vdCBrZWVwIGFueVxuICogcHJpdmF0ZSBrZXlzLlxuICovXG5leHBvcnQgY2xhc3MgRGVsZWdhdGlvbkNoYWluIHtcbiAgICBjb25zdHJ1Y3RvcihkZWxlZ2F0aW9ucywgcHVibGljS2V5KSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGlvbnMgPSBkZWxlZ2F0aW9ucztcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBwdWJsaWNLZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRlbGVnYXRpb24gY2hhaW4gYmV0d2VlbiB0d28gKG9yIG1vcmUpIGtleXMuIEJ5IGRlZmF1bHQsIHRoZSBleHBpcmF0aW9uIHRpbWVcbiAgICAgKiB3aWxsIGJlIHZlcnkgc2hvcnQgKDE1IG1pbnV0ZXMpLlxuICAgICAqXG4gICAgICogVG8gYnVpbGQgYSBjaGFpbiBvZiBtb3JlIHRoYW4gMiBpZGVudGl0aWVzLCB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyxcbiAgICAgKiBwYXNzaW5nIHRoZSBwcmV2aW91cyBkZWxlZ2F0aW9uIGNoYWluIGludG8gdGhlIG9wdGlvbnMgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdEtleSA9IGNyZWF0ZUtleSgpO1xuICAgICAqIGNvbnN0IG1pZGRsZUtleSA9IGNyZWF0ZUtleSgpO1xuICAgICAqIGNvbnN0IGJvdHRvbWVLZXkgPSBjcmVhdGVLZXkoKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IHJvb3RUb01pZGRsZSA9IGF3YWl0IERlbGVnYXRpb25DaGFpbi5jcmVhdGUoXG4gICAgICogICByb290LCBtaWRkbGUuZ2V0UHVibGljS2V5KCksIERhdGUucGFyc2UoJzIxMDAtMDEtMDEnKSxcbiAgICAgKiApO1xuICAgICAqIGNvbnN0IG1pZGRsZVRvQm90dG9tID0gYXdhaXQgRGVsZWdhdGlvbkNoYWluLmNyZWF0ZShcbiAgICAgKiAgIG1pZGRsZSwgYm90dG9tLmdldFB1YmxpY0tleSgpLCBEYXRlLnBhcnNlKCcyMTAwLTAxLTAxJyksIHsgcHJldmlvdXM6IHJvb3RUb01pZGRsZSB9LFxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiAvLyBXZSBjYW4gbm93IHVzZSBhIGRlbGVnYXRpb24gaWRlbnRpdHkgdGhhdCB1c2VzIHRoZSBkZWxlZ2F0aW9uIGFib3ZlOlxuICAgICAqIGNvbnN0IGlkZW50aXR5ID0gRGVsZWdhdGlvbklkZW50aXR5LmZyb21EZWxlZ2F0aW9uKGJvdHRvbUtleSwgbWlkZGxlVG9Cb3R0b20pO1xuICAgICAqIEBwYXJhbSBmcm9tIFRoZSBpZGVudGl0eSB0aGF0IHdpbGwgZGVsZWdhdGUuXG4gICAgICogQHBhcmFtIHRvIFRoZSBpZGVudGl0eSB0aGF0IGdldHMgZGVsZWdhdGVkLiBJdCBjYW4gbm93IHNpZ24gbWVzc2FnZXMgYXMgaWYgaXQgd2FzIHRoZVxuICAgICAqICAgICAgICAgICBpZGVudGl0eSBhYm92ZS5cbiAgICAgKiBAcGFyYW0gZXhwaXJhdGlvbiBUaGUgbGVuZ3RoIHRoZSBkZWxlZ2F0aW9uIGlzIHZhbGlkLiBCeSBkZWZhdWx0LCAxNSBtaW51dGVzIGZyb20gY2FsbGluZ1xuICAgICAqICAgICAgICAgICAgICAgICAgIHRoaXMgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBzZXQgb2Ygb3B0aW9ucyBmb3IgdGhpcyBkZWxlZ2F0aW9uLiBleHBpcmF0aW9uIGFuZCBwcmV2aW91c1xuICAgICAqIEBwYXJhbSBvcHRpb25zLnByZXZpb3VzIC0gQW5vdGhlciBEZWxlZ2F0aW9uQ2hhaW4gdGhhdCB0aGlzIGNoYWluIHNob3VsZCBzdGFydCB3aXRoLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnRhcmdldHMgLSB0YXJnZXRzIHRoYXQgc2NvcGUgdGhlIGRlbGVnYXRpb24gKGUuZy4gQ2FuaXN0ZXIgUHJpbmNpcGFscylcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgY3JlYXRlKGZyb20sIHRvLCBleHBpcmF0aW9uID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDE1ICogNjAgKiAxMDAwKSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IGRlbGVnYXRpb24gPSBhd2FpdCBfY3JlYXRlU2luZ2xlRGVsZWdhdGlvbihmcm9tLCB0bywgZXhwaXJhdGlvbiwgb3B0aW9ucy50YXJnZXRzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWxlZ2F0aW9uQ2hhaW4oWy4uLigoKF9hID0gb3B0aW9ucy5wcmV2aW91cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlbGVnYXRpb25zKSB8fCBbXSksIGRlbGVnYXRpb25dLCAoKF9iID0gb3B0aW9ucy5wcmV2aW91cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnB1YmxpY0tleSkgfHwgZnJvbS5nZXRQdWJsaWNLZXkoKS50b0RlcigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIERlbGVnYXRpb25DaGFpbiBvYmplY3QgZnJvbSBhIEpTT04gc3RyaW5nLlxuICAgICAqIEBwYXJhbSBqc29uIFRoZSBKU09OIHN0cmluZyB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oanNvbikge1xuICAgICAgICBjb25zdCB7IHB1YmxpY0tleSwgZGVsZWdhdGlvbnMgfSA9IHR5cGVvZiBqc29uID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoanNvbikgOiBqc29uO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGVsZWdhdGlvbnMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGVsZWdhdGlvbnMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkRGVsZWdhdGlvbnMgPSBkZWxlZ2F0aW9ucy5tYXAoc2lnbmVkRGVsZWdhdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGRlbGVnYXRpb24sIHNpZ25hdHVyZSB9ID0gc2lnbmVkRGVsZWdhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IHsgcHVia2V5LCBleHBpcmF0aW9uLCB0YXJnZXRzIH0gPSBkZWxlZ2F0aW9uO1xuICAgICAgICAgICAgaWYgKHRhcmdldHMgIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheSh0YXJnZXRzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0YXJnZXRzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0aW9uOiBuZXcgRGVsZWdhdGlvbihfcGFyc2VCbG9iKHB1YmtleSksIEJpZ0ludCgnMHgnICsgZXhwaXJhdGlvbiksIC8vIGV4cGlyYXRpb24gaW4gSlNPTiBpcyBhbiBoZXhhIHN0cmluZyAoU2VlIHRvSlNPTigpIGJlbG93KS5cbiAgICAgICAgICAgICAgICB0YXJnZXRzICYmXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHMubWFwKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRhcmdldC4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcmluY2lwYWwuZnJvbUhleCh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogX3BhcnNlQmxvYihzaWduYXR1cmUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhwYXJzZWREZWxlZ2F0aW9ucywgX3BhcnNlQmxvYihwdWJsaWNLZXkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIERlbGVnYXRpb25DaGFpbiBvYmplY3QgZnJvbSBhIGxpc3Qgb2YgZGVsZWdhdGlvbnMgYW5kIGEgREVSLWVuY29kZWQgcHVibGljIGtleS5cbiAgICAgKiBAcGFyYW0gZGVsZWdhdGlvbnMgVGhlIGxpc3Qgb2YgZGVsZWdhdGlvbnMuXG4gICAgICogQHBhcmFtIHB1YmxpY0tleSBUaGUgREVSLWVuY29kZWQgcHVibGljIGtleSBvZiB0aGUga2V5LXBhaXIgc2lnbmluZyB0aGUgZmlyc3QgZGVsZWdhdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbURlbGVnYXRpb25zKGRlbGVnYXRpb25zLCBwdWJsaWNLZXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKGRlbGVnYXRpb25zLCBwdWJsaWNLZXkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWxlZ2F0aW9uczogdGhpcy5kZWxlZ2F0aW9ucy5tYXAoc2lnbmVkRGVsZWdhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkZWxlZ2F0aW9uLCBzaWduYXR1cmUgfSA9IHNpZ25lZERlbGVnYXRpb247XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0YXJnZXRzIH0gPSBkZWxlZ2F0aW9uO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGVnYXRpb246IE9iamVjdC5hc3NpZ24oeyBleHBpcmF0aW9uOiBkZWxlZ2F0aW9uLmV4cGlyYXRpb24udG9TdHJpbmcoMTYpLCBwdWJrZXk6IHRvSGV4KGRlbGVnYXRpb24ucHVia2V5KSB9LCAodGFyZ2V0cyAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiB0YXJnZXRzLm1hcCh0ID0+IHQudG9IZXgoKSksXG4gICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiB0b0hleChzaWduYXR1cmUpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHB1YmxpY0tleTogdG9IZXgodGhpcy5wdWJsaWNLZXkpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogQW4gSWRlbnRpdHkgdGhhdCBhZGRzIGRlbGVnYXRpb24gdG8gYSByZXF1ZXN0LiBFdmVyeXdoZXJlIGluIHRoaXMgY2xhc3MsIHRoZSBuYW1lXG4gKiBpbm5lcktleSByZWZlcnMgdG8gdGhlIFNpZ25JZGVudGl0eSB0aGF0IGlzIGJlaW5nIHVzZWQgdG8gc2lnbiB0aGUgcmVxdWVzdHMsIHdoaWxlXG4gKiBvcmlnaW5hbEtleSBpcyB0aGUgaWRlbnRpdHkgdGhhdCBpcyBiZWluZyBib3Jyb3dlZC4gTW9yZSBpZGVudGl0aWVzIGNhbiBiZSB1c2VkXG4gKiBpbiB0aGUgbWlkZGxlIHRvIGRlbGVnYXRlLlxuICovXG5leHBvcnQgY2xhc3MgRGVsZWdhdGlvbklkZW50aXR5IGV4dGVuZHMgU2lnbklkZW50aXR5IHtcbiAgICBjb25zdHJ1Y3RvcihfaW5uZXIsIF9kZWxlZ2F0aW9uKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2lubmVyID0gX2lubmVyO1xuICAgICAgICB0aGlzLl9kZWxlZ2F0aW9uID0gX2RlbGVnYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRlbGVnYXRpb24gd2l0aG91dCBoYXZpbmcgYWNjZXNzIHRvIGRlbGVnYXRlS2V5LlxuICAgICAqIEBwYXJhbSBrZXkgVGhlIGtleSB1c2VkIHRvIHNpZ24gdGhlIHJlcXllc3RzLlxuICAgICAqIEBwYXJhbSBkZWxlZ2F0aW9uIEEgZGVsZWdhdGlvbiBvYmplY3QgY3JlYXRlZCB1c2luZyBgY3JlYXRlRGVsZWdhdGlvbmAuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21EZWxlZ2F0aW9uKGtleSwgZGVsZWdhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoa2V5LCBkZWxlZ2F0aW9uKTtcbiAgICB9XG4gICAgZ2V0RGVsZWdhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRpb247XG4gICAgfVxuICAgIGdldFB1YmxpY0tleSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlcktleTogdGhpcy5fZGVsZWdhdGlvbi5wdWJsaWNLZXksXG4gICAgICAgICAgICB0b0RlcjogKCkgPT4gdGhpcy5fZGVsZWdhdGlvbi5wdWJsaWNLZXksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNpZ24oYmxvYikge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXIuc2lnbihibG9iKTtcbiAgICB9XG4gICAgYXN5bmMgdHJhbnNmb3JtUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IHsgYm9keSB9ID0gcmVxdWVzdCwgZmllbGRzID0gX19yZXN0KHJlcXVlc3QsIFtcImJvZHlcIl0pO1xuICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSBhd2FpdCByZXF1ZXN0SWRPZihib2R5KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZmllbGRzKSwgeyBib2R5OiB7XG4gICAgICAgICAgICAgICAgY29udGVudDogYm9keSxcbiAgICAgICAgICAgICAgICBzZW5kZXJfc2lnOiBhd2FpdCB0aGlzLnNpZ24obmV3IFVpbnQ4QXJyYXkoWy4uLnJlcXVlc3REb21haW5TZXBhcmF0b3IsIC4uLm5ldyBVaW50OEFycmF5KHJlcXVlc3RJZCldKSksXG4gICAgICAgICAgICAgICAgc2VuZGVyX2RlbGVnYXRpb246IHRoaXMuX2RlbGVnYXRpb24uZGVsZWdhdGlvbnMsXG4gICAgICAgICAgICAgICAgc2VuZGVyX3B1YmtleTogdGhpcy5fZGVsZWdhdGlvbi5wdWJsaWNLZXksXG4gICAgICAgICAgICB9IH0pO1xuICAgIH1cbn1cbi8qKlxuICogQSBwYXJ0aWFsIGRlbGVnYXRlZCBpZGVudGl0eSwgcmVwcmVzZW50aW5nIGEgZGVsZWdhdGlvbiBjaGFpbiBhbmQgdGhlIHB1YmxpYyBrZXkgdGhhdCBpdCB0YXJnZXRzXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJ0aWFsRGVsZWdhdGlvbklkZW50aXR5IGV4dGVuZHMgUGFydGlhbElkZW50aXR5IHtcbiAgICBjb25zdHJ1Y3Rvcihpbm5lciwgZGVsZWdhdGlvbikge1xuICAgICAgICBzdXBlcihpbm5lcik7XG4gICAgICAgIF9QYXJ0aWFsRGVsZWdhdGlvbklkZW50aXR5X2RlbGVnYXRpb24uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1BhcnRpYWxEZWxlZ2F0aW9uSWRlbnRpdHlfZGVsZWdhdGlvbiwgZGVsZWdhdGlvbiwgXCJmXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgRGVsZWdhdGlvbiBDaGFpbiBvZiB0aGlzIGlkZW50aXR5LlxuICAgICAqL1xuICAgIGdldCBkZWxlZ2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUGFydGlhbERlbGVnYXRpb25JZGVudGl0eV9kZWxlZ2F0aW9uLCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHtAbGluayBQYXJ0aWFsRGVsZWdhdGlvbklkZW50aXR5fSBmcm9tIGEge0BsaW5rIFB1YmxpY0tleX0gYW5kIGEge0BsaW5rIERlbGVnYXRpb25DaGFpbn0uXG4gICAgICogQHBhcmFtIGtleSBUaGUge0BsaW5rIFB1YmxpY0tleX0gdG8gZGVsZWdhdGUgdG8uXG4gICAgICogQHBhcmFtIGRlbGVnYXRpb24gYSB7QGxpbmsgRGVsZWdhdGlvbkNoYWlufSB0YXJnZXRpbmcgdGhlIGlubmVyIGtleS5cbiAgICAgKiBAY29uc3RydWN0cyBQYXJ0aWFsRGVsZWdhdGlvbklkZW50aXR5XG4gICAgICovXG4gICAgc3RhdGljIGZyb21EZWxlZ2F0aW9uKGtleSwgZGVsZWdhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFBhcnRpYWxEZWxlZ2F0aW9uSWRlbnRpdHkoa2V5LCBkZWxlZ2F0aW9uKTtcbiAgICB9XG59XG5fUGFydGlhbERlbGVnYXRpb25JZGVudGl0eV9kZWxlZ2F0aW9uID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogQW5hbHl6ZSBhIERlbGVnYXRpb25DaGFpbiBhbmQgdmFsaWRhdGUgdGhhdCBpdCdzIHZhbGlkLCBpZS4gbm90IGV4cGlyZWQgYW5kIGFwcGx5IHRvIHRoZVxuICogc2NvcGUuXG4gKiBAcGFyYW0gY2hhaW4gVGhlIGNoYWluIHRvIHZhbGlkYXRlLlxuICogQHBhcmFtIGNoZWNrcyBWYXJpb3VzIGNoZWNrcyB0byB2YWxpZGF0ZSBvbiB0aGUgY2hhaW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlbGVnYXRpb25WYWxpZChjaGFpbiwgY2hlY2tzKSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIG5vIGRlbGVnYXRpb24gaXMgZXhwaXJlZC4gSWYgYW55IGFyZSBpbiB0aGUgY2hhaW4sIHJldHVybnMgZmFsc2UuXG4gICAgZm9yIChjb25zdCB7IGRlbGVnYXRpb24gfSBvZiBjaGFpbi5kZWxlZ2F0aW9ucykge1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgaWYgKCtuZXcgRGF0ZShOdW1iZXIoZGVsZWdhdGlvbi5leHBpcmF0aW9uIC8gQmlnSW50KDEwMDAwMDApKSkgPD0gK0RhdGUubm93KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDaGVjayB0aGUgc2NvcGVzLlxuICAgIGNvbnN0IHNjb3BlcyA9IFtdO1xuICAgIGNvbnN0IG1heWJlU2NvcGUgPSBjaGVja3MgPT09IG51bGwgfHwgY2hlY2tzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjaGVja3Muc2NvcGU7XG4gICAgaWYgKG1heWJlU2NvcGUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWF5YmVTY29wZSkpIHtcbiAgICAgICAgICAgIHNjb3Blcy5wdXNoKC4uLm1heWJlU2NvcGUubWFwKHMgPT4gKHR5cGVvZiBzID09PSAnc3RyaW5nJyA/IFByaW5jaXBhbC5mcm9tVGV4dChzKSA6IHMpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzY29wZXMucHVzaCh0eXBlb2YgbWF5YmVTY29wZSA9PT0gJ3N0cmluZycgPyBQcmluY2lwYWwuZnJvbVRleHQobWF5YmVTY29wZSkgOiBtYXliZVNjb3BlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHMgb2Ygc2NvcGVzKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gcy50b1RleHQoKTtcbiAgICAgICAgZm9yIChjb25zdCB7IGRlbGVnYXRpb24gfSBvZiBjaGFpbi5kZWxlZ2F0aW9ucykge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRpb24udGFyZ2V0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbm9uZSA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhcmdldCBvZiBkZWxlZ2F0aW9uLnRhcmdldHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LnRvVGV4dCgpID09PSBzY29wZSkge1xuICAgICAgICAgICAgICAgICAgICBub25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsZWdhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/delegation.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/ecdsa.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/identity/lib/esm/identity/ecdsa.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CryptoError: () => (/* binding */ CryptoError),\n/* harmony export */   ECDSAKeyIdentity: () => (/* binding */ ECDSAKeyIdentity),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js\");\n\nclass CryptoError extends Error {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        Object.setPrototypeOf(this, CryptoError.prototype);\n    }\n}\n/**\n * Utility method to ensure that a subtleCrypto implementation is provided or is available in the global context\n * @param subtleCrypto SubtleCrypto implementation\n * @returns subleCrypto\n */\nfunction _getEffectiveCrypto(subtleCrypto) {\n    if (typeof global !== 'undefined' && global['crypto'] && global['crypto']['subtle']) {\n        return global['crypto']['subtle'];\n    }\n    if (subtleCrypto) {\n        return subtleCrypto;\n    }\n    else if (typeof crypto !== 'undefined' && crypto['subtle']) {\n        return crypto.subtle;\n    }\n    else {\n        throw new CryptoError('Global crypto was not available and none was provided. Please inlcude a SubtleCrypto implementation. See https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto');\n    }\n}\n/**\n * An identity interface that wraps an ECDSA keypair using the P-256 named curve. Supports DER-encoding and decoding for agent calls\n */\nclass ECDSAKeyIdentity extends _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.SignIdentity {\n    // `fromKeyPair` and `generate` should be used for instantiation, not this constructor.\n    constructor(keyPair, derKey, subtleCrypto) {\n        super();\n        this._keyPair = keyPair;\n        this._derKey = derKey;\n        this._subtleCrypto = subtleCrypto;\n    }\n    /**\n     * Generates a randomly generated identity for use in calls to the Internet Computer.\n     * @param {CryptoKeyOptions} options optional settings\n     * @param {CryptoKeyOptions['extractable']} options.extractable - whether the key should allow itself to be used. Set to false for maximum security.\n     * @param {CryptoKeyOptions['keyUsages']} options.keyUsages - a list of key usages that the key can be used for\n     * @param {CryptoKeyOptions['subtleCrypto']} options.subtleCrypto interface\n     * @constructs ECDSAKeyIdentity\n     * @returns a {@link ECDSAKeyIdentity}\n     */\n    static async generate(options) {\n        const { extractable = false, keyUsages = ['sign', 'verify'], subtleCrypto } = options !== null && options !== void 0 ? options : {};\n        const effectiveCrypto = _getEffectiveCrypto(subtleCrypto);\n        const keyPair = await effectiveCrypto.generateKey({\n            name: 'ECDSA',\n            namedCurve: 'P-256',\n        }, extractable, keyUsages);\n        const derKey = (await effectiveCrypto.exportKey('spki', keyPair.publicKey));\n        return new this(keyPair, derKey, effectiveCrypto);\n    }\n    /**\n     * generates an identity from a public and private key. Please ensure that you are generating these keys securely and protect the user's private key\n     * @param keyPair a CryptoKeyPair\n     * @param subtleCrypto - a SubtleCrypto interface in case one is not available globally\n     * @returns an {@link ECDSAKeyIdentity}\n     */\n    static async fromKeyPair(keyPair, subtleCrypto) {\n        const effectiveCrypto = _getEffectiveCrypto(subtleCrypto);\n        const derKey = (await effectiveCrypto.exportKey('spki', keyPair.publicKey));\n        return new ECDSAKeyIdentity(keyPair, derKey, effectiveCrypto);\n    }\n    /**\n     * Return the internally-used key pair.\n     * @returns a CryptoKeyPair\n     */\n    getKeyPair() {\n        return this._keyPair;\n    }\n    /**\n     * Return the public key.\n     * @returns an {@link PublicKey & DerCryptoKey}\n     */\n    getPublicKey() {\n        const derKey = this._derKey;\n        const key = Object.create(this._keyPair.publicKey);\n        key.toDer = function () {\n            return derKey;\n        };\n        return key;\n    }\n    /**\n     * Signs a blob of data, with this identity's private key.\n     * @param {ArrayBuffer} challenge - challenge to sign with this identity's secretKey, producing a signature\n     * @returns {Promise<Signature>} signature\n     */\n    async sign(challenge) {\n        const params = {\n            name: 'ECDSA',\n            hash: { name: 'SHA-256' },\n        };\n        const signature = await this._subtleCrypto.sign(params, this._keyPair.privateKey, challenge);\n        return signature;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ECDSAKeyIdentity);\n//# sourceMappingURL=ecdsa.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2lkZW50aXR5L2xpYi9lc20vaWRlbnRpdHkvZWNkc2EuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4QztBQUN2QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLHdEQUFZO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDLGVBQWUsaUNBQWlDO0FBQ2hELGVBQWUsK0JBQStCO0FBQzlDLGVBQWUsa0NBQWtDO0FBQ2pEO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSxnQkFBZ0Isb0VBQW9FO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxnQkFBZ0IsRUFBQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2lkZW50aXR5L2xpYi9lc20vaWRlbnRpdHkvZWNkc2EuanM/YzE1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduSWRlbnRpdHkgfSBmcm9tICdAZGZpbml0eS9hZ2VudCc7XG5leHBvcnQgY2xhc3MgQ3J5cHRvRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENyeXB0b0Vycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuLyoqXG4gKiBVdGlsaXR5IG1ldGhvZCB0byBlbnN1cmUgdGhhdCBhIHN1YnRsZUNyeXB0byBpbXBsZW1lbnRhdGlvbiBpcyBwcm92aWRlZCBvciBpcyBhdmFpbGFibGUgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG4gKiBAcGFyYW0gc3VidGxlQ3J5cHRvIFN1YnRsZUNyeXB0byBpbXBsZW1lbnRhdGlvblxuICogQHJldHVybnMgc3VibGVDcnlwdG9cbiAqL1xuZnVuY3Rpb24gX2dldEVmZmVjdGl2ZUNyeXB0byhzdWJ0bGVDcnlwdG8pIHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsWydjcnlwdG8nXSAmJiBnbG9iYWxbJ2NyeXB0byddWydzdWJ0bGUnXSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsWydjcnlwdG8nXVsnc3VidGxlJ107XG4gICAgfVxuICAgIGlmIChzdWJ0bGVDcnlwdG8pIHtcbiAgICAgICAgcmV0dXJuIHN1YnRsZUNyeXB0bztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvWydzdWJ0bGUnXSkge1xuICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBDcnlwdG9FcnJvcignR2xvYmFsIGNyeXB0byB3YXMgbm90IGF2YWlsYWJsZSBhbmQgbm9uZSB3YXMgcHJvdmlkZWQuIFBsZWFzZSBpbmxjdWRlIGEgU3VidGxlQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1N1YnRsZUNyeXB0bycpO1xuICAgIH1cbn1cbi8qKlxuICogQW4gaWRlbnRpdHkgaW50ZXJmYWNlIHRoYXQgd3JhcHMgYW4gRUNEU0Ega2V5cGFpciB1c2luZyB0aGUgUC0yNTYgbmFtZWQgY3VydmUuIFN1cHBvcnRzIERFUi1lbmNvZGluZyBhbmQgZGVjb2RpbmcgZm9yIGFnZW50IGNhbGxzXG4gKi9cbmV4cG9ydCBjbGFzcyBFQ0RTQUtleUlkZW50aXR5IGV4dGVuZHMgU2lnbklkZW50aXR5IHtcbiAgICAvLyBgZnJvbUtleVBhaXJgIGFuZCBgZ2VuZXJhdGVgIHNob3VsZCBiZSB1c2VkIGZvciBpbnN0YW50aWF0aW9uLCBub3QgdGhpcyBjb25zdHJ1Y3Rvci5cbiAgICBjb25zdHJ1Y3RvcihrZXlQYWlyLCBkZXJLZXksIHN1YnRsZUNyeXB0bykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9rZXlQYWlyID0ga2V5UGFpcjtcbiAgICAgICAgdGhpcy5fZGVyS2V5ID0gZGVyS2V5O1xuICAgICAgICB0aGlzLl9zdWJ0bGVDcnlwdG8gPSBzdWJ0bGVDcnlwdG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHJhbmRvbWx5IGdlbmVyYXRlZCBpZGVudGl0eSBmb3IgdXNlIGluIGNhbGxzIHRvIHRoZSBJbnRlcm5ldCBDb21wdXRlci5cbiAgICAgKiBAcGFyYW0ge0NyeXB0b0tleU9wdGlvbnN9IG9wdGlvbnMgb3B0aW9uYWwgc2V0dGluZ3NcbiAgICAgKiBAcGFyYW0ge0NyeXB0b0tleU9wdGlvbnNbJ2V4dHJhY3RhYmxlJ119IG9wdGlvbnMuZXh0cmFjdGFibGUgLSB3aGV0aGVyIHRoZSBrZXkgc2hvdWxkIGFsbG93IGl0c2VsZiB0byBiZSB1c2VkLiBTZXQgdG8gZmFsc2UgZm9yIG1heGltdW0gc2VjdXJpdHkuXG4gICAgICogQHBhcmFtIHtDcnlwdG9LZXlPcHRpb25zWydrZXlVc2FnZXMnXX0gb3B0aW9ucy5rZXlVc2FnZXMgLSBhIGxpc3Qgb2Yga2V5IHVzYWdlcyB0aGF0IHRoZSBrZXkgY2FuIGJlIHVzZWQgZm9yXG4gICAgICogQHBhcmFtIHtDcnlwdG9LZXlPcHRpb25zWydzdWJ0bGVDcnlwdG8nXX0gb3B0aW9ucy5zdWJ0bGVDcnlwdG8gaW50ZXJmYWNlXG4gICAgICogQGNvbnN0cnVjdHMgRUNEU0FLZXlJZGVudGl0eVxuICAgICAqIEByZXR1cm5zIGEge0BsaW5rIEVDRFNBS2V5SWRlbnRpdHl9XG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGdlbmVyYXRlKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBleHRyYWN0YWJsZSA9IGZhbHNlLCBrZXlVc2FnZXMgPSBbJ3NpZ24nLCAndmVyaWZ5J10sIHN1YnRsZUNyeXB0byB9ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgICAgIGNvbnN0IGVmZmVjdGl2ZUNyeXB0byA9IF9nZXRFZmZlY3RpdmVDcnlwdG8oc3VidGxlQ3J5cHRvKTtcbiAgICAgICAgY29uc3Qga2V5UGFpciA9IGF3YWl0IGVmZmVjdGl2ZUNyeXB0by5nZW5lcmF0ZUtleSh7XG4gICAgICAgICAgICBuYW1lOiAnRUNEU0EnLFxuICAgICAgICAgICAgbmFtZWRDdXJ2ZTogJ1AtMjU2JyxcbiAgICAgICAgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XG4gICAgICAgIGNvbnN0IGRlcktleSA9IChhd2FpdCBlZmZlY3RpdmVDcnlwdG8uZXhwb3J0S2V5KCdzcGtpJywga2V5UGFpci5wdWJsaWNLZXkpKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKGtleVBhaXIsIGRlcktleSwgZWZmZWN0aXZlQ3J5cHRvKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2VuZXJhdGVzIGFuIGlkZW50aXR5IGZyb20gYSBwdWJsaWMgYW5kIHByaXZhdGUga2V5LiBQbGVhc2UgZW5zdXJlIHRoYXQgeW91IGFyZSBnZW5lcmF0aW5nIHRoZXNlIGtleXMgc2VjdXJlbHkgYW5kIHByb3RlY3QgdGhlIHVzZXIncyBwcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSBrZXlQYWlyIGEgQ3J5cHRvS2V5UGFpclxuICAgICAqIEBwYXJhbSBzdWJ0bGVDcnlwdG8gLSBhIFN1YnRsZUNyeXB0byBpbnRlcmZhY2UgaW4gY2FzZSBvbmUgaXMgbm90IGF2YWlsYWJsZSBnbG9iYWxseVxuICAgICAqIEByZXR1cm5zIGFuIHtAbGluayBFQ0RTQUtleUlkZW50aXR5fVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tS2V5UGFpcihrZXlQYWlyLCBzdWJ0bGVDcnlwdG8pIHtcbiAgICAgICAgY29uc3QgZWZmZWN0aXZlQ3J5cHRvID0gX2dldEVmZmVjdGl2ZUNyeXB0byhzdWJ0bGVDcnlwdG8pO1xuICAgICAgICBjb25zdCBkZXJLZXkgPSAoYXdhaXQgZWZmZWN0aXZlQ3J5cHRvLmV4cG9ydEtleSgnc3BraScsIGtleVBhaXIucHVibGljS2V5KSk7XG4gICAgICAgIHJldHVybiBuZXcgRUNEU0FLZXlJZGVudGl0eShrZXlQYWlyLCBkZXJLZXksIGVmZmVjdGl2ZUNyeXB0byk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgaW50ZXJuYWxseS11c2VkIGtleSBwYWlyLlxuICAgICAqIEByZXR1cm5zIGEgQ3J5cHRvS2V5UGFpclxuICAgICAqL1xuICAgIGdldEtleVBhaXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlQYWlyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHB1YmxpYyBrZXkuXG4gICAgICogQHJldHVybnMgYW4ge0BsaW5rIFB1YmxpY0tleSAmIERlckNyeXB0b0tleX1cbiAgICAgKi9cbiAgICBnZXRQdWJsaWNLZXkoKSB7XG4gICAgICAgIGNvbnN0IGRlcktleSA9IHRoaXMuX2RlcktleTtcbiAgICAgICAgY29uc3Qga2V5ID0gT2JqZWN0LmNyZWF0ZSh0aGlzLl9rZXlQYWlyLnB1YmxpY0tleSk7XG4gICAgICAgIGtleS50b0RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXJLZXk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIGEgYmxvYiBvZiBkYXRhLCB3aXRoIHRoaXMgaWRlbnRpdHkncyBwcml2YXRlIGtleS5cbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBjaGFsbGVuZ2UgLSBjaGFsbGVuZ2UgdG8gc2lnbiB3aXRoIHRoaXMgaWRlbnRpdHkncyBzZWNyZXRLZXksIHByb2R1Y2luZyBhIHNpZ25hdHVyZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFNpZ25hdHVyZT59IHNpZ25hdHVyZVxuICAgICAqL1xuICAgIGFzeW5jIHNpZ24oY2hhbGxlbmdlKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdFQ0RTQScsXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLl9zdWJ0bGVDcnlwdG8uc2lnbihwYXJhbXMsIHRoaXMuX2tleVBhaXIucHJpdmF0ZUtleSwgY2hhbGxlbmdlKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBFQ0RTQUtleUlkZW50aXR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWNkc2EuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/ecdsa.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/ed25519.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/identity/lib/esm/identity/ed25519.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519KeyIdentity: () => (/* binding */ Ed25519KeyIdentity),\n/* harmony export */   Ed25519PublicKey: () => (/* binding */ Ed25519PublicKey)\n/* harmony export */ });\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/../../../../../node_modules/@noble/curves/esm/ed25519.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Ed25519PublicKey_rawKey, _Ed25519PublicKey_derKey, _Ed25519KeyIdentity_publicKey, _Ed25519KeyIdentity_privateKey;\n\n\n\nfunction isObject(value) {\n    return value !== null && typeof value === 'object';\n}\nclass Ed25519PublicKey {\n    // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n    constructor(key) {\n        _Ed25519PublicKey_rawKey.set(this, void 0);\n        _Ed25519PublicKey_derKey.set(this, void 0);\n        if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n            throw new Error('An Ed25519 public key must be exactly 32bytes long');\n        }\n        __classPrivateFieldSet(this, _Ed25519PublicKey_rawKey, key, \"f\");\n        __classPrivateFieldSet(this, _Ed25519PublicKey_derKey, Ed25519PublicKey.derEncode(key), \"f\");\n    }\n    /**\n     * Construct Ed25519PublicKey from an existing PublicKey\n     * @param {unknown} maybeKey - existing PublicKey, ArrayBuffer, DerEncodedPublicKey, or hex string\n     * @returns {Ed25519PublicKey} Instance of Ed25519PublicKey\n     */\n    static from(maybeKey) {\n        if (typeof maybeKey === 'string') {\n            const key = (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.fromHex)(maybeKey);\n            return this.fromRaw(key);\n        }\n        else if (isObject(maybeKey)) {\n            const key = maybeKey;\n            if (isObject(key) && Object.hasOwnProperty.call(key, '__derEncodedPublicKey__')) {\n                return this.fromDer(key);\n            }\n            else if (ArrayBuffer.isView(key)) {\n                const view = key;\n                return this.fromRaw((0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.bufFromBufLike)(view.buffer));\n            }\n            else if (key instanceof ArrayBuffer) {\n                return this.fromRaw(key);\n            }\n            else if ('rawKey' in key) {\n                return this.fromRaw(key.rawKey);\n            }\n            else if ('derKey' in key) {\n                return this.fromDer(key.derKey);\n            }\n            else if ('toDer' in key) {\n                return this.fromDer(key.toDer());\n            }\n        }\n        throw new Error('Cannot construct Ed25519PublicKey from the provided key.');\n    }\n    static fromRaw(rawKey) {\n        return new Ed25519PublicKey(rawKey);\n    }\n    static fromDer(derKey) {\n        return new Ed25519PublicKey(this.derDecode(derKey));\n    }\n    static derEncode(publicKey) {\n        const key = (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.wrapDER)(publicKey, _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.ED25519_OID).buffer;\n        key.__derEncodedPublicKey__ = undefined;\n        return key;\n    }\n    static derDecode(key) {\n        const unwrapped = (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.unwrapDER)(key, _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.ED25519_OID);\n        if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n            throw new Error('An Ed25519 public key must be exactly 32bytes long');\n        }\n        return unwrapped;\n    }\n    get rawKey() {\n        return __classPrivateFieldGet(this, _Ed25519PublicKey_rawKey, \"f\");\n    }\n    get derKey() {\n        return __classPrivateFieldGet(this, _Ed25519PublicKey_derKey, \"f\");\n    }\n    toDer() {\n        return this.derKey;\n    }\n    toRaw() {\n        return this.rawKey;\n    }\n}\n_Ed25519PublicKey_rawKey = new WeakMap(), _Ed25519PublicKey_derKey = new WeakMap();\n// The length of Ed25519 public keys is always 32 bytes.\nEd25519PublicKey.RAW_KEY_LENGTH = 32;\n/**\n * Ed25519KeyIdentity is an implementation of SignIdentity that uses Ed25519 keys. This class is used to sign and verify messages for an agent.\n */\nclass Ed25519KeyIdentity extends _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.SignIdentity {\n    // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n    constructor(publicKey, privateKey) {\n        super();\n        _Ed25519KeyIdentity_publicKey.set(this, void 0);\n        _Ed25519KeyIdentity_privateKey.set(this, void 0);\n        __classPrivateFieldSet(this, _Ed25519KeyIdentity_publicKey, Ed25519PublicKey.from(publicKey), \"f\");\n        __classPrivateFieldSet(this, _Ed25519KeyIdentity_privateKey, new Uint8Array(privateKey), \"f\");\n    }\n    /**\n     * Generate a new Ed25519KeyIdentity.\n     * @param seed a 32-byte seed for the private key. If not provided, a random seed will be generated.\n     * @returns Ed25519KeyIdentity\n     */\n    static generate(seed) {\n        if (seed && seed.length !== 32) {\n            throw new Error('Ed25519 Seed needs to be 32 bytes long.');\n        }\n        if (!seed)\n            seed = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_1__.ed25519.utils.randomPrivateKey();\n        // Check if the seed is all zeros\n        if ((0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.bufEquals)(seed, new Uint8Array(new Array(32).fill(0)))) {\n            console.warn('Seed is all zeros. This is not a secure seed. Please provide a seed with sufficient entropy if this is a production environment.');\n        }\n        const sk = new Uint8Array(32);\n        for (let i = 0; i < 32; i++)\n            sk[i] = new Uint8Array(seed)[i];\n        const pk = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_1__.ed25519.getPublicKey(sk);\n        return Ed25519KeyIdentity.fromKeyPair(pk, sk);\n    }\n    static fromParsedJson(obj) {\n        const [publicKeyDer, privateKeyRaw] = obj;\n        return new Ed25519KeyIdentity(Ed25519PublicKey.fromDer((0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.fromHex)(publicKeyDer)), (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.fromHex)(privateKeyRaw));\n    }\n    static fromJSON(json) {\n        const parsed = JSON.parse(json);\n        if (Array.isArray(parsed)) {\n            if (typeof parsed[0] === 'string' && typeof parsed[1] === 'string') {\n                return this.fromParsedJson([parsed[0], parsed[1]]);\n            }\n            else {\n                throw new Error('Deserialization error: JSON must have at least 2 items.');\n            }\n        }\n        throw new Error(`Deserialization error: Invalid JSON type for string: ${JSON.stringify(json)}`);\n    }\n    static fromKeyPair(publicKey, privateKey) {\n        return new Ed25519KeyIdentity(Ed25519PublicKey.fromRaw(publicKey), privateKey);\n    }\n    static fromSecretKey(secretKey) {\n        const publicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_1__.ed25519.getPublicKey(new Uint8Array(secretKey));\n        return Ed25519KeyIdentity.fromKeyPair(publicKey, secretKey);\n    }\n    /**\n     * Serialize this key to JSON.\n     */\n    toJSON() {\n        return [(0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(__classPrivateFieldGet(this, _Ed25519KeyIdentity_publicKey, \"f\").toDer()), (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(__classPrivateFieldGet(this, _Ed25519KeyIdentity_privateKey, \"f\"))];\n    }\n    /**\n     * Return a copy of the key pair.\n     */\n    getKeyPair() {\n        return {\n            secretKey: __classPrivateFieldGet(this, _Ed25519KeyIdentity_privateKey, \"f\"),\n            publicKey: __classPrivateFieldGet(this, _Ed25519KeyIdentity_publicKey, \"f\"),\n        };\n    }\n    /**\n     * Return the public key.\n     */\n    getPublicKey() {\n        return __classPrivateFieldGet(this, _Ed25519KeyIdentity_publicKey, \"f\");\n    }\n    /**\n     * Signs a blob of data, with this identity's private key.\n     * @param challenge - challenge to sign with this identity's secretKey, producing a signature\n     */\n    async sign(challenge) {\n        const blob = new Uint8Array(challenge);\n        // Some implementations of Ed25519 private keys append a public key to the end of the private key. We only want the private key.\n        const signature = (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.uint8ToBuf)(_noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_1__.ed25519.sign(blob, __classPrivateFieldGet(this, _Ed25519KeyIdentity_privateKey, \"f\").slice(0, 32)));\n        // add { __signature__: void; } to the signature to make it compatible with the agent\n        Object.defineProperty(signature, '__signature__', {\n            enumerable: false,\n            value: undefined,\n        });\n        return signature;\n    }\n    /**\n     * Verify\n     * @param sig - signature to verify\n     * @param msg - message to verify\n     * @param pk - public key\n     * @returns - true if the signature is valid, false otherwise\n     */\n    static verify(sig, msg, pk) {\n        const [signature, message, publicKey] = [sig, msg, pk].map(x => {\n            if (typeof x === 'string') {\n                x = (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.fromHex)(x);\n            }\n            if (x instanceof Uint8Array) {\n                x = x.buffer;\n            }\n            return new Uint8Array(x);\n        });\n        return _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_1__.ed25519.verify(message, signature, publicKey);\n    }\n}\n_Ed25519KeyIdentity_publicKey = new WeakMap(), _Ed25519KeyIdentity_privateKey = new WeakMap();\n//# sourceMappingURL=ed25519.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/ed25519.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/partial.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/identity/lib/esm/identity/partial.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PartialIdentity: () => (/* binding */ PartialIdentity)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PartialIdentity_inner;\n\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nclass PartialIdentity {\n    constructor(inner) {\n        _PartialIdentity_inner.set(this, void 0);\n        __classPrivateFieldSet(this, _PartialIdentity_inner, inner, \"f\");\n    }\n    /**\n     * The raw public key of this identity.\n     */\n    get rawKey() {\n        return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").rawKey;\n    }\n    /**\n     * The DER-encoded public key of this identity.\n     */\n    get derKey() {\n        return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").derKey;\n    }\n    /**\n     * The DER-encoded public key of this identity.\n     */\n    toDer() {\n        return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").toDer();\n    }\n    /**\n     * The inner {@link PublicKey} used by this identity.\n     */\n    getPublicKey() {\n        return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\");\n    }\n    /**\n     * The {@link Principal} of this identity.\n     */\n    getPrincipal() {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(__classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").rawKey);\n    }\n    /**\n     * Required for the Identity interface, but cannot implemented for just a public key.\n     */\n    transformRequest() {\n        return Promise.reject('Not implemented. You are attempting to use a partial identity to sign calls, but this identity only has access to the public key.To sign calls, use a DelegationIdentity instead.');\n    }\n}\n_PartialIdentity_inner = new WeakMap();\n//# sourceMappingURL=partial.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2lkZW50aXR5L2xpYi9lc20vaWRlbnRpdHkvcGFydGlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTtBQUNBLGVBQWUseURBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9pZGVudGl0eS9saWIvZXNtL2lkZW50aXR5L3BhcnRpYWwuanM/YTcxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1BhcnRpYWxJZGVudGl0eV9pbm5lcjtcbmltcG9ydCB7IFByaW5jaXBhbCB9IGZyb20gJ0BkZmluaXR5L3ByaW5jaXBhbCc7XG4vKipcbiAqIEEgcGFydGlhbCBkZWxlZ2F0ZWQgaWRlbnRpdHksIHJlcHJlc2VudGluZyBhIGRlbGVnYXRpb24gY2hhaW4gYW5kIHRoZSBwdWJsaWMga2V5IHRoYXQgaXQgdGFyZ2V0c1xuICovXG5leHBvcnQgY2xhc3MgUGFydGlhbElkZW50aXR5IHtcbiAgICBjb25zdHJ1Y3Rvcihpbm5lcikge1xuICAgICAgICBfUGFydGlhbElkZW50aXR5X2lubmVyLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9QYXJ0aWFsSWRlbnRpdHlfaW5uZXIsIGlubmVyLCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSByYXcgcHVibGljIGtleSBvZiB0aGlzIGlkZW50aXR5LlxuICAgICAqL1xuICAgIGdldCByYXdLZXkoKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9QYXJ0aWFsSWRlbnRpdHlfaW5uZXIsIFwiZlwiKS5yYXdLZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBERVItZW5jb2RlZCBwdWJsaWMga2V5IG9mIHRoaXMgaWRlbnRpdHkuXG4gICAgICovXG4gICAgZ2V0IGRlcktleSgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1BhcnRpYWxJZGVudGl0eV9pbm5lciwgXCJmXCIpLmRlcktleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIERFUi1lbmNvZGVkIHB1YmxpYyBrZXkgb2YgdGhpcyBpZGVudGl0eS5cbiAgICAgKi9cbiAgICB0b0RlcigpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1BhcnRpYWxJZGVudGl0eV9pbm5lciwgXCJmXCIpLnRvRGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBpbm5lciB7QGxpbmsgUHVibGljS2V5fSB1c2VkIGJ5IHRoaXMgaWRlbnRpdHkuXG4gICAgICovXG4gICAgZ2V0UHVibGljS2V5KCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUGFydGlhbElkZW50aXR5X2lubmVyLCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB7QGxpbmsgUHJpbmNpcGFsfSBvZiB0aGlzIGlkZW50aXR5LlxuICAgICAqL1xuICAgIGdldFByaW5jaXBhbCgpIHtcbiAgICAgICAgcmV0dXJuIFByaW5jaXBhbC5mcm9tKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1BhcnRpYWxJZGVudGl0eV9pbm5lciwgXCJmXCIpLnJhd0tleSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVpcmVkIGZvciB0aGUgSWRlbnRpdHkgaW50ZXJmYWNlLCBidXQgY2Fubm90IGltcGxlbWVudGVkIGZvciBqdXN0IGEgcHVibGljIGtleS5cbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1SZXF1ZXN0KCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ05vdCBpbXBsZW1lbnRlZC4gWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIHBhcnRpYWwgaWRlbnRpdHkgdG8gc2lnbiBjYWxscywgYnV0IHRoaXMgaWRlbnRpdHkgb25seSBoYXMgYWNjZXNzIHRvIHRoZSBwdWJsaWMga2V5LlRvIHNpZ24gY2FsbHMsIHVzZSBhIERlbGVnYXRpb25JZGVudGl0eSBpbnN0ZWFkLicpO1xuICAgIH1cbn1cbl9QYXJ0aWFsSWRlbnRpdHlfaW5uZXIgPSBuZXcgV2Vha01hcCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/partial.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/webauthn.js":
/*!**********************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/identity/lib/esm/identity/webauthn.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CosePublicKey: () => (/* binding */ CosePublicKey),\n/* harmony export */   WebAuthnIdentity: () => (/* binding */ WebAuthnIdentity)\n/* harmony export */ });\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js\");\n/* harmony import */ var borc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! borc */ \"(ssr)/../../../../../node_modules/borc/src/index.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../../../../node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../../../../node_modules/@dfinity/candid/lib/esm/index.js\");\n\n\n\n\nfunction _coseToDerEncodedBlob(cose) {\n    return (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.wrapDER)(cose, _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.DER_COSE_OID).buffer;\n}\n/**\n * From the documentation;\n * The authData is a byte array described in the spec. Parsing it will involve slicing bytes from\n * the array and converting them into usable objects.\n *\n * See https://webauthn.guide/#registration (subsection \"Example: Parsing the authenticator data\").\n * @param authData The authData field of the attestation response.\n * @returns The COSE key of the authData.\n */\nfunction _authDataToCose(authData) {\n    const dataView = new DataView(new ArrayBuffer(2));\n    const idLenBytes = authData.slice(53, 55);\n    [...new Uint8Array(idLenBytes)].forEach((v, i) => dataView.setUint8(i, v));\n    const credentialIdLength = dataView.getUint16(0);\n    // Get the public key object.\n    return authData.slice(55 + credentialIdLength);\n}\nclass CosePublicKey {\n    constructor(_cose) {\n        this._cose = _cose;\n        this._encodedKey = _coseToDerEncodedBlob(_cose);\n    }\n    toDer() {\n        return this._encodedKey;\n    }\n    getCose() {\n        return this._cose;\n    }\n}\n/**\n * Create a challenge from a string or array. The default challenge is always the same\n * because we don't need to verify the authenticity of the key on the server (we don't\n * register our keys with the IC). Any challenge would do, even one per key, randomly\n * generated.\n * @param challenge The challenge to transform into a byte array. By default a hard\n *        coded string.\n */\nfunction _createChallengeBuffer(challenge = '<ic0.app>') {\n    if (typeof challenge === 'string') {\n        return Uint8Array.from(challenge, c => c.charCodeAt(0));\n    }\n    else {\n        return challenge;\n    }\n}\n/**\n * Create a credentials to authenticate with a server. This is necessary in order in\n * WebAuthn to get credentials IDs (which give us the public key and allow us to\n * sign), but in the case of the Internet Computer, we don't actually need to register\n * it, so we don't.\n * @param credentialCreationOptions an optional CredentialCreationOptions object\n */\nasync function _createCredential(credentialCreationOptions) {\n    const creds = (await navigator.credentials.create(credentialCreationOptions !== null && credentialCreationOptions !== void 0 ? credentialCreationOptions : {\n        publicKey: {\n            authenticatorSelection: {\n                userVerification: 'preferred',\n            },\n            attestation: 'direct',\n            challenge: _createChallengeBuffer(),\n            pubKeyCredParams: [{ type: 'public-key', alg: PubKeyCoseAlgo.ECDSA_WITH_SHA256 }],\n            rp: {\n                name: 'Internet Identity Service',\n            },\n            user: {\n                id: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.randomBytes)(16),\n                name: 'Internet Identity',\n                displayName: 'Internet Identity',\n            },\n        },\n    }));\n    if (creds === null) {\n        return null;\n    }\n    return {\n        // do _not_ use ...creds here, as creds is not enumerable in all cases\n        id: creds.id,\n        response: creds.response,\n        type: creds.type,\n        authenticatorAttachment: creds.authenticatorAttachment,\n        getClientExtensionResults: creds.getClientExtensionResults,\n        // Some password managers will return a Uint8Array, so we ensure we return an ArrayBuffer.\n        rawId: (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_2__.bufFromBufLike)(creds.rawId),\n    };\n}\n// See https://www.iana.org/assignments/cose/cose.xhtml#algorithms for a complete\n// list of these algorithms. We only list the ones we support here.\nvar PubKeyCoseAlgo;\n(function (PubKeyCoseAlgo) {\n    PubKeyCoseAlgo[PubKeyCoseAlgo[\"ECDSA_WITH_SHA256\"] = -7] = \"ECDSA_WITH_SHA256\";\n})(PubKeyCoseAlgo || (PubKeyCoseAlgo = {}));\n/**\n * A SignIdentity that uses `navigator.credentials`. See https://webauthn.guide/ for\n * more information about WebAuthentication.\n */\nclass WebAuthnIdentity extends _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.SignIdentity {\n    constructor(rawId, cose, authenticatorAttachment) {\n        super();\n        this.rawId = rawId;\n        this.authenticatorAttachment = authenticatorAttachment;\n        this._publicKey = new CosePublicKey(cose);\n    }\n    /**\n     * Create an identity from a JSON serialization.\n     * @param json - json to parse\n     */\n    static fromJSON(json) {\n        const { publicKey, rawId } = JSON.parse(json);\n        if (typeof publicKey !== 'string' || typeof rawId !== 'string') {\n            throw new Error('Invalid JSON string.');\n        }\n        return new this((0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.fromHex)(rawId), (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.fromHex)(publicKey), undefined);\n    }\n    /**\n     * Create an identity.\n     * @param credentialCreationOptions an optional CredentialCreationOptions Challenge\n     */\n    static async create(credentialCreationOptions) {\n        var _a;\n        const creds = await _createCredential(credentialCreationOptions);\n        if (!creds || creds.type !== 'public-key') {\n            throw new Error('Could not create credentials.');\n        }\n        const response = creds.response;\n        if (response.attestationObject === undefined) {\n            throw new Error('Was expecting an attestation response.');\n        }\n        // Parse the attestationObject as CBOR.\n        const attObject = borc__WEBPACK_IMPORTED_MODULE_1__.decodeFirst(new Uint8Array(response.attestationObject));\n        return new this(creds.rawId, _authDataToCose(attObject.authData), (_a = creds.authenticatorAttachment) !== null && _a !== void 0 ? _a : undefined);\n    }\n    getPublicKey() {\n        return this._publicKey;\n    }\n    /**\n     * WebAuthn level 3 spec introduces a new attribute on successful WebAuthn interactions,\n     * see https://w3c.github.io/webauthn/#dom-publickeycredential-authenticatorattachment.\n     * This attribute is already implemented for Chrome, Safari and Edge.\n     *\n     * Given the attribute is only available after a successful interaction, the information is\n     * provided opportunistically and might also be `undefined`.\n     */\n    getAuthenticatorAttachment() {\n        return this.authenticatorAttachment;\n    }\n    async sign(blob) {\n        const result = (await navigator.credentials.get({\n            publicKey: {\n                allowCredentials: [\n                    {\n                        type: 'public-key',\n                        id: this.rawId,\n                    },\n                ],\n                challenge: blob,\n                userVerification: 'preferred',\n            },\n        }));\n        if (result.authenticatorAttachment !== null) {\n            this.authenticatorAttachment = result.authenticatorAttachment;\n        }\n        const response = result.response;\n        const cbor = borc__WEBPACK_IMPORTED_MODULE_1__.encode(new borc__WEBPACK_IMPORTED_MODULE_1__.Tagged(55799, {\n            authenticator_data: new Uint8Array(response.authenticatorData),\n            client_data_json: new TextDecoder().decode(response.clientDataJSON),\n            signature: new Uint8Array(response.signature),\n        }));\n        if (!cbor) {\n            throw new Error('failed to encode cbor');\n        }\n        return cbor.buffer;\n    }\n    /**\n     * Allow for JSON serialization of all information needed to reuse this identity.\n     */\n    toJSON() {\n        return {\n            publicKey: (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(this._publicKey.getCose()),\n            rawId: (0,_dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.toHex)(this.rawId),\n        };\n    }\n}\n//# sourceMappingURL=webauthn.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/webauthn.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/index.js":
/*!**********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/identity/lib/esm/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CryptoError: () => (/* reexport safe */ _identity_ecdsa__WEBPACK_IMPORTED_MODULE_1__.CryptoError),\n/* harmony export */   DER_COSE_OID: () => (/* reexport safe */ _dfinity_agent__WEBPACK_IMPORTED_MODULE_5__.DER_COSE_OID),\n/* harmony export */   Delegation: () => (/* reexport safe */ _identity_delegation__WEBPACK_IMPORTED_MODULE_2__.Delegation),\n/* harmony export */   DelegationChain: () => (/* reexport safe */ _identity_delegation__WEBPACK_IMPORTED_MODULE_2__.DelegationChain),\n/* harmony export */   DelegationIdentity: () => (/* reexport safe */ _identity_delegation__WEBPACK_IMPORTED_MODULE_2__.DelegationIdentity),\n/* harmony export */   ECDSAKeyIdentity: () => (/* reexport safe */ _identity_ecdsa__WEBPACK_IMPORTED_MODULE_1__.ECDSAKeyIdentity),\n/* harmony export */   ED25519_OID: () => (/* reexport safe */ _dfinity_agent__WEBPACK_IMPORTED_MODULE_5__.ED25519_OID),\n/* harmony export */   Ed25519KeyIdentity: () => (/* reexport safe */ _identity_ed25519__WEBPACK_IMPORTED_MODULE_0__.Ed25519KeyIdentity),\n/* harmony export */   Ed25519PublicKey: () => (/* reexport safe */ _identity_ed25519__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey),\n/* harmony export */   PartialDelegationIdentity: () => (/* reexport safe */ _identity_delegation__WEBPACK_IMPORTED_MODULE_2__.PartialDelegationIdentity),\n/* harmony export */   PartialIdentity: () => (/* reexport safe */ _identity_partial__WEBPACK_IMPORTED_MODULE_3__.PartialIdentity),\n/* harmony export */   Secp256k1KeyIdentity: () => (/* binding */ Secp256k1KeyIdentity),\n/* harmony export */   WebAuthnIdentity: () => (/* reexport safe */ _identity_webauthn__WEBPACK_IMPORTED_MODULE_4__.WebAuthnIdentity),\n/* harmony export */   isDelegationValid: () => (/* reexport safe */ _identity_delegation__WEBPACK_IMPORTED_MODULE_2__.isDelegationValid),\n/* harmony export */   unwrapDER: () => (/* reexport safe */ _dfinity_agent__WEBPACK_IMPORTED_MODULE_5__.unwrapDER),\n/* harmony export */   wrapDER: () => (/* reexport safe */ _dfinity_agent__WEBPACK_IMPORTED_MODULE_5__.wrapDER)\n/* harmony export */ });\n/* harmony import */ var _identity_ed25519__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity/ed25519 */ \"(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/ed25519.js\");\n/* harmony import */ var _identity_ecdsa__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identity/ecdsa */ \"(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/ecdsa.js\");\n/* harmony import */ var _identity_delegation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identity/delegation */ \"(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/delegation.js\");\n/* harmony import */ var _identity_partial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./identity/partial */ \"(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/partial.js\");\n/* harmony import */ var _identity_webauthn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./identity/webauthn */ \"(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/identity/webauthn.js\");\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/agent */ \"(ssr)/../../../../../node_modules/@dfinity/agent/lib/esm/index.js\");\n\n\n\n\n\n\n/**\n * @deprecated due to size of dependencies. Use `@dfinity/identity-secp256k1` instead.\n */\nclass Secp256k1KeyIdentity {\n    constructor() {\n        throw new Error('Secp256k1KeyIdentity has been moved to a new repo: @dfinity/identity-secp256k1');\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L2lkZW50aXR5L2xpYi9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwRTtBQUN6QztBQUNLO0FBQ0g7QUFDb0I7QUFDd0I7QUFDL0U7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvaWRlbnRpdHkvbGliL2VzbS9pbmRleC5qcz82ZGJmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEVkMjU1MTlLZXlJZGVudGl0eSwgRWQyNTUxOVB1YmxpY0tleSB9IGZyb20gJy4vaWRlbnRpdHkvZWQyNTUxOSc7XG5leHBvcnQgKiBmcm9tICcuL2lkZW50aXR5L2VjZHNhJztcbmV4cG9ydCAqIGZyb20gJy4vaWRlbnRpdHkvZGVsZWdhdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL2lkZW50aXR5L3BhcnRpYWwnO1xuZXhwb3J0IHsgV2ViQXV0aG5JZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHkvd2ViYXV0aG4nO1xuZXhwb3J0IHsgd3JhcERFUiwgdW53cmFwREVSLCBERVJfQ09TRV9PSUQsIEVEMjU1MTlfT0lEIH0gZnJvbSAnQGRmaW5pdHkvYWdlbnQnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBkdWUgdG8gc2l6ZSBvZiBkZXBlbmRlbmNpZXMuIFVzZSBgQGRmaW5pdHkvaWRlbnRpdHktc2VjcDI1NmsxYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY2xhc3MgU2VjcDI1NmsxS2V5SWRlbnRpdHkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3AyNTZrMUtleUlkZW50aXR5IGhhcyBiZWVuIG1vdmVkIHRvIGEgbmV3IHJlcG86IEBkZmluaXR5L2lkZW50aXR5LXNlY3AyNTZrMScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/identity/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/principal/lib/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSON_KEY_PRINCIPAL: () => (/* binding */ JSON_KEY_PRINCIPAL),\n/* harmony export */   Principal: () => (/* binding */ Principal)\n/* harmony export */ });\n/* harmony import */ var _utils_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/base32 */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/base32.js\");\n/* harmony import */ var _utils_getCrc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getCrc */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/getCrc.js\");\n/* harmony import */ var _utils_sha224__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/sha224 */ \"(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/sha224.js\");\n\n\n\nconst JSON_KEY_PRINCIPAL = '__principal__';\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\nconst MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR = 'aaaaa-aa';\nconst fromHexString = (hexString) => { var _a; return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16))); };\nconst toHexString = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nclass Principal {\n    constructor(_arr) {\n        this._arr = _arr;\n        this._isPrincipal = true;\n    }\n    static anonymous() {\n        return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n    }\n    /**\n     * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`\n     * @returns {Principal} principal of the management canister\n     */\n    static managementCanister() {\n        return this.fromHex(MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR);\n    }\n    static selfAuthenticating(publicKey) {\n        const sha = (0,_utils_sha224__WEBPACK_IMPORTED_MODULE_2__.sha224)(publicKey);\n        return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n    }\n    static from(other) {\n        if (typeof other === 'string') {\n            return Principal.fromText(other);\n        }\n        else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {\n            return new Principal(other);\n        }\n        else if (typeof other === 'object' &&\n            other !== null &&\n            other._isPrincipal === true) {\n            return new Principal(other._arr);\n        }\n        throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n    }\n    static fromHex(hex) {\n        return new this(fromHexString(hex));\n    }\n    static fromText(text) {\n        let maybePrincipal = text;\n        // If formatted as JSON string, parse it first\n        if (text.includes(JSON_KEY_PRINCIPAL)) {\n            const obj = JSON.parse(text);\n            if (JSON_KEY_PRINCIPAL in obj) {\n                maybePrincipal = obj[JSON_KEY_PRINCIPAL];\n            }\n        }\n        const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, '');\n        let arr = (0,_utils_base32__WEBPACK_IMPORTED_MODULE_0__.decode)(canisterIdNoDash);\n        arr = arr.slice(4, arr.length);\n        const principal = new this(arr);\n        if (principal.toText() !== maybePrincipal) {\n            throw new Error(`Principal \"${principal.toText()}\" does not have a valid checksum (original value \"${maybePrincipal}\" may not be a valid Principal ID).`);\n        }\n        return principal;\n    }\n    static fromUint8Array(arr) {\n        return new this(arr);\n    }\n    isAnonymous() {\n        return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n    }\n    toUint8Array() {\n        return this._arr;\n    }\n    toHex() {\n        return toHexString(this._arr).toUpperCase();\n    }\n    toText() {\n        const checksumArrayBuf = new ArrayBuffer(4);\n        const view = new DataView(checksumArrayBuf);\n        view.setUint32(0, (0,_utils_getCrc__WEBPACK_IMPORTED_MODULE_1__.getCrc32)(this._arr));\n        const checksum = new Uint8Array(checksumArrayBuf);\n        const bytes = Uint8Array.from(this._arr);\n        const array = new Uint8Array([...checksum, ...bytes]);\n        const result = (0,_utils_base32__WEBPACK_IMPORTED_MODULE_0__.encode)(array);\n        const matches = result.match(/.{1,5}/g);\n        if (!matches) {\n            // This should only happen if there's no character, which is unreachable.\n            throw new Error();\n        }\n        return matches.join('-');\n    }\n    toString() {\n        return this.toText();\n    }\n    /**\n     * Serializes to JSON\n     * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string\n     */\n    toJSON() {\n        return { [JSON_KEY_PRINCIPAL]: this.toText() };\n    }\n    /**\n     * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification\n     * @param {Principal} other - a {@link Principal} to compare\n     * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than\n     */\n    compareTo(other) {\n        for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {\n            if (this._arr[i] < other._arr[i])\n                return 'lt';\n            else if (this._arr[i] > other._arr[i])\n                return 'gt';\n        }\n        // Here, at least one principal is a prefix of the other principal (they could be the same)\n        if (this._arr.length < other._arr.length)\n            return 'lt';\n        if (this._arr.length > other._arr.length)\n            return 'gt';\n        return 'eq';\n    }\n    /**\n     * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method\n     * @param other a {@link Principal} to compare\n     * @returns {boolean} boolean\n     */\n    ltEq(other) {\n        const cmp = this.compareTo(other);\n        return cmp == 'lt' || cmp == 'eq';\n    }\n    /**\n     * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method\n     * @param other a {@link Principal} to compare\n     * @returns {boolean} boolean\n     */\n    gtEq(other) {\n        const cmp = this.compareTo(other);\n        return cmp == 'gt' || cmp == 'eq';\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/base32.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/principal/lib/esm/utils/base32.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz234567';\n// Build a lookup table for decoding.\nconst lookupTable = Object.create(null);\nfor (let i = 0; i < alphabet.length; i++) {\n    lookupTable[alphabet[i]] = i;\n}\n// Add aliases for rfc4648.\nlookupTable['0'] = lookupTable.o;\nlookupTable['1'] = lookupTable.i;\n/**\n * @param input The input array to encode.\n * @returns A Base32 string encoding the input.\n */\nfunction encode(input) {\n    // How many bits will we skip from the first byte.\n    let skip = 0;\n    // 5 high bits, carry from one byte to the next.\n    let bits = 0;\n    // The output string in base32.\n    let output = '';\n    function encodeByte(byte) {\n        if (skip < 0) {\n            // we have a carry from the previous byte\n            bits |= byte >> -skip;\n        }\n        else {\n            // no carry\n            bits = (byte << skip) & 248;\n        }\n        if (skip > 3) {\n            // Not enough data to produce a character, get us another one\n            skip -= 8;\n            return 1;\n        }\n        if (skip < 4) {\n            // produce a character\n            output += alphabet[bits >> 3];\n            skip += 5;\n        }\n        return 0;\n    }\n    for (let i = 0; i < input.length;) {\n        i += encodeByte(input[i]);\n    }\n    return output + (skip < 0 ? alphabet[bits >> 3] : '');\n}\n/**\n * @param input The base32 encoded string to decode.\n */\nfunction decode(input) {\n    // how many bits we have from the previous character.\n    let skip = 0;\n    // current byte we're producing.\n    let byte = 0;\n    const output = new Uint8Array(((input.length * 4) / 3) | 0);\n    let o = 0;\n    function decodeChar(char) {\n        // Consume a character from the stream, store\n        // the output in this.output. As before, better\n        // to use update().\n        let val = lookupTable[char.toLowerCase()];\n        if (val === undefined) {\n            throw new Error(`Invalid character: ${JSON.stringify(char)}`);\n        }\n        // move to the high bits\n        val <<= 3;\n        byte |= val >>> skip;\n        skip += 5;\n        if (skip >= 8) {\n            // We have enough bytes to produce an output\n            output[o++] = byte;\n            skip -= 8;\n            if (skip > 0) {\n                byte = (val << (5 - skip)) & 255;\n            }\n            else {\n                byte = 0;\n            }\n        }\n    }\n    for (const c of input) {\n        decodeChar(c);\n    }\n    return output.slice(0, o);\n}\n//# sourceMappingURL=base32.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L3ByaW5jaXBhbC9saWIvZXNtL3V0aWxzL2Jhc2UzMi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QscUJBQXFCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZGZpbml0eS9wcmluY2lwYWwvbGliL2VzbS91dGlscy9iYXNlMzIuanM/NTYyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejIzNDU2Nyc7XG4vLyBCdWlsZCBhIGxvb2t1cCB0YWJsZSBmb3IgZGVjb2RpbmcuXG5jb25zdCBsb29rdXBUYWJsZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mb3IgKGxldCBpID0gMDsgaSA8IGFscGhhYmV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbG9va3VwVGFibGVbYWxwaGFiZXRbaV1dID0gaTtcbn1cbi8vIEFkZCBhbGlhc2VzIGZvciByZmM0NjQ4LlxubG9va3VwVGFibGVbJzAnXSA9IGxvb2t1cFRhYmxlLm87XG5sb29rdXBUYWJsZVsnMSddID0gbG9va3VwVGFibGUuaTtcbi8qKlxuICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCBhcnJheSB0byBlbmNvZGUuXG4gKiBAcmV0dXJucyBBIEJhc2UzMiBzdHJpbmcgZW5jb2RpbmcgdGhlIGlucHV0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gICAgLy8gSG93IG1hbnkgYml0cyB3aWxsIHdlIHNraXAgZnJvbSB0aGUgZmlyc3QgYnl0ZS5cbiAgICBsZXQgc2tpcCA9IDA7XG4gICAgLy8gNSBoaWdoIGJpdHMsIGNhcnJ5IGZyb20gb25lIGJ5dGUgdG8gdGhlIG5leHQuXG4gICAgbGV0IGJpdHMgPSAwO1xuICAgIC8vIFRoZSBvdXRwdXQgc3RyaW5nIGluIGJhc2UzMi5cbiAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgZnVuY3Rpb24gZW5jb2RlQnl0ZShieXRlKSB7XG4gICAgICAgIGlmIChza2lwIDwgMCkge1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIGNhcnJ5IGZyb20gdGhlIHByZXZpb3VzIGJ5dGVcbiAgICAgICAgICAgIGJpdHMgfD0gYnl0ZSA+PiAtc2tpcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIGNhcnJ5XG4gICAgICAgICAgICBiaXRzID0gKGJ5dGUgPDwgc2tpcCkgJiAyNDg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNraXAgPiAzKSB7XG4gICAgICAgICAgICAvLyBOb3QgZW5vdWdoIGRhdGEgdG8gcHJvZHVjZSBhIGNoYXJhY3RlciwgZ2V0IHVzIGFub3RoZXIgb25lXG4gICAgICAgICAgICBza2lwIC09IDg7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2tpcCA8IDQpIHtcbiAgICAgICAgICAgIC8vIHByb2R1Y2UgYSBjaGFyYWN0ZXJcbiAgICAgICAgICAgIG91dHB1dCArPSBhbHBoYWJldFtiaXRzID4+IDNdO1xuICAgICAgICAgICAgc2tpcCArPSA1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDspIHtcbiAgICAgICAgaSArPSBlbmNvZGVCeXRlKGlucHV0W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dCArIChza2lwIDwgMCA/IGFscGhhYmV0W2JpdHMgPj4gM10gOiAnJyk7XG59XG4vKipcbiAqIEBwYXJhbSBpbnB1dCBUaGUgYmFzZTMyIGVuY29kZWQgc3RyaW5nIHRvIGRlY29kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICAgIC8vIGhvdyBtYW55IGJpdHMgd2UgaGF2ZSBmcm9tIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIuXG4gICAgbGV0IHNraXAgPSAwO1xuICAgIC8vIGN1cnJlbnQgYnl0ZSB3ZSdyZSBwcm9kdWNpbmcuXG4gICAgbGV0IGJ5dGUgPSAwO1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KCgoaW5wdXQubGVuZ3RoICogNCkgLyAzKSB8IDApO1xuICAgIGxldCBvID0gMDtcbiAgICBmdW5jdGlvbiBkZWNvZGVDaGFyKGNoYXIpIHtcbiAgICAgICAgLy8gQ29uc3VtZSBhIGNoYXJhY3RlciBmcm9tIHRoZSBzdHJlYW0sIHN0b3JlXG4gICAgICAgIC8vIHRoZSBvdXRwdXQgaW4gdGhpcy5vdXRwdXQuIEFzIGJlZm9yZSwgYmV0dGVyXG4gICAgICAgIC8vIHRvIHVzZSB1cGRhdGUoKS5cbiAgICAgICAgbGV0IHZhbCA9IGxvb2t1cFRhYmxlW2NoYXIudG9Mb3dlckNhc2UoKV07XG4gICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNoYXJhY3RlcjogJHtKU09OLnN0cmluZ2lmeShjaGFyKX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtb3ZlIHRvIHRoZSBoaWdoIGJpdHNcbiAgICAgICAgdmFsIDw8PSAzO1xuICAgICAgICBieXRlIHw9IHZhbCA+Pj4gc2tpcDtcbiAgICAgICAgc2tpcCArPSA1O1xuICAgICAgICBpZiAoc2tpcCA+PSA4KSB7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIGVub3VnaCBieXRlcyB0byBwcm9kdWNlIGFuIG91dHB1dFxuICAgICAgICAgICAgb3V0cHV0W28rK10gPSBieXRlO1xuICAgICAgICAgICAgc2tpcCAtPSA4O1xuICAgICAgICAgICAgaWYgKHNraXAgPiAwKSB7XG4gICAgICAgICAgICAgICAgYnl0ZSA9ICh2YWwgPDwgKDUgLSBza2lwKSkgJiAyNTU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBieXRlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGMgb2YgaW5wdXQpIHtcbiAgICAgICAgZGVjb2RlQ2hhcihjKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dC5zbGljZSgwLCBvKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UzMi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/base32.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/getCrc.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/principal/lib/esm/utils/getCrc.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCrc32: () => (/* binding */ getCrc32)\n/* harmony export */ });\n// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable = new Uint32Array([\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n/**\n * Calculate the CRC32 of an ArrayBufferLike.\n * @param buf The BufferLike to calculate the CRC32 of.\n */\nfunction getCrc32(buf) {\n    const b = new Uint8Array(buf);\n    let crc = -1;\n    for (let i = 0; i < b.length; i++) {\n        const byte = b[i];\n        const t = (byte ^ crc) & 0xff;\n        crc = lookUpTable[t] ^ (crc >>> 8);\n    }\n    return (crc ^ -1) >>> 0;\n}\n//# sourceMappingURL=getCrc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L3ByaW5jaXBhbC9saWIvZXNtL3V0aWxzL2dldENyYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L3ByaW5jaXBhbC9saWIvZXNtL3V0aWxzL2dldENyYy5qcz9kNjBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyB0cmFuc2xhdGVkIHRvIEphdmFTY3JpcHQgZnJvbVxuLy8gaHR0cHM6Ly9seHAzMi5naXRodWIuaW8vZG9jcy9hLXNpbXBsZS1leGFtcGxlLWNyYzMyLWNhbGN1bGF0aW9uL1xuY29uc3QgbG9va1VwVGFibGUgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4MDAwMDAwMDAsIDB4NzcwNzMwOTYsIDB4ZWUwZTYxMmMsIDB4OTkwOTUxYmEsIDB4MDc2ZGM0MTksIDB4NzA2YWY0OGYsIDB4ZTk2M2E1MzUsIDB4OWU2NDk1YTMsXG4gICAgMHgwZWRiODgzMiwgMHg3OWRjYjhhNCwgMHhlMGQ1ZTkxZSwgMHg5N2QyZDk4OCwgMHgwOWI2NGMyYiwgMHg3ZWIxN2NiZCwgMHhlN2I4MmQwNywgMHg5MGJmMWQ5MSxcbiAgICAweDFkYjcxMDY0LCAweDZhYjAyMGYyLCAweGYzYjk3MTQ4LCAweDg0YmU0MWRlLCAweDFhZGFkNDdkLCAweDZkZGRlNGViLCAweGY0ZDRiNTUxLCAweDgzZDM4NWM3LFxuICAgIDB4MTM2Yzk4NTYsIDB4NjQ2YmE4YzAsIDB4ZmQ2MmY5N2EsIDB4OGE2NWM5ZWMsIDB4MTQwMTVjNGYsIDB4NjMwNjZjZDksIDB4ZmEwZjNkNjMsIDB4OGQwODBkZjUsXG4gICAgMHgzYjZlMjBjOCwgMHg0YzY5MTA1ZSwgMHhkNTYwNDFlNCwgMHhhMjY3NzE3MiwgMHgzYzAzZTRkMSwgMHg0YjA0ZDQ0NywgMHhkMjBkODVmZCwgMHhhNTBhYjU2YixcbiAgICAweDM1YjVhOGZhLCAweDQyYjI5ODZjLCAweGRiYmJjOWQ2LCAweGFjYmNmOTQwLCAweDMyZDg2Y2UzLCAweDQ1ZGY1Yzc1LCAweGRjZDYwZGNmLCAweGFiZDEzZDU5LFxuICAgIDB4MjZkOTMwYWMsIDB4NTFkZTAwM2EsIDB4YzhkNzUxODAsIDB4YmZkMDYxMTYsIDB4MjFiNGY0YjUsIDB4NTZiM2M0MjMsIDB4Y2ZiYTk1OTksIDB4YjhiZGE1MGYsXG4gICAgMHgyODAyYjg5ZSwgMHg1ZjA1ODgwOCwgMHhjNjBjZDliMiwgMHhiMTBiZTkyNCwgMHgyZjZmN2M4NywgMHg1ODY4NGMxMSwgMHhjMTYxMWRhYiwgMHhiNjY2MmQzZCxcbiAgICAweDc2ZGM0MTkwLCAweDAxZGI3MTA2LCAweDk4ZDIyMGJjLCAweGVmZDUxMDJhLCAweDcxYjE4NTg5LCAweDA2YjZiNTFmLCAweDlmYmZlNGE1LCAweGU4YjhkNDMzLFxuICAgIDB4NzgwN2M5YTIsIDB4MGYwMGY5MzQsIDB4OTYwOWE4OGUsIDB4ZTEwZTk4MTgsIDB4N2Y2YTBkYmIsIDB4MDg2ZDNkMmQsIDB4OTE2NDZjOTcsIDB4ZTY2MzVjMDEsXG4gICAgMHg2YjZiNTFmNCwgMHgxYzZjNjE2MiwgMHg4NTY1MzBkOCwgMHhmMjYyMDA0ZSwgMHg2YzA2OTVlZCwgMHgxYjAxYTU3YiwgMHg4MjA4ZjRjMSwgMHhmNTBmYzQ1NyxcbiAgICAweDY1YjBkOWM2LCAweDEyYjdlOTUwLCAweDhiYmViOGVhLCAweGZjYjk4ODdjLCAweDYyZGQxZGRmLCAweDE1ZGEyZDQ5LCAweDhjZDM3Y2YzLCAweGZiZDQ0YzY1LFxuICAgIDB4NGRiMjYxNTgsIDB4M2FiNTUxY2UsIDB4YTNiYzAwNzQsIDB4ZDRiYjMwZTIsIDB4NGFkZmE1NDEsIDB4M2RkODk1ZDcsIDB4YTRkMWM0NmQsIDB4ZDNkNmY0ZmIsXG4gICAgMHg0MzY5ZTk2YSwgMHgzNDZlZDlmYywgMHhhZDY3ODg0NiwgMHhkYTYwYjhkMCwgMHg0NDA0MmQ3MywgMHgzMzAzMWRlNSwgMHhhYTBhNGM1ZiwgMHhkZDBkN2NjOSxcbiAgICAweDUwMDU3MTNjLCAweDI3MDI0MWFhLCAweGJlMGIxMDEwLCAweGM5MGMyMDg2LCAweDU3NjhiNTI1LCAweDIwNmY4NWIzLCAweGI5NjZkNDA5LCAweGNlNjFlNDlmLFxuICAgIDB4NWVkZWY5MGUsIDB4MjlkOWM5OTgsIDB4YjBkMDk4MjIsIDB4YzdkN2E4YjQsIDB4NTliMzNkMTcsIDB4MmViNDBkODEsIDB4YjdiZDVjM2IsIDB4YzBiYTZjYWQsXG4gICAgMHhlZGI4ODMyMCwgMHg5YWJmYjNiNiwgMHgwM2I2ZTIwYywgMHg3NGIxZDI5YSwgMHhlYWQ1NDczOSwgMHg5ZGQyNzdhZiwgMHgwNGRiMjYxNSwgMHg3M2RjMTY4MyxcbiAgICAweGUzNjMwYjEyLCAweDk0NjQzYjg0LCAweDBkNmQ2YTNlLCAweDdhNmE1YWE4LCAweGU0MGVjZjBiLCAweDkzMDlmZjlkLCAweDBhMDBhZTI3LCAweDdkMDc5ZWIxLFxuICAgIDB4ZjAwZjkzNDQsIDB4ODcwOGEzZDIsIDB4MWUwMWYyNjgsIDB4NjkwNmMyZmUsIDB4Zjc2MjU3NWQsIDB4ODA2NTY3Y2IsIDB4MTk2YzM2NzEsIDB4NmU2YjA2ZTcsXG4gICAgMHhmZWQ0MWI3NiwgMHg4OWQzMmJlMCwgMHgxMGRhN2E1YSwgMHg2N2RkNGFjYywgMHhmOWI5ZGY2ZiwgMHg4ZWJlZWZmOSwgMHgxN2I3YmU0MywgMHg2MGIwOGVkNSxcbiAgICAweGQ2ZDZhM2U4LCAweGExZDE5MzdlLCAweDM4ZDhjMmM0LCAweDRmZGZmMjUyLCAweGQxYmI2N2YxLCAweGE2YmM1NzY3LCAweDNmYjUwNmRkLCAweDQ4YjIzNjRiLFxuICAgIDB4ZDgwZDJiZGEsIDB4YWYwYTFiNGMsIDB4MzYwMzRhZjYsIDB4NDEwNDdhNjAsIDB4ZGY2MGVmYzMsIDB4YTg2N2RmNTUsIDB4MzE2ZThlZWYsIDB4NDY2OWJlNzksXG4gICAgMHhjYjYxYjM4YywgMHhiYzY2ODMxYSwgMHgyNTZmZDJhMCwgMHg1MjY4ZTIzNiwgMHhjYzBjNzc5NSwgMHhiYjBiNDcwMywgMHgyMjAyMTZiOSwgMHg1NTA1MjYyZixcbiAgICAweGM1YmEzYmJlLCAweGIyYmQwYjI4LCAweDJiYjQ1YTkyLCAweDVjYjM2YTA0LCAweGMyZDdmZmE3LCAweGI1ZDBjZjMxLCAweDJjZDk5ZThiLCAweDViZGVhZTFkLFxuICAgIDB4OWI2NGMyYjAsIDB4ZWM2M2YyMjYsIDB4NzU2YWEzOWMsIDB4MDI2ZDkzMGEsIDB4OWMwOTA2YTksIDB4ZWIwZTM2M2YsIDB4NzIwNzY3ODUsIDB4MDUwMDU3MTMsXG4gICAgMHg5NWJmNGE4MiwgMHhlMmI4N2ExNCwgMHg3YmIxMmJhZSwgMHgwY2I2MWIzOCwgMHg5MmQyOGU5YiwgMHhlNWQ1YmUwZCwgMHg3Y2RjZWZiNywgMHgwYmRiZGYyMSxcbiAgICAweDg2ZDNkMmQ0LCAweGYxZDRlMjQyLCAweDY4ZGRiM2Y4LCAweDFmZGE4MzZlLCAweDgxYmUxNmNkLCAweGY2YjkyNjViLCAweDZmYjA3N2UxLCAweDE4Yjc0Nzc3LFxuICAgIDB4ODgwODVhZTYsIDB4ZmYwZjZhNzAsIDB4NjYwNjNiY2EsIDB4MTEwMTBiNWMsIDB4OGY2NTllZmYsIDB4Zjg2MmFlNjksIDB4NjE2YmZmZDMsIDB4MTY2Y2NmNDUsXG4gICAgMHhhMDBhZTI3OCwgMHhkNzBkZDJlZSwgMHg0ZTA0ODM1NCwgMHgzOTAzYjNjMiwgMHhhNzY3MjY2MSwgMHhkMDYwMTZmNywgMHg0OTY5NDc0ZCwgMHgzZTZlNzdkYixcbiAgICAweGFlZDE2YTRhLCAweGQ5ZDY1YWRjLCAweDQwZGYwYjY2LCAweDM3ZDgzYmYwLCAweGE5YmNhZTUzLCAweGRlYmI5ZWM1LCAweDQ3YjJjZjdmLCAweDMwYjVmZmU5LFxuICAgIDB4YmRiZGYyMWMsIDB4Y2FiYWMyOGEsIDB4NTNiMzkzMzAsIDB4MjRiNGEzYTYsIDB4YmFkMDM2MDUsIDB4Y2RkNzA2OTMsIDB4NTRkZTU3MjksIDB4MjNkOTY3YmYsXG4gICAgMHhiMzY2N2EyZSwgMHhjNDYxNGFiOCwgMHg1ZDY4MWIwMiwgMHgyYTZmMmI5NCwgMHhiNDBiYmUzNywgMHhjMzBjOGVhMSwgMHg1YTA1ZGYxYiwgMHgyZDAyZWY4ZCxcbl0pO1xuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIENSQzMyIG9mIGFuIEFycmF5QnVmZmVyTGlrZS5cbiAqIEBwYXJhbSBidWYgVGhlIEJ1ZmZlckxpa2UgdG8gY2FsY3VsYXRlIHRoZSBDUkMzMiBvZi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENyYzMyKGJ1Zikge1xuICAgIGNvbnN0IGIgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIGxldCBjcmMgPSAtMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYnl0ZSA9IGJbaV07XG4gICAgICAgIGNvbnN0IHQgPSAoYnl0ZSBeIGNyYykgJiAweGZmO1xuICAgICAgICBjcmMgPSBsb29rVXBUYWJsZVt0XSBeIChjcmMgPj4+IDgpO1xuICAgIH1cbiAgICByZXR1cm4gKGNyYyBeIC0xKSA+Pj4gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENyYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/getCrc.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/sha224.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/@dfinity/principal/lib/esm/utils/sha224.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/../../../../../node_modules/@noble/hashes/esm/sha256.js\");\n\n/**\n * Returns the SHA224 hash of the buffer.\n * @param data Arraybuffer to encode\n */\nfunction sha224(data) {\n    return _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha224.create().update(new Uint8Array(data)).digest();\n}\n//# sourceMappingURL=sha224.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkZmluaXR5L3ByaW5jaXBhbC9saWIvZXNtL3V0aWxzL3NoYTIyNC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyx3REFBUTtBQUNuQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGRmaW5pdHkvcHJpbmNpcGFsL2xpYi9lc20vdXRpbHMvc2hhMjI0LmpzP2RhZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhMjI0IGFzIGpzU2hhMjI0IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyNTYnO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBTSEEyMjQgaGFzaCBvZiB0aGUgYnVmZmVyLlxuICogQHBhcmFtIGRhdGEgQXJyYXlidWZmZXIgdG8gZW5jb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGEyMjQoZGF0YSkge1xuICAgIHJldHVybiBqc1NoYTIyNC5jcmVhdGUoKS51cGRhdGUobmV3IFVpbnQ4QXJyYXkoZGF0YSkpLmRpZ2VzdCgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhMjI0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/@dfinity/principal/lib/esm/utils/sha224.js\n");

/***/ })

};
;